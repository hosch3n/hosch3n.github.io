<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hosch3n</title>
  
  
  <link href="https://hosch3n.github.io/atom.xml" rel="self"/>
  
  <link href="https://hosch3n.github.io/"/>
  <updated>2023-12-10T09:45:06.571Z</updated>
  <id>https://hosch3n.github.io/</id>
  
  <author>
    <name>hosch3n</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Apache OFBiz XML-RPC反序列化漏洞分析</title>
    <link href="https://hosch3n.github.io/2023/12/07/Apache-OFBiz-XML-RPC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://hosch3n.github.io/2023/12/07/Apache-OFBiz-XML-RPC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2023-12-07T06:30:03.000Z</published>
    <updated>2023-12-10T09:45:06.571Z</updated>
    
    <content type="html"><![CDATA[<p><code>Apache XML-RPC</code>是一个Java实现的XML-RPC库，基于HTTP传输的XML实现RPC，最后一个版本为2020年2月6日发布的3.1.3。</p><p><code>Apache OFBiz</code>是一个企业自动化流程开源框架，提供ERP、CRM、电商应用程序。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="CVE-2016-5003"><a href="#CVE-2016-5003" class="headerlink" title="CVE-2016-5003"></a>CVE-2016-5003</h3><ul><li>影响 Apache XML-RPC &lt;= 3.1.3</li></ul><p>根据<a href="https://ws.apache.org/xmlrpc/types.html">Data Types</a>官方文档，设置了<code>enabledForExtensions</code>属性时，支持以<code>http://ws.apache.org/xmlrpc/namespaces/extensions</code>作为命名空间的<code>serializable</code>标签，用于传输以Base64编码的序列化字节数组。</p><p><img src="/images/ofbiza_a.png"></p><p>0ang3el在博客中给出了POC截图，看到以<code>rO0AB</code>开头的Base64编码序列化数据，对应十六进制Java原生序列化数据的<code>aced0005</code>魔数头。</p><p><img src="/images/ofbiza_b.png"></p><p>全局搜索<code>readObject</code>，看到<code>SerializableParser#getResult</code>调用<code>super.getResult()</code>获取字节数组后反序列化。<code>SerializableParser</code>继承自<code>ByteArrayParser</code>。</p><p><img src="/images/ofbiza_c.png"></p><p><code>ByteArrayParser</code>在<code>startElement</code>方法中解码Base64编码的字节数组，在<code>endElement</code>方法中调用了<code>setResult</code>方法。<code>ByteArrayParser</code>继承自<code>TypeParserImpl</code>。</p><p><img src="/images/ofbiza_d.png"></p><p><code>TypeParserImpl</code>中实现了<code>getResult</code>、<code>setResult</code>方法。查找对<code>ByteArrayParser#startElement</code>的调用，这里的接口会出现很多干扰结果。世上无难事只要肯放弃，反向跟进因为动态实现而路径爆炸后，试试正向跟进。</p><p><img src="/images/ofbiza_e.png"></p><p>定位到<code>XmlRpcRequestParser</code>，类注释表示它是对<code>XmlRpcClient</code>请求的解析器。从<code>startElement</code>方法的判断逻辑可以猜测，各级XML标签分别为<code>methodCall</code>、<code>methodName</code>、<code>params</code>、<code>param</code>、<code>value</code>，与POC截图吻合。</p><p><img src="/images/ofbiza_f.png"></p><p><code>endElement</code>方法同理，两个方法分别调用了从父类<code>RecursiveTypeParserImpl</code>继承而来的<code>startValueTag</code>、<code>endValueTag</code>方法。代表Map对象的<code>struct</code>标签则会进入<code>default</code>分支调用<code>startElement</code>、<code>endElement</code>方法（<code>SerializerTest#testMapParam</code>测试用例可以看到相应XML）。</p><p><img src="/images/ofbiza_g.png"></p><p>在<code>RecursiveTypeParserImpl#startElement</code>中看到了对<code>TypeParser</code>接口实例的调用。</p><p><img src="/images/ofbiza_h.png"></p><p>跟进<code>getParser</code>方法可知<code>pLocalName</code>为<code>serializable</code>时调用<code>SerializableParser</code>。</p><p><img src="/images/ofbiza_i.png"></p><p>查找对<code>RecursiveTypeParserImpl#startElement</code>的调用并筛选后，看到<code>SerializableSerializer#write</code>在序列化时写入了相应的<code>pLocalName</code>。</p><h3 id="CVE-2019-17570"><a href="#CVE-2019-17570" class="headerlink" title="CVE-2019-17570"></a>CVE-2019-17570</h3><ul><li>影响 3.1 &lt;= Apache XML-RPC &lt;= 3.1.3</li></ul><p>客户端解析响应数据时的反序列化，逻辑类似。</p><p><img src="/images/ofbiza_j.png"></p><p><img src="/images/ofbiza_k.png"></p><p><img src="/images/ofbiza_l.png"></p><h3 id="CVE-2020-9496"><a href="#CVE-2020-9496" class="headerlink" title="CVE-2020-9496"></a>CVE-2020-9496</h3><ul><li>影响 Apache OFBiz &lt; 17.12.04</li></ul><p><img src="/images/ofbiza_m.png"></p><p>全局搜索<code>org.apache.xmlrpc</code>，定位到<code>XmlRpcEventHandler#getRequest</code>，一路反向跟进得到调用链。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ofbiz.webapp.event.XmlRpcEventHandler#execute</span><br><span class="line">org.apache.ofbiz.webapp.event.XmlRpcEventHandler#invoke</span><br><span class="line">org.apache.ofbiz.webapp.control.RequestHandler#runEvent</span><br><span class="line">org.apache.ofbiz.webapp.control.RequestHandler#doRequest</span><br><span class="line">org.apache.ofbiz.webapp.control.ControlServlet#doGet</span><br><span class="line">org.apache.ofbiz.webapp.control.ControlServlet#doPost</span><br></pre></td></tr></table></figure><p>OFBiz根据<code>framework/component-load.xml</code>创建Context，并在相应的<code>WEB-INF/web.xml</code>中指定<code>url-pattern</code>。</p><p><img src="/images/ofbiza_n.png"></p><p><code>ControlServlet#doGet</code>中<code>this.getRequestHandler</code>方法实际调用了<code>RequestHandler#getRequestHandler</code>方法。</p><p><img src="/images/ofbiza_o.png"></p><p>一直跟到<code>RequestHandler</code>构造方法，由<code>ConfigXMLReader#getControllerConfigURL</code>获取配置文件路径后，经<code>EventFactory</code>构造方法创建对应的handler。</p><p><img src="/images/ofbiza_p.png"></p><p><code>webtools</code>的配置文件<code>/WEB-INF/controller.xml</code>中存在<code>&lt;request-map uri=&quot;xmlrpc&quot;</code>，并且include了<code>common-controller.xml</code>，再进一步include了<code>handlers-controller.xml</code>。</p><p><img src="/images/ofbiza_q.png"></p><p>定义了<code>xmlrpc</code>对应<code>XmlRpcEventHandler</code>，即sink所在类。</p><p><img src="/images/ofbiza_r.png"></p><hr><p><a href="https://github.com/apache/ofbiz-framework/commit/4bdfb54ffb6e05215dd826ca2902c3e31420287a">OFBIZ-11716</a>增加了鉴权配置。</p><p><img src="/images/ofbiza_s.png"></p><p><a href="https://github.com/apache/ofbiz-framework/commit/a5bdcc6f9ea59d5d614f64832d5b6acec8e81e97">OFBIZ-12332</a>增加了过滤关键字的Filter</p><p><img src="/images/ofbiza_t.png"></p><h3 id="CVE-2023-49070"><a href="#CVE-2023-49070" class="headerlink" title="CVE-2023-49070"></a>CVE-2023-49070</h3><ul><li>影响 Apache OFBiz &lt; 18.12.10</li></ul><p><code>RequestHandler#doRequest</code>判断<code>securityAuth</code>后，执行<code>checkLoginEvent</code>。</p><p><img src="/images/ofbiza_u.png"></p><p>进入if分支的条件是<code>security</code>标签<code>auth</code>属性的值为<code>true</code>，对应上文<code>OFBIZ-11716</code>增加的鉴权。</p><p><img src="/images/ofbiza_v.png"></p><p>根据<code>webcommon/WEB-INF/common-controller.xml</code>找到<code>LoginWorker#extensionCheckLogin</code>，其进一步调用了<code>LoginWorker#checkLogin</code>。</p><p><img src="/images/ofbiza_w.png"></p><p>进入343行的if分支则会返回<code>error</code>，否则会顺序执行并返回<code>success</code>。判断条件是逻辑或，跟进<code>login</code>方法。</p><p><img src="/images/ofbiza_x.png"></p><p><code>requirePasswordChange</code>参数为<code>Y</code>且<code>unpwErrMsgList</code>不为空时，会进入三目运算符分支返回非<code>error</code>字符串。</p><p><img src="/images/ofbiza_y.png"></p><p>看到438行/441行，只要用户名/密码为空就存在add，满足if条件绕过身份认证。</p><p>至于<code>OFBIZ-12332</code>增加的路径判断，<code>RequestHandler#doRequest</code>业务功能中用了<code>HttpServletRequest#getPathInfo</code>获取路径，而<code>Filter</code>用的<code>HttpServletRequest#getRequestURI</code>，是经典的路径绕过。</p><p>另外对<code>&lt;/serializable</code>的检查，改改设置XML命名空间的位置，给标签加个前缀即可绕过。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">POST /webtools/control/xmlrpc?USERNAME=&amp;PASSWORD=&amp;requirePasswordChange=Y HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8443</span><br><span class="line">Content-Type: application/xml</span><br><span class="line">Content-Length: 4104</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">methodCall</span> <span class="attr">xmlns:ex</span>=<span class="string">&quot;http://ws.apache.org/xmlrpc/namespaces/extensions&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">methodName</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">methodName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">params</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">struct</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">member</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ex:serializable</span>&gt;</span>rO0AB...<span class="tag">&lt;/<span class="name">ex:serializable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">member</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">struct</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">params</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">methodCall</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="https://github.com/apache/ofbiz-framework/commit/64d012d2c20d76200cedd3e1861b720d55a61398">OFBIZ-12812</a>删除了<code>Apache XML-RPC</code>相关库和代码</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://0ang3el.blogspot.com/2016/07/beware-of-ws-xmlrpc-library-in-your.html">Beware of ws-xmlrpc library in your Java App</a></p><p><a href="https://github.com/orangecertcc/security-research/security/advisories/GHSA-x2r6-4m45-m4jp">Apache - Deserialization of Untrusted Data in XML-RPC (CVE-2019-17570)</a></p><p><a href="https://securitylab.github.com/advisories/GHSL-2020-069-apache_ofbiz/">GHSL-2020-069: Unsafe deserialization of XMLRPC arguments in ApacheOfBiz - CVE-2020-9496</a></p><p><a href="https://xz.aliyun.com/t/7544">Tomcat URL解析差异性导致的安全问题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Apache XML-RPC&lt;/code&gt;是一个Java实现的XML-RPC库，基于HTTP传输的XML实现RPC，最后一个版本为2020年2月6日发布的3.1.3。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Apache OFBiz&lt;/code&gt;是一个企业自动化流程开源框架，</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="CVE-2019-17570" scheme="https://hosch3n.github.io/tags/CVE-2019-17570/"/>
    
    <category term="CVE-2020-9496" scheme="https://hosch3n.github.io/tags/CVE-2020-9496/"/>
    
    <category term="CVE-2023-49070" scheme="https://hosch3n.github.io/tags/CVE-2023-49070/"/>
    
    <category term="CVE-2016-5003" scheme="https://hosch3n.github.io/tags/CVE-2016-5003/"/>
    
  </entry>
  
  <entry>
    <title>获取光猫管理员动态密码</title>
    <link href="https://hosch3n.github.io/2023/12/05/%E8%8E%B7%E5%8F%96%E5%85%89%E7%8C%AB%E7%AE%A1%E7%90%86%E5%91%98%E5%8A%A8%E6%80%81%E5%AF%86%E7%A0%81/"/>
    <id>https://hosch3n.github.io/2023/12/05/%E8%8E%B7%E5%8F%96%E5%85%89%E7%8C%AB%E7%AE%A1%E7%90%86%E5%91%98%E5%8A%A8%E6%80%81%E5%AF%86%E7%A0%81/</id>
    <published>2023-12-05T07:32:16.000Z</published>
    <updated>2023-12-07T06:46:05.281Z</updated>
    
    <content type="html"><![CDATA[<p>华为、中兴、天邑等厂商的运营商定制化光猫，存在初始化管理员密码。装维人员上门搞完动态业务下发后，密码会变为随机字符和数字，可以通过一些方法获取到管理员动态密码。</p><table><thead><tr><th align="center">运营商</th><th align="center">帐号</th><th align="center">初始密码</th></tr></thead><tbody><tr><td align="center">电信</td><td align="center">telecomadmin</td><td align="center">nE7jA%5m</td></tr><tr><td align="center">移动</td><td align="center">CMCCAdmin</td><td align="center">aDm8H%MdA</td></tr><tr><td align="center">联通</td><td align="center">CUAdmin</td><td align="center">CUAdmin</td></tr></tbody></table><blockquote><p>注意：动态下发状态的管理员后台配置会同步到远程服务器，配乱后无法通过逻辑ID重置设备，因为远程配置也是错的。</p></blockquote><h2 id="电信方案一：小翼管家RPC"><a href="#电信方案一：小翼管家RPC" class="headerlink" title="电信方案一：小翼管家RPC"></a>电信方案一：小翼管家RPC</h2><ol><li><p>下载安装<code>小翼管家App</code>，点击下方<code>智能</code></p></li><li><p>点击右上角<code>+</code>号，添加设备</p></li><li><p>类型选择天翼网关，添加<code>绑定天翼网关及路由器</code></p></li><li><p>按照提示绑定好当前光猫后，进入对应设备的<code>网关设置</code></p></li><li><p>开启网络抓包后，开关<code>指示灯</code></p></li><li><p>编辑URL以<code>nos</code>开头的网关能力子系统HTTP请求包</p></li><li><p>修改HTTP请求包体为如下JSON</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;Params&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;MethodName&quot;</span><span class="punctuation">:</span><span class="string">&quot;GetTAPasswd&quot;</span><span class="punctuation">,</span><span class="attr">&quot;RPCMethod&quot;</span><span class="punctuation">:</span><span class="string">&quot;CallMethod&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ObjectPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;/com/ctc/igd1/Telecom/System&quot;</span><span class="punctuation">,</span><span class="attr">&quot;InterfaceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.ctc.igd1.SysCmd&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ServiceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.ctc.igd1&quot;</span><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure><ol start="8"><li>查看HTTP响应包体中的管理员动态密码</li></ol><h2 id="电信方案二：备份文件提权"><a href="#电信方案二：备份文件提权" class="headerlink" title="电信方案二：备份文件提权"></a>电信方案二：备份文件提权</h2><ol><li><p>通过光猫机身背后useradmin密码，进入<a href="http://192.168.1.1:8080/">普通用户装维后台</a></p></li><li><p>进入<code>管理</code>-&gt;<code>设备管理</code>界面，F12打开控制台搜索<code>session</code></p></li><li><p>找到形如<code>set3_sessionKey_666</code>的sessionKey，拼接到如下URL尾部并访问</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.1:8080/usbbackup.cmd?action=backupeble&amp;set3_sessionKey=set3_sessionKey_666</span><br></pre></td></tr></table></figure><ol start="4"><li><p>禁用<code>快速恢复</code>，插入U盘<code>备份配置</code></p></li><li><p><a href="http://www.nirsoft.net/toolsdownload/routerpassview.zip">下载routerpassview</a>，搜索查看e8_Config_Backup/xxx.cfg中的管理员动态密码</p></li></ol><h2 id="电信方案三：telnet终端命令"><a href="#电信方案三：telnet终端命令" class="headerlink" title="电信方案三：telnet终端命令"></a>电信方案三：telnet终端命令</h2><p>前三步与方案二基本相同，但是改为如下配置telnet与ftp的URL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.1:8080/telandftpcfg.cmd?action=add&amp;telusername=admin&amp;telpwd=admin&amp;telport=23&amp;telenable=1&amp;ftpusername=useradmin&amp;ftppwd=ftpadmin&amp;ftpport=21&amp;ftpenable=1&amp;set3_sessionKey=set3_sessionKey_666</span><br></pre></td></tr></table></figure><p>访问后便会开启telnet，终端连接后输入<code>su</code>命令和对应密码，最后通过<code>telecomadmin get</code>命令获取理员动态密码。</p><blockquote><p>su提权的密码根据光猫厂商、批次不同，基于<code>设备标识号</code>的算法规则也不同。</p></blockquote><h2 id="其它运营商"><a href="#其它运营商" class="headerlink" title="其它运营商"></a>其它运营商</h2><p>暂时没有需求，以后弄了再补档更新</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><p><a href="https://www.right.com.cn/forum/thread-5128686-1-1.html">2021年7月后出厂电信天邑TEWA-750/708/768/800/1000等超级密码破解方法及工具</a></p></li><li><p><a href="https://post.smzdm.com/p/ag8lgqn3/">获取电信天邑TEWA-768G/TEWA-708E/tewa-1000e光猫超级密码</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;华为、中兴、天邑等厂商的运营商定制化光猫，存在初始化管理员密码。装维人员上门搞完动态业务下发后，密码会变为随机字符和数字，可以通过一些方法获取到管理员动态密码。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;运营商&lt;/th&gt;
&lt;th</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="modem" scheme="https://hosch3n.github.io/tags/modem/"/>
    
    <category term="telecom" scheme="https://hosch3n.github.io/tags/telecom/"/>
    
  </entry>
  
</feed>
